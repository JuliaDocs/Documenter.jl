var documenterSearchIndex = {"docs":
[{"location":"lib/internals/dom/","page":"DOM","title":"DOM","text":"CollapsedDocStrings = true","category":"page"},{"location":"lib/internals/dom/#DOM","page":"DOM","title":"DOM","text":"","category":"section"},{"location":"lib/internals/dom/","page":"DOM","title":"DOM","text":"Modules = [Documenter.DOM]","category":"page"},{"location":"lib/internals/dom/#Documenter.DOM","page":"DOM","title":"Documenter.DOM","text":"Provides a domain specific language for representing HTML documents.\n\nExamples\n\nusing Documenter.DOM\n\n# `DOM` does not export any HTML tags. Define the ones we actually need.\n@tags div p em strong ul li\n\ndiv(\n    p(\"This \", em(\"is\"), \" a \", strong(\"paragraph.\"),\n    p(\"And this is \", strong(\"another\"), \" one\"),\n    ul(\n        li(\"and\"),\n        li(\"an\"),\n        li(\"unordered\"),\n        li(\"list\")\n    )\n)\n\nNotes\n\nAll the arguments passed to a node are flattened into a single vector rather than preserving any nested structure. This means that passing two vectors of nodes to a div will result in a div node with a single vector of children (the concatenation of the two vectors) rather than two vector children. The only arguments that are not flattened are nested nodes.\n\nString arguments are automatically converted into text nodes. Text nodes do not have any children or attributes and when displayed the string is escaped using escapehtml.\n\nAttributes\n\nAs well as plain nodes shown in the previous example, nodes can have attributes added to them using the following syntax.\n\ndiv[\".my-class\"](\n    img[:src => \"foo.jpg\"],\n    input[\"#my-id\", :disabled]\n)\n\nIn the above example we add a class = \"my-class\" attribute to the div node, a src = \"foo.jpg\" to the img, and id = \"my-id\" disabled attributes to the input node.\n\nThe following syntax is supported within [...]:\n\ntag[\"#id\"]\ntag[\".class\"]\ntag[\".class#id\"]\ntag[:disabled]\ntag[:src => \"foo.jpg\"]\n# ... or any combination of the above arguments.\n\nInternal Representation\n\nThe @tags macro defines named Tag objects as follows\n\n@tags div p em strong\n\nexpands to\n\nconst div, p, em, strong = Tag(:div), Tag(:p), Tag(:em), Tag(:strong)\n\nThese Tag objects are lightweight representations of empty HTML elements without any attributes and cannot be used to represent a complete document. To create an actual tree of HTML elements that can be rendered we need to add some attributes and/or child elements using getindex or call syntax. Applying either to a Tag object will construct a new Node object.\n\ntag(...)      # No attributes.\ntag[...]      # No children.\ntag[...](...) # Has both attributes and children.\n\nAll three of the above syntaxes return a new Node object. Printing of Node objects is defined using the standard Julia display functions, so only needs a call to print to print out a valid HTML document with all necessary text escaped.\n\n\n\n\n\n","category":"module"},{"location":"lib/internals/dom/#Documenter.DOM.HTMLDocument","page":"DOM","title":"Documenter.DOM.HTMLDocument","text":"A HTML node that wraps around the root node of the document and adds a DOCTYPE to it.\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/dom/#Documenter.DOM.Node","page":"DOM","title":"Documenter.DOM.Node","text":"Represents an element within an HTML document including any textual content, children Nodes, and attributes.\n\nThis type should not be constructed directly, but instead via (...) and [...] applied to a Tag or another Node object.\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/dom/#Documenter.DOM.Tag","page":"DOM","title":"Documenter.DOM.Tag","text":"Represents a empty and attribute-less HTML element.\n\nUse @tags to define instances of this type rather than manually creating them via Tag(:tagname).\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/dom/#Documenter.DOM.escapehtml-Tuple{AbstractString}","page":"DOM","title":"Documenter.DOM.escapehtml","text":"Escape characters in the provided string. This converts the following characters:\n\n< to &lt;\n> to &gt;\n& to &amp;\n' to &#39;\n\" to &quot;\n\nWhen no escaping is needed then the same object is returned, otherwise a new string is constructed with the characters escaped. The returned object should always be treated as an immutable copy and compared using == rather than ===.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/dom/#Documenter.DOM.flatten!-Tuple{Any, Any, Union{AbstractString, Symbol, Documenter.DOM.Node, Pair}}","page":"DOM","title":"Documenter.DOM.flatten!","text":"Signatures\n\nflatten!(f!, out, x::Atom)\nflatten!(f!, out, xs)\n\nFlatten the contents the third argument into the second after applying the function f! to the element.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/dom/#Documenter.DOM.@tags-Tuple","page":"DOM","title":"Documenter.DOM.@tags","text":"Define a collection of Tag objects and bind them to constants with the same names.\n\nExamples\n\nDefined globally within a module:\n\n@tags div ul li\n\nDefined within the scope of a function to avoid cluttering the global namespace:\n\nfunction template(args...)\n    @tags div ul li\n    # ...\nend\n\n\n\n\n\n","category":"macro"},{"location":"lib/internals/doctests/","page":"DocTests","title":"DocTests","text":"CollapsedDocStrings = true","category":"page"},{"location":"lib/internals/doctests/#DocTests","page":"DocTests","title":"DocTests","text":"","category":"section"},{"location":"lib/internals/doctests/","page":"DocTests","title":"DocTests","text":"Modules = [Documenter]\nPages = [\"doctests.jl\"]","category":"page"},{"location":"lib/internals/doctests/#Documenter._doctest-Tuple{Documenter.DocumentBlueprint, Documenter.Document}","page":"DocTests","title":"Documenter._doctest","text":"_doctest(blueprint, doc)\n\n\nTraverses the pages and modules in the documenter blueprint, searching and executing doctests.\n\nWill abort the document generation when an error is thrown. Use doctest = false keyword in Documenter.makedocs to disable doctesting.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/builder/","page":"Builder","title":"Builder","text":"CollapsedDocStrings = true","category":"page"},{"location":"lib/internals/builder/#Builder","page":"Builder","title":"Builder","text":"","category":"section"},{"location":"lib/internals/builder/","page":"Builder","title":"Builder","text":"Modules = [Documenter, Documenter.Builder]\nPages = [\"builder_pipeline.jl\"]","category":"page"},{"location":"lib/internals/builder/#Documenter.lt_page-Tuple{Any, Any}","page":"Builder","title":"Documenter.lt_page","text":"lt_page(a::AbstractString, b::AbstractString)\n\nChecks if the page path a should come before b in a sorted list. Falls back to standard string sorting, except for prioritizing index.md (i.e. index.md always comes first).\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/builder/#Documenter.walk_navpages-NTuple{6, Any}","page":"Builder","title":"Documenter.walk_navpages","text":"walk_navpages(visible, title, src, children, parent, doc)\n\n\nRecursively walks through the Document's .user.pages field, generating NavNodes and related data structures in the process.\n\nThis implementation is the de facto specification for the .user.pages field.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/builder/#Documenter.Builder","page":"Builder","title":"Documenter.Builder","text":"Defines the Documenter.jl build \"pipeline\" named DocumentPipeline.\n\nEach stage of the pipeline performs an action on a Document object. These actions may involve creating directory structures, expanding templates, running doctests, etc.\n\n\n\n\n\n","category":"module"},{"location":"lib/internals/builder/#Documenter.Builder.CheckDocument","page":"Builder","title":"Documenter.Builder.CheckDocument","text":"Checks that all documented objects are included in the document and runs doctests on all valid Julia code blocks.\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/builder/#Documenter.Builder.CrossReferences","page":"Builder","title":"Documenter.Builder.CrossReferences","text":"Finds and sets URLs for each @ref link in the document to the correct destinations.\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/builder/#Documenter.Builder.Doctest","page":"Builder","title":"Documenter.Builder.Doctest","text":"Runs all the doctests in all docstrings and Markdown files.\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/builder/#Documenter.Builder.DocumentPipeline","page":"Builder","title":"Documenter.Builder.DocumentPipeline","text":"The default document processing \"pipeline\", which consists of the following actions:\n\nSetupBuildDirectory\nDoctest\nExpandTemplates\nCheckDocument\nPopulate\nRenderDocument\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/builder/#Documenter.Builder.ExpandTemplates","page":"Builder","title":"Documenter.Builder.ExpandTemplates","text":"Executes a sequence of actions on each node of the parsed markdown files in turn.\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/builder/#Documenter.Builder.Populate","page":"Builder","title":"Documenter.Builder.Populate","text":"Populates the ContentsNodes and IndexNodes with links.\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/builder/#Documenter.Builder.RenderDocument","page":"Builder","title":"Documenter.Builder.RenderDocument","text":"Writes the document tree to the build directory.\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/builder/#Documenter.Builder.SetupBuildDirectory","page":"Builder","title":"Documenter.Builder.SetupBuildDirectory","text":"Creates the correct directory layout within the build folder and parses markdown files.\n\n\n\n\n\n","category":"type"},{"location":"man/hosting/walkthrough/#SSH-Deploy-Keys-Walkthrough","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"","category":"section"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"If the instructions in Authentication: SSH Deploy Keys did not work for you (for example, ssh-keygen is not installed), don't worry! This walkthrough will guide you through the process. There are three main steps:","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"Generating an SSH Key\nAdding the Public Key to GitHub or Gitea such as Codeberg\nAdding the Private Key","category":"page"},{"location":"man/hosting/walkthrough/#Generating-an-SSH-Key","page":"SSH Deploy Keys Walkthrough","title":"Generating an SSH Key","text":"","category":"section"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"The first step is to generate an SSH key. An SSH key is made up of two components: a public key, which can be shared publicly, and a private key, which you should ensure is never shared publicly.","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"The public key usually looks something like this","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"ssh-rsa [base64-encoded-key] [optional-comment]","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"And the private key usually look something like this","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"-----BEGIN RSA PRIVATE KEY-----\n ... base64-encoded key over several lines ...\n-----END RSA PRIVATE KEY-----","category":"page"},{"location":"man/hosting/walkthrough/#If-you-have-ssh-keygen-installed","page":"SSH Deploy Keys Walkthrough","title":"If you have ssh-keygen installed","text":"","category":"section"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"If you have ssh-keygen installed, but DocumenterTools.genkeys() didn't work, you can generate an SSH key as follows. First, generate a key using ssh-keygen and save it to the file privatekey:","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"shell> ssh-keygen -N \"\" -f privatekey","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"Next, we need to encode the private key in Base64. Run the following command:","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"julia> using Base64\n\njulia> read(\"privatekey\", String) |> base64encode |>  println","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"Copy and paste the output somewhere. This is your private key and is required for the last step.","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"Now we need to get the public key. Run the following command:","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"julia> read(\"privatekey.pub\", String) |> println","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"Copy and paste the output somewhere. This is your public key and is required for the step Adding the Public Key to GitHub or Gitea such as Codeberg.","category":"page"},{"location":"man/hosting/walkthrough/#If-you-do-not-have-ssh-keygen","page":"SSH Deploy Keys Walkthrough","title":"If you do not have ssh-keygen","text":"","category":"section"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"If you're using Windows, you probably don't have ssh-keygen installed. Instead, we're going to use a program called PuTTY. The first step in the process to generate a new SSH key is to download PuTTY:","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"Download and install PuTTY","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"PuTTY is actually a collection of a few different programs. We need to use PuTTYgen. Open it, and you should get a window that looks like:","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"(Image: )","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"Now we need to generate a key.","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"Click the \"Generate\" button, then follow the instructions and move the mouse around to create randomness.","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"Once you've moved the mouse enough, the window should look like:","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"(Image: )","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"Now we need to save the public key somewhere.","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"Copy the text in the box titled \"Public key for pasting into OpenSSH authorized_keys file\" and paste it somewhere for later. This is your public key and is required for the step Adding the Public Key to GitHub or Gitea such as Codeberg","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"Finally, we need to save the private key somewhere.","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"Click the \"Conversions\" tab, and then click \"Export OpenSSH key\". Save that file somewhere. That file is your private key and is required for the last step.\n(Image: )\nnote: Note\nDon't save your key via the \"Save private key\" button as this will save the key in the wrong format.","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"If you made it this far, congratulations! You now have the private and public keys needed to set up automatic deployment of your documentation. The next steps are to add the keys to GitHub and Travis.","category":"page"},{"location":"man/hosting/walkthrough/#Adding-the-Public-Key-to-GitHub-or-Gitea-such-as-Codeberg","page":"SSH Deploy Keys Walkthrough","title":"Adding the Public Key to GitHub or Gitea such as Codeberg","text":"","category":"section"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"In this section, we explain how to upload a public SSH key to GitHub and Gitea such as Codeberg. By this point , you should have generated a public key and saved it to a file. If you haven't done this, go read Generating an SSH Key.","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"Go to https://github.com/[YOUR_USER_NAME]/[YOUR_REPO_NAME]/settings/keys for GitHub and https://somegiteaname.org/[YOUR_USER_NAME]/[YOUR_REPO_NAME]/settings/keys and click \"Add deploy key\". You should get to a page that looks like,:","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"GitHub","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"(Image: github-add-deploy-key)","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"Gitea","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"(Image: gitea-codeberg-add-deploy-key)","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"Now we need to fill in three pieces of information.","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"Have \"Title\" be e.g. \"Documenter\".\nCopy and paste the public key that we generated in the Generating an SSH Key step into the \"Key\" or \"Content\" field.\nMake sure that the \"Allow write access\" box is checked.","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"Once you're done, click \"Add key\". Congratulations! You've added the public key to GitHub or your Gitea instance. The next step is to add the private key to Travis, GitHub, or  Woodpecker Secrets.","category":"page"},{"location":"man/hosting/walkthrough/#Adding-the-Private-Key","page":"SSH Deploy Keys Walkthrough","title":"Adding the Private Key","text":"","category":"section"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"In this section, we explain how to upload a private SSH key to Travis. By this point, you should have generated a private key and saved it to a file. If you haven't done this, go read Generating an SSH Key.","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"First, we need to Base64 encode the private key. Open Julia, and run the command","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"julia> using Base64\n\njulia> read(\"path/to/private/key\", String) |> base64encode |> println","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"If you are in a unix and unix-like system, you can just use openssl command with tr  (for truncate) to generate your base64-encoded-key.","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"$ openssl enc -base64 -in path/to/your/private/key -out path/to/your/base/64/encoded/key\n$ # We need to truncate the newlines\n$ cat path/to/your/base/64/encoded/key | tr -d \"\\n\"","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"Copy the resulting output.","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"Go to https://travis-ci.com/[YOUR_USER_NAME]/[YOUR_REPO_NAME]/settings. Scroll down to the \"Environment Variables\" section. It should look like this:","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"(Image: )","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"Now, add a new environment variable called DOCUMENTER_KEY, and set its value to the output from the Julia command above (make sure to remove the surrounding quotes).","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"Finally, make sure that the \"Display value in build log\" is left switched off and then click \"Add\". Congratulations! You've added the private key to Travis.","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"warning: Security warning\nTo reiterate: make sure that the \"Display value in build log\" option is OFF for the variable, so that it does not get printed when the tests run. This base64-encoded string contains the unencrypted private key that gives full write access to your repository, so it must be kept safe.  Also, make sure that you never expose this variable in your tests, nor merge any code that does. You can read more about Travis environment variables in Travis User Documentation.","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"Final Remarks","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"You should now be able to continue on with the Hosting Documentation.","category":"page"},{"location":"lib/semver/#Documenter-and-semantic-versioning","page":"Semantic versioning","title":"Documenter & semantic versioning","text":"","category":"section"},{"location":"lib/semver/","page":"Semantic versioning","title":"Semantic versioning","text":"Documenter, like any good Julia package, follows semantic versioning (SemVer). As such, and as the package is currently in the v1.x era of its lifecycle, any changes in Documenter should not break existing uses of the package that rely on documented behaviors.[1]","category":"page"},{"location":"lib/semver/","page":"Semantic versioning","title":"Semantic versioning","text":"[1]: Eventually, of course, Documenter 2.0 may break everything. But we don't expect a breaking release in the very near future.","category":"page"},{"location":"lib/semver/","page":"Semantic versioning","title":"Semantic versioning","text":"However, Documenter is relatively complex, and it can sometimes be unclear what constitutes a breaking change. For example, is changing the CSS classes in the HTML themes allowed? What if the user relied on a CSS class in an @raw html-block? If their HTML is no longer rendered correctly, is that a breaking change? Is completely changing the LaTeX compiler a breaking change? What if it breaks a PDF build somewhere due to some math block using a feature that only works with pdflatex?","category":"page"},{"location":"lib/semver/","page":"Semantic versioning","title":"Semantic versioning","text":"This page aims to clarify what is and is not covered by the Documenter SemVer guarantees, both as information for users, and as guidance for developers.","category":"page"},{"location":"lib/semver/","page":"Semantic versioning","title":"Semantic versioning","text":"note: This page is not complete!\nIf you need to rely on something that is currently an internal API or undocumented behavior, open an issue or a pull request to get it documented! There is a good chance that the behavior is already a de factor SemVer guarantee, or can easily be cleaned up and made public API. The goal is to add and document additional SemVer guarantees over time.","category":"page"},{"location":"lib/semver/#Documenter's-API-guarantees","page":"Semantic versioning","title":"Documenter's API guarantees","text":"","category":"section"},{"location":"lib/semver/","page":"Semantic versioning","title":"Semantic versioning","text":"The following APIs and behaviors are guaranteed not to change:","category":"page"},{"location":"lib/semver/","page":"Semantic versioning","title":"Semantic versioning","text":"Standard promises about the Julia APIs (public Documenter functions and their documented arguments). In a nutshell, any make.jl making use of just public, documented parts of the Documenter API should always continue working (i.e. builds should complete). The public APIs include all exported functions and types, but is not limited to that –- see the \"Reference\" section of the manual for a list of public Julia APIs.\nAll documented Documenter behaviors. E.g. the way Documenter determines remote repository links is documented, or what files and with what structure get generated by the HTML builds. The behavior of undocumented edge cases may change, but only in accordance with what is documented.","category":"page"},{"location":"lib/semver/","page":"Semantic versioning","title":"Semantic versioning","text":"note: Experimental APIs\nNote that some APIs may explicitly marked experimental. In that case, you can only rely on them within a minor version. The next minor version release may completely change or remove experimental features and APIs.When relying on an experimental API (either in a Documenter extension package, or in a documentation build environment), you should fix Documenter to the specific compatible minor version(s) with a \"tilde specifier\" in the Project.toml file.","category":"page"},{"location":"lib/semver/#What-is-not-covered-by-SemVer","page":"Semantic versioning","title":"What is not covered by SemVer","text":"","category":"section"},{"location":"lib/semver/","page":"Semantic versioning","title":"Semantic versioning","text":"In principle, anything that is not covered by the previous section is, by definition, not part of the public API and is not guaranteed to keep working the way it is working right now.","category":"page"},{"location":"lib/semver/","page":"Semantic versioning","title":"Semantic versioning","text":"However, it is worth mentioning a few things explicitly. In particular, this includes things that are currently not part of the API, but should be added (in some way) in the future, but probably need a careful consideration before we commit to them as public APIs.","category":"page"},{"location":"lib/semver/","page":"Semantic versioning","title":"Semantic versioning","text":"Any time you hook into Documenter's internals in some way. This includes hooking into the seemingly extensible parts of the internals, such as adding additional build steps, or renderers. The long-term aim here is to create clean plugin APIs, but it is unlikely we'll be able to keep the current internals for that.\nThe HTML, TeX, or file structure of the generated documents (unless explicitly documented). This includes the CSS of the HTML themes, and as such any custom CSS overrides may stop working at any point. However, there are many de facto guarantees here that should get documented over time (e.g. for custom themes).\nThe look and feel of the HTML UI and the generated PDF may change considerably from one minor version to another.\nAnything explicitly marked experimental is not guaranteed to remain stable (see the note above).","category":"page"},{"location":"lib/semver/","page":"Semantic versioning","title":"Semantic versioning","text":"note: Patch versions are probably okay\nIf you are relying on some non-SemVer behaviors, features, or internals, it probably fine to expect things not to break within a patch release. In this case, you should add a [compat] entry to your Project.toml files with a tilde specifier fixing Documenter's to a specific minor version, e.g.Documenter = \"~1.X\"where X is the minor version you are developing against.Alternatively, if this is for package documentation, and your docs/make.jl script is relying on some non-SemVer behavior, you can also check in a docs/Manifest.toml file to fully fix the Documenter version. However, it may still be a good idea to include the version bound in the docs/Project.toml file, just as documentation for maintainers.","category":"page"},{"location":"contributing/#Contributing","page":"Contributing","title":"Contributing","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"This page details the some of the guidelines that should be followed when contributing to this package.","category":"page"},{"location":"contributing/#Branches","page":"Contributing","title":"Branches","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"From Documenter version 0.3 onwards release-* branches are used for tagged minor versions of this package. This follows the same approach used in the main Julia repository, albeit on a much more modest scale.","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Please open pull requests against the master branch rather than any of the release-* branches whenever possible.","category":"page"},{"location":"contributing/#Backports","page":"Contributing","title":"Backports","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Bug fixes are backported to the release-* branches using git cherry-pick -x by a JuliaDocs member and will become available in point releases of that particular minor version of the package.","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Feel free to nominate commits that should be backported by opening an issue. Requests for new point releases to be tagged in METADATA.jl can also be made in the same way.","category":"page"},{"location":"contributing/#release-*-branches","page":"Contributing","title":"release-* branches","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Each new minor version x.y.0 gets a branch called release-x.y (a protected branch).\nNew versions are usually tagged only from the release-x.y branches.\nFor patch releases, changes get backported to the release-x.y branch via a single PR with the standard name \"Backports for x.y.z\" and label \"Type: Backport\". The PR message links to all the PRs that are providing commits to the backport. The PR gets merged as a merge commit (i.e. not squashed).\nThe old release-* branches may be removed once they have outlived their usefulness.\nPatch version milestones are used to keep track of which PRs get backported etc.","category":"page"},{"location":"contributing/#Style-Guide","page":"Contributing","title":"Style Guide","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Follow the style of the surrounding text when making changes. When adding new features please try to stick to the following points whenever applicable.","category":"page"},{"location":"contributing/#Julia","page":"Contributing","title":"Julia","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Documenter uses Runic.jl for code formatting. In addition, the following style guidelines should be followed:","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"use function ... end when a method definition contains more than one toplevel expression;\nrelated short-form method definitions don't need a new line between them;\nunrelated or long-form method definitions must have a blank line separating each one;\nfiles containing a single module ... end must be named after the module;\nmethod arguments should be ordered based on the amount of usage within the method body;\nmethods extended from other modules must follow their inherited argument order, not the above rule;\navoid dense expressions where possible e.g. prefer nested ifs over complex nested ?s;\ndo not use multiline comments (#= and =#);\nwrap long lines as near to 92 characters as possible, this includes docstrings;\nfollow the standard naming conventions used in Base.","category":"page"},{"location":"contributing/#Markdown","page":"Contributing","title":"Markdown","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Use unbalanced # headers, i.e. no # on the right hand side of the header text;\ninclude a single blank line between toplevel blocks;\nunordered lists must use * bullets with two preceding spaces;\ndo not hard wrap lines;\nuse emphasis (*) and bold (**) sparingly;\nalways use fenced code blocks instead of indented blocks;\nfollow the conventions outlined in the Julia documentation page on documentation.","category":"page"},{"location":"contributing/#Changelog","page":"Contributing","title":"Changelog","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"All pull requests that make user visible changes should have a changelog entry formatted according to the Keep a Changelog style","category":"page"},{"location":"contributing/#Tests","page":"Contributing","title":"Tests","text":"","category":"section"},{"location":"contributing/#Unit-tests","page":"Contributing","title":"Unit tests","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"As is conventional for Julia packages, unit tests are located at test/*.jl with the entrypoint test/runtests.jl.","category":"page"},{"location":"contributing/#End-to-end-testing","page":"Contributing","title":"End to end testing","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Tests that build example package docs from source and inspect the results (end to end tests) are located in /test/examples. The main entry points are test/examples/make.jl for building and  test/examples/test.jl for doing some basic checks on the generated outputs.","category":"page"},{"location":"lib/internals/writers/","page":"Writers","title":"Writers","text":"CollapsedDocStrings = true","category":"page"},{"location":"lib/internals/writers/#Writers","page":"Writers","title":"Writers","text":"","category":"section"},{"location":"lib/internals/writers/","page":"Writers","title":"Writers","text":"Modules = [\n    Documenter,\n    Documenter.HTMLWriter,\n    Documenter.HTMLWriter.RD,\n    Documenter.LaTeXWriter,\n]\nFilter = t -> t !== asset\nPages = [\"writers.jl\", \"html/HTMLWriter.jl\", \"html/RD.jl\", \"html/write_inventory.jl\", \"latex/LaTeXWriter.jl\"]","category":"page"},{"location":"lib/internals/writers/#Documenter.render-Tuple{Documenter.Document}","page":"Writers","title":"Documenter.render","text":"Writes a Documenter.Document object to .user.build directory in the formats specified in the .user.format vector.\n\nAdding additional formats requires adding new Selector definitions as follows:\n\nabstract type CustomFormat <: FormatSelector end\n\nSelectors.order(::Type{CustomFormat}) = 4.0 # or a higher number.\nSelectors.matcher(::Type{CustomFormat}, fmt, _) = fmt === :custom\nSelectors.runner(::Type{CustomFormat}, _, doc) = CustomWriter.render(doc)\n\n# Definition of `CustomWriter` module below...\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/writers/#Documenter.HTMLWriter","page":"Writers","title":"Documenter.HTMLWriter","text":"A module for rendering Document objects to HTML.\n\nKeywords\n\nHTMLWriter uses the following additional keyword arguments that can be passed to Documenter.makedocs: authors, pages, sitename, version. The behavior of HTMLWriter can be further customized by setting the format keyword of Documenter.makedocs to a HTML, which accepts the following keyword arguments: analytics, assets, canonical, disable_git, edit_link, prettyurls, collapselevel, sidebar_sitename, highlights, mathengine and footer.\n\nsitename is the site's title displayed in the title bar and at the top of the *navigation menu. It is also written into the inventory (see below). This argument is mandatory for HTMLWriter.\n\npages defines the hierarchy of the navigation menu.\n\nExperimental keywords\n\nversion specifies the version string of the current version which will be the selected option in the version selector. If this is left empty (default) the version selector will be hidden. The special value git-commit sets the value in the output to git:{commit}, where {commit} is the first few characters of the current commit hash.\n\nHTML Plugin options\n\nThe HTML object provides additional customization options for the HTMLWriter. For more information, see the HTML documentation.\n\nPage outline\n\nThe HTMLWriter makes use of the page outline that is determined by the headings. It is assumed that if the very first block of a page is a level 1 heading, then it is intended as the page title. This has two consequences:\n\nIt is then used to automatically determine the page title in the navigation menu and in the <title> tag, unless specified in the .pages option.\nIf the first heading is interpreted as being the page title, it is not displayed in the navigation sidebar.\n\nInventory\n\nThe HTMLWriter automatically generates an objects.inv \"inventory\" file in the output build folder. This file contains a list of all pages, headers and docstrings in the documentation, and a relative URL that can be used to link to those items from an external source.\n\nOther projects that build their documentation with Documenter can use the DocumenterInterLinks plugin to link to any other project with an inventory file, see External Cross-References.\n\nThe format of the objects.inv file is borrowed from the Sphinx project. It consists of a plain text header that includes the project name, taken from the sitename argument to Documenter.makedocs, and a project version taken from the inventory_version argument of the HTML options, or automatically determined by deploydocs for tagged releases. The bulk of the file is a list of plain text records, compressed with gzip. See Inventory Generation for details on these records.\n\n\n\n\n\n","category":"module"},{"location":"lib/internals/writers/#Documenter.HTMLWriter.ASSETS","page":"Writers","title":"Documenter.HTMLWriter.ASSETS","text":"The root directory of the HTML assets.\n\n\n\n\n\n","category":"constant"},{"location":"lib/internals/writers/#Documenter.HTMLWriter.ASSETS_SASS","page":"Writers","title":"Documenter.HTMLWriter.ASSETS_SASS","text":"The directory where all the Sass/SCSS files needed for theme building are.\n\n\n\n\n\n","category":"constant"},{"location":"lib/internals/writers/#Documenter.HTMLWriter.ASSETS_THEMES","page":"Writers","title":"Documenter.HTMLWriter.ASSETS_THEMES","text":"Directory for the compiled CSS files of the themes.\n\n\n\n\n\n","category":"constant"},{"location":"lib/internals/writers/#Documenter.HTMLWriter.OUTDATED_VERSION_ATTR","page":"Writers","title":"Documenter.HTMLWriter.OUTDATED_VERSION_ATTR","text":"Data attribute for the script inserting a warning for outdated docs.\n\n\n\n\n\n","category":"constant"},{"location":"lib/internals/writers/#Documenter.HTMLWriter.THEMES","page":"Writers","title":"Documenter.HTMLWriter.THEMES","text":"List of Documenter native themes.\n\n\n\n\n\n","category":"constant"},{"location":"lib/internals/writers/#Documenter.HTMLWriter.HTML","page":"Writers","title":"Documenter.HTMLWriter.HTML","text":"HTML(kwargs...)\n\nSets the behavior of HTMLWriter.\n\nKeyword arguments\n\nprettyurls (default true) – allows toggling the pretty URLs feature.\n\nBy default (i.e., when prettyurls is set to true), Documenter creates a directory structure that hides the .html suffixes from the URLs (e.g., by default src/foo.md becomes src/foo/index.html, but can be accessed via src/foo/ in the browser). This structure is preferred when publishing the generated HTML files as a website (e.g., on GitHub Pages), which is Documenter's primary use case. However, when building locally, viewing the resulting pages requires a running webserver. It is recommended to use the LiveServer package for this.\n\nIf prettyurls = false, then Documenter generates src/foo.html instead.\n\ndisable_git can be used to disable calls to git when the document is not in a Git-controlled repository. Without setting this to true, Documenter will throw an error and exit if any of the Git commands fail. The calls to Git are mainly used to gather information about the current commit hash and file paths, necessary for constructing the links to the remote repository.\n\nedit_link can be used to specify which branch, tag or commit (when passed a String) in the remote repository the edit buttons point to. If a special Symbol value :commit is passed, the current commit will be used instead. If set to nothing, the link edit link will be hidden altogether. By default, Documenter tries to determine it automatically by looking at the origin remote, and falls back to \"master\" if that fails.\n\nrepolink can be used to override the URL of the Git repository link in the top navbar (if passed a String). By default, Documenter attempts to determine the link from the Git remote of the repository (e.g. specified via the remotes argument of makedocs). Passing a nothing disables the repository link.\n\ncanonical specifies the canonical URL for your documentation. We recommend you set this to the base url of your stable documentation, e.g. https://documenter.juliadocs.org/stable. This allows search engines to know which version to send their users to. See wikipedia for more information. Default is nothing, in which case no canonical link is set.\n\nassets can be used to include additional assets (JS, CSS, ICO etc. files). See below for more information.\n\nanalytics can be used specify the Google Analytics tracking ID.\n\ncollapselevel controls the navigation level visible in the sidebar. Defaults to 2. To show fewer levels by default, set collapselevel = 1.\n\nsidebar_sitename determines whether the site name is shown in the sidebar or not. Setting it to false can be useful when the logo already contains the name of the package. Defaults to true.\n\nhighlights can be used to add highlighting for additional languages. By default, Documenter already highlights all the \"Common\" highlight.js languages and Julia (julia, julia-repl). Additional languages must be specified by their filenames as they appear on CDNJS for the highlight.js version Documenter is using. E.g. to include highlighting for YAML and LLVM IR, you would set highlights = [\"llvm\", \"yaml\"]. Note that no verification is done whether the provided language names are sane.\n\nmathengine specifies which LaTeX rendering engine will be used to render the math blocks. The options are either KaTeX (default), MathJax v2, or MathJax v3, enabled by passing an instance of KaTeX, MathJax2, or MathJax3 objects, respectively. The rendering engine can further be customized by passing options to the KaTeX or MathJax2/MathJax3 constructors.\n\ndescription is the site-wide description that displays in page previews and search engines. Defaults to \"Documentation for $sitename\", where sitename is defined as an argument to makedocs.\n\nfooter can be a valid single-line markdown String or nothing and is displayed below the page navigation. Defaults to \"Powered by [Documenter.jl](https://github.com/JuliaDocs/Documenter.jl) and the [Julia Programming Language](https://julialang.org/).\".\n\nansicolor can be used to globally disable colored output from @repl and @example blocks by setting it to false (default: true).\n\nlang specifies the lang attribute of the top-level <html> element, declaring the language of the generated pages. The default value is \"en\".\n\nwarn_outdated inserts a warning if the current page is not the newest version of the documentation.\n\nexample_size_threshold specifies the size threshold above which the @example and other block outputs get written to files, rather than being included in the HTML page. This mechanism is present to reduce the size of the generated HTML files that contain a lot of figures etc. Setting it to nothing will disable writing to files, and setting to 0 means that all examples will be written to files. Defaults to 8 KiB.\n\nsize_threshold sets the maximum allowed HTML file size (in bytes) that Documenter is allowed to generate for a page. If the generated HTML file is larged than this, Documenter will throw an error and the build will fail. If set to nothing, the file sizes are not checked. Defaults to 200 KiB (but increases of this default value will be considered to be non-breaking).\n\nsize_threshold_warn: like size_threshold, but going over this limit will only cause Documenter to print a warning, instead of throwing an error. Defaults to 100 KiB, and must be less than or equal to size_threshold.\n\nsize_threshold_ignore can be passed a list of pages for which the size thresholds are completely ignored (silently). The arguments should be the same file paths as for the pages argument of makedocs. Using this argument to ignore a few specific pages is preferred over setting a high general limit, or disabling the size checking altogether.\n\nnote: Purpose of HTML size thresholds\nThe size threshold, with a reasonable default, exists so that users would not deploy huge pages accidentally (which among other this will result in bad UX for the readers and negatively impacts SEO). It is relatively easy to have e.g. an @example produce a lot of output.\n\nExperimental options\n\nprerender a boolean (true or false (default)) for enabling prerendering/build time application of syntax highlighting of code blocks. Requires a node (NodeJS) executable to be available in PATH or to be passed as the node keyword.\n\nnode path to a node (NodeJS) executable used for prerendering.\n\nhighlightjs file path to custom highglight.js library to be used with prerendering.\n\ninventory_version a version string to write to the header of the objects.inv inventory file. This should be a valid version number without a v prefix. Defaults to the version defined in the Project.toml file in the parent folder of the documentation root. Setting this to an empty string leaves the version in the inventory unspecified until deploydocs runs and automatically sets the version for any tagged release.\n\nDefault and custom assets\n\nDocumenter copies all files under the source directory (e.g. /docs/src/) over to the compiled site. It also copies a set of default assets from /assets/html/ to the site's assets/ directory, unless the user already had a file with the same name, in which case the user's files overrides the Documenter's file. This could, in principle, be used for customizing the site's style and scripting.\n\nThe HTML output also links certain custom assets to the generated HTML documents, specifically a logo, a preview image, and additional javascript files. The asset files that should be linked must be placed in assets/, under the source directory (e.g /docs/src/assets) and must be on the top level (i.e. files in the subdirectories of assets/ are not linked).\n\nFor the logo, Documenter checks for the existence of assets/logo.{svg,png,webp,gif,jpg,jpeg}, in this order. The first one it finds gets displayed at the top of the navigation sidebar. It will also check for assets/logo-dark.{svg,png,webp,gif,jpg,jpeg} and use that for dark themes.\n\nSimilarly, for the preview image, Documenter checks for the existence of assets/preview.{png,webp,gif,jpg,jpeg} in order. Assuming that canonical has been set, the canonical URL for the image gets constructed, , and a set of HTML <meta> tags are generated for the image, ensuring that the image shows up in link previews. The preview image will not be shown if canonical is not set.\n\nAdditional JS, ICO, and CSS assets can be included in the generated pages by passing them as a list with the assets keyword. Each asset will be included in the <head> of every page in the order in which they are given. The type of the asset (i.e. whether it is going to be included with a <script> or a <link> tag) is determined by the file's extension – either .js, .ico[1], or .css (unless overridden with asset).\n\nSimple strings are assumed to be local assets and that each correspond to a file relative to the documentation source directory (conventionally src/). Non-local assets, identified by their absolute URLs, can be included with the asset function.\n\n[1]: Adding an ICO asset is primarily useful for setting a custom favicon.\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/writers/#Documenter.HTMLWriter.HTMLContext","page":"Writers","title":"Documenter.HTMLWriter.HTMLContext","text":"HTMLWriter-specific globals that are passed to domify and other recursive functions.\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/writers/#Documenter.HTMLWriter.KaTeX","page":"Writers","title":"Documenter.HTMLWriter.KaTeX","text":"KaTeX(config::Dict = <default>, override = false)\n\nAn instance of the KaTeX type can be passed to HTML via the mathengine keyword to specify that the KaTeX rendering engine should be used in the HTML output to render mathematical expressions.\n\nA dictionary can be passed via the config argument to configure KaTeX. It becomes the options argument of renderMathInElement. By default, Documenter only sets a custom delimiters option.\n\nBy default, the user-provided dictionary gets merged with the default dictionary (i.e. the resulting configuration dictionary will contain the values from both dictionaries, but e.g. setting your own delimiters value will override the default). This can be overridden by setting override to true, in which case the default values are ignored and only the user-provided dictionary is used.\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/writers/#Documenter.HTMLWriter.MathJax2","page":"Writers","title":"Documenter.HTMLWriter.MathJax2","text":"MathJax2(config::Dict = <default>, override = false)\n\nAn instance of the MathJax2 type can be passed to HTML via the mathengine keyword to specify that the MathJax v2 rendering engine should be used in the HTML output to render mathematical expressions.\n\nA dictionary can be passed via the config argument to configure MathJax. It gets passed to the MathJax.Hub.Config function. By default, Documenter sets custom configurations for tex2jax, config, jax, extensions and Tex.\n\nBy default, the user-provided dictionary gets merged with the default dictionary (i.e. the resulting configuration dictionary will contain the values from both dictionaries, but e.g. setting your own tex2jax value will override the default). This can be overridden by setting override to true, in which case the default values are ignored and only the user-provided dictionary is used.\n\nThe URL of the MathJax JS file can be overridden using the url keyword argument (e.g. to use a particular minor version).\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/writers/#Documenter.HTMLWriter.MathJax3","page":"Writers","title":"Documenter.HTMLWriter.MathJax3","text":"MathJax3(config::Dict = <default>, override = false)\n\nAn instance of the MathJax3 type can be passed to HTML via the mathengine keyword to specify that the MathJax v3 rendering engine should be used in the HTML output to render mathematical expressions.\n\nA dictionary can be passed via the config argument to configure MathJax. It gets passed to Window.MathJax function. By default, Documenter specifies in the key tex that $...$ and \\(...\\) denote inline math, that AMS style tags should be used and the base, ams and autoload packages should be imported. The key options, by default, specifies which HTML classes to ignore and which to process using MathJax.\n\nBy default, the user-provided dictionary gets merged with the default dictionary (i.e. the resulting configuration dictionary will contain the values from both dictionaries, but e.g. setting your own tex value will override the default). This can be overridden by setting override to true, in which case the default values are ignored and only the user-provided dictionary is used.\n\nThe URL of the MathJax JS file can be overridden using the url keyword argument (e.g. to use a particular minor version).\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/writers/#Documenter.HTMLWriter.MathJax","page":"Writers","title":"Documenter.HTMLWriter.MathJax","text":"deprecated – Use MathJax2 instead\n\n\n\n\n\n","category":"function"},{"location":"lib/internals/writers/#Documenter.HTMLWriter.canonical_url-Tuple{Any, Any}","page":"Writers","title":"Documenter.HTMLWriter.canonical_url","text":"If canonical for HTML is set, returns the canonical URL of a path or Documenter.NavNode, otherwise returns nothing.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/writers/#Documenter.HTMLWriter.collect_subsections-Tuple{MarkdownAST.Node}","page":"Writers","title":"Documenter.HTMLWriter.collect_subsections","text":"Returns an ordered list of tuples, (toplevel, anchor, text), corresponding to level 1 and 2 headings on the page. Note that if the first header on the page is a level 1 header then it is not included – it is assumed to be the page title and so does not need to be included in the navigation menu twice.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/writers/#Documenter.HTMLWriter.copy_asset-Tuple{Any, Any}","page":"Writers","title":"Documenter.HTMLWriter.copy_asset","text":"Copies an asset from Documenters assets/html/ directory to doc.user.build. Returns the path of the copied asset relative to .build.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/writers/#Documenter.HTMLWriter.dataslug-Tuple{Union{AbstractString, Vector{UInt8}}}","page":"Writers","title":"Documenter.HTMLWriter.dataslug","text":"Returns the first limit characters of the hex SHA1 of the data bytes.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/writers/#Documenter.HTMLWriter.edit_link-Tuple{Any, Any, Any}","page":"Writers","title":"Documenter.HTMLWriter.edit_link","text":"Calls f(logo, title, url) if it is possible to create an edit link for the navnode.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/writers/#Documenter.HTMLWriter.format_units-Tuple{Any}","page":"Writers","title":"Documenter.HTMLWriter.format_units","text":"Calculates and converts bytes to appropriate format.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/writers/#Documenter.HTMLWriter.get_url-Tuple{Any, AbstractString}","page":"Writers","title":"Documenter.HTMLWriter.get_url","text":"Returns the full path corresponding to a path of a .md page file. The the input and output paths are assumed to be relative to src/.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/writers/#Documenter.HTMLWriter.get_url-Tuple{Any, Documenter.NavNode}","page":"Writers","title":"Documenter.HTMLWriter.get_url","text":"Returns the full path of a Documenter.NavNode relative to src/.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/writers/#Documenter.HTMLWriter.getpage-Tuple{Documenter.HTMLWriter.HTMLContext, Any}","page":"Writers","title":"Documenter.HTMLWriter.getpage","text":"Returns a page (as a Documenter.Page object) using the HTMLContext.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/writers/#Documenter.HTMLWriter.navhref-Tuple{Any, Any, Any}","page":"Writers","title":"Documenter.HTMLWriter.navhref","text":"Get the relative hyperlink between two Documenter.NavNodes. Assumes that both Documenter.NavNodes have an associated Documenter.Page (i.e. .page is not nothing).\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/writers/#Documenter.HTMLWriter.navitem-Tuple{Any}","page":"Writers","title":"Documenter.HTMLWriter.navitem","text":"navitem returns the lists and list items of the navigation menu. It gets called recursively to construct the whole tree.\n\nIt always returns a DOM.Node. If there's nothing to display (e.g. the node is set to be invisible), it returns an empty text node (DOM.Node(\"\")).\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/writers/#Documenter.HTMLWriter.pagetitle-Tuple{MarkdownAST.Node}","page":"Writers","title":"Documenter.HTMLWriter.pagetitle","text":"Tries to guess the page title by looking at the <h1> headers and returns the header contents of the first <h1> on a page (or nothing if the algorithm was unable to find any <h1> headers).\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/writers/#Documenter.HTMLWriter.pretty_url-Tuple{Any, AbstractString}","page":"Writers","title":"Documenter.HTMLWriter.pretty_url","text":"If prettyurls for HTML is enabled, returns a \"pretty\" version of the path which can then be used in links in the resulting HTML file.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/writers/#Documenter.HTMLWriter.relhref-Tuple{Any, Any}","page":"Writers","title":"Documenter.HTMLWriter.relhref","text":"Calculates a relative HTML link from one path to another.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/writers/#Documenter.HTMLWriter.render_html-NTuple{7, Any}","page":"Writers","title":"Documenter.HTMLWriter.render_html","text":"Renders the main <html> tag.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/writers/#Documenter.HTMLWriter.render_page-Tuple{Any, Any}","page":"Writers","title":"Documenter.HTMLWriter.render_page","text":"Constructs and writes the page referred to by the navnode to .build.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/writers/#Documenter.HTMLWriter.render_settings-Tuple{}","page":"Writers","title":"Documenter.HTMLWriter.render_settings","text":"Renders the modal settings dialog.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/writers/#Documenter.HTMLWriter.write_data_file-Tuple{Documenter.HTMLWriter.DCtx, Union{AbstractString, Vector{UInt8}}}","page":"Writers","title":"Documenter.HTMLWriter.write_data_file","text":"Generates a unique file for the output of an at-example block if it goes over the configured size threshold, and returns the filename (that should be in the same directory are the corresponding HTML file). If the data is under the threshold, no file is created, and the function returns nothing.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/writers/#Documenter.HTMLWriter.write_html-Tuple{Documenter.HTMLWriter.HTMLContext, Documenter.NavNode, Documenter.DOM.HTMLDocument}","page":"Writers","title":"Documenter.HTMLWriter.write_html","text":"Writes the HTML DOM into the HTML file that corresponds to navnode. Prints a warning/error if the page goes over the size_threshold or size_threshold_warn limits, and in the former case also returns false, to report back to the caller that the size threshold check failed.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/writers/#Documenter.HTMLWriter.write_inventory-Tuple{Any, Any}","page":"Writers","title":"Documenter.HTMLWriter.write_inventory","text":"Generate the objects.inv inventory file.\n\nWrite the file objects.inv to the root of the HTML build folder, containing an inventory of all linkable targets in the documentation (pages, headings, and docstrings).\n\nThe objects.inv file is compatible with Sphinx See DocInventories for a description. The file can be used by Intersphinx and the DocumenterInterLinks plugin to link into the documentation from other projects.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/writers/#Documenter.HTMLWriter.RD","page":"Writers","title":"Documenter.HTMLWriter.RD","text":"Provides a namespace for remote dependencies.\n\n\n\n\n\n","category":"module"},{"location":"lib/internals/writers/#Documenter.HTMLWriter.RD.highlightjs!","page":"Writers","title":"Documenter.HTMLWriter.RD.highlightjs!","text":"Add the highlight.js dependencies and snippet to a RequireJS declaration.\n\n\n\n\n\n","category":"function"},{"location":"lib/internals/writers/#Documenter.LaTeXWriter","page":"Writers","title":"Documenter.LaTeXWriter","text":"A module for rendering Document objects to LaTeX and PDF.\n\nKeywords\n\nLaTeXWriter uses the following additional keyword arguments that can be passed to makedocs: authors, sitename.\n\nsitename is the site's title displayed in the title bar and at the top of the navigation menu. It goes into the \\title LaTeX command.\n\nauthors can be used to specify the authors of. It goes into the \\author LaTeX command.\n\n\n\n\n\n","category":"module"},{"location":"lib/internals/writers/#Documenter.LaTeXWriter.LaTeX","page":"Writers","title":"Documenter.LaTeXWriter.LaTeX","text":"Documenter.LaTeX(; kwargs...)\n\nOutput format specifier that results in LaTeX/PDF output. Used together with makedocs, e.g.\n\nmakedocs(\n    format = Documenter.LaTeX()\n)\n\nThe makedocs argument sitename will be used for the \\title field in the tex document. The authors argument should also be specified and will be used for the \\authors field in the tex document. Finally, a version number can be specified with the version option to LaTeX, which will be printed in the document and also appended to the output PDF file name.\n\nKeyword arguments\n\nplatform sets the platform where the tex-file is compiled, either \"native\" (default), \"tectonic\", \"docker\", or \"none\" which doesn't compile the tex. The option tectonic requires a tectonic executable to be available in PATH or to be passed as the tectonic keyword.\n\nversion specifies the version number that gets printed on the title page of the manual. It defaults to the value in the TRAVIS_TAG environment variable (although this behaviour is considered to be deprecated), or to an empty string if TRAVIS_TAG is unset.\n\ntectonic path to a tectonic executable used for compilation.\n\nSee Other Output Formats for more information.\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/writers/","page":"Writers","title":"Writers","text":"Documenter.Plugin","category":"page"},{"location":"lib/internals/writers/#Documenter.Plugin","page":"Writers","title":"Documenter.Plugin","text":"abstract type Plugin end\n\nAny plugin that needs to either solicit user input or store information in a Document should create a subtype of Plugin, i.e., T <: DocumenterPlugin.\n\nInitialized objects of type T can be elements of the list of plugins passed as a keyword argument to makedocs.\n\nA plugin may retrieve the existing object holding its state via the Documenter.getplugin function. Alternatively, getplugin can also instantiate T() on demand, if there is no existing object. This requires that T implements an empty constructor T().\n\n\n\n\n\n","category":"type"},{"location":"man/guide/#Package-Guide","page":"Guide","title":"Package Guide","text":"","category":"section"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"Documenter is designed to do one thing – combine markdown files and inline docstrings from Julia's docsystem into a single inter-linked document. What follows is a step-by-step guide to creating a simple document.","category":"page"},{"location":"man/guide/#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"Documenter can be installed using the Julia package manager. From the Julia REPL, type ] to enter the Pkg REPL mode and run","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"pkg> add Documenter","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"For package documentation, the standard approach is to install Documenter into a documentation-specific project stored in the docs/ subdirectory of your package. To do this, navigate to your package's root folder and do","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"pkg> activate docs/\n\n(docs) pkg> add Documenter","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"This will create Project.toml and Manifest.toml files in the docs/ subdirectory. ","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"Note that for packages, you also likely need to have your package that you are documenting as a  \"dev dependency\" of the docs/ environment.","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"See also the Pkg.jl documentation on working with project environments.","category":"page"},{"location":"man/guide/#Setting-up-the-Folder-Structure","page":"Guide","title":"Setting up the Folder Structure","text":"","category":"section"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"note: Note\nThe function DocumenterTools.generate from the DocumenterTools package can generate the basic structure that Documenter expects.","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"Firstly, we need a Julia module to document. This could be a package generated via PkgDev.generate or a single .jl script accessible via Julia's LOAD_PATH. For this guide we'll be using a package called Example.jl that has the following directory layout:","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"Example/\n├── src/\n│   └── Example.jl\n...","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"Note that the ... just represent unimportant files and folders.","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"We must decide on a location where we'd like to store the documentation for this package. It's recommended to use a folder named docs/ in the toplevel of the package, like so","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"Example/\n├── docs/\n│   └── ...\n├── src/\n│   └── Example.jl\n...","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"Inside the docs/ folder we need to add two things. A source folder which will contain the markdown files that will be used to build the finished document and a Julia script that will be used to control the build process. The following names are recommended","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"docs/\n├── src/\n└── make.jl","category":"page"},{"location":"man/guide/#Building-an-Empty-Document","page":"Guide","title":"Building an Empty Document","text":"","category":"section"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"With our docs/ directory now setup we're going to build our first document. It'll just be a single empty file at the moment, but we'll be adding to it later on.","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"Add the following to your make.jl file","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"using Documenter, Example\n\nmakedocs(sitename=\"My Documentation\")","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"This assumes you've installed Documenter as discussed in Installation and that your Example.jl package can be found by Julia. If your package has been added as a dev dependency using its local path rather than a remote git repository, you need to add the keyword argument remotes = nothing to the function makedocs.","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"note: Note\nIf your source directory is not accessible through Julia's LOAD_PATH, you might wish to add the following line at the top of make.jlpush!(LOAD_PATH,\"../src/\")","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"Now add an index.md file to the src/ directory.","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"note: Note\nIf you use Documenter's default HTML output the name index.md is mandatory. This file will be the main page of the rendered HTML documentation.","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"Leave the newly added file empty and then run the following command from the docs/ directory","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"$ julia --project make.jl","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"Note that $ just represents the prompt character. You don't need to type that.","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"If you'd like to see the output from this command in color use","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"$ julia --color=yes --project make.jl","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"When you run that you should see the following output","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"[ Info: SetupBuildDirectory: setting up build directory.\n[ Info: Doctest: running doctests.\n[ Info: ExpandTemplates: expanding markdown templates.\n[ Info: CrossReferences: building cross-references.\n[ Info: CheckDocument: running document checks.\n[ Info: Populate: populating indices.\n[ Info: RenderDocument: rendering document.\n[ Info: HTMLWriter: rendering HTML pages.","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"The docs/ folder should contain a new directory – called build/. Its structure should look like the following","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"build/\n├── assets\n│   ├── documenter.js\n│   ├── themes\n│   │   ├── documenter-dark.css\n│   │   └── documenter-light.css\n│   ├── themeswap.js\n│   └── warner.js\n├── index.html\n├── search\n│   └── index.html\n└── search_index.js","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"note: Note\nBy default, Documenter has pretty URLs enabled, which means that src/foo.md is turned into src/foo/index.html, instead of simply src/foo.html, which is the preferred way when creating a set of HTML to be hosted on a web server.However, this can be a hindrance when browsing the documentation locally as browsers do not resolve directory URLs like foo/ to foo/index.html for local files. To view the documentation locally, it is recommended that you run a local web server out of the docs/build directory. One way to accomplish this is to install the LiveServer Julia package. You can then start the server with julia -e 'using LiveServer; serve(dir=\"docs/build\")'. Alternatively, if you have Python installed, you can start one with python3 -m http.server --bind localhost.","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"warning: Warning\nYou may see setups usingmakedocs(...,\n    format = Documenter.HTML(\n        prettyurls = get(ENV, \"CI\", nothing) == \"true\"\n    )\n)The intent behind this is to use prettyurls=false when building the documentation locally, for easy browsing, and prettyurls=true when deploying the documentation online from GitHub Actions.However, this is not recommended. For example, if a @raw block references a local image, the correct relative path of that image would depend on the prettyurls setting (#921). Consequently, the documentation might build correctly locally and be broken on Github Actions, or vice versa. It is recommended to always use prettyurls=true and run a local web server to view the documentation.","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"warning: Warning\nNever git commit the contents of build (or any other content generated by Documenter) to your repository's master branch. Always commit generated files to the gh-pages branch of your repository. This helps to avoid including unnecessary changes for anyone reviewing commits that happen to include documentation changes.See the Hosting Documentation section for details regarding how you should go about setting this up correctly.","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"At this point build/index.html should be an empty page since src/index.md is empty. You can try adding some text to src/index.md and re-running the make.jl file to see the changes.","category":"page"},{"location":"man/guide/#Adding-Some-Docstrings","page":"Guide","title":"Adding Some Docstrings","text":"","category":"section"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"Next we'll splice a docstring defined in the Example module into the index.md file. To do this first document a function in that module:","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"module Example\n\nexport func\n\n\"\"\"\n    func(x)\n\nReturn double the number `x` plus `1`.\n\"\"\"\nfunc(x) = 2x + 1\n\nend","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"Then in the src/index.md file add the following","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"# Example.jl Documentation\n\n```@docs\nfunc(x)\n```","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"When we next run make.jl the docstring for Example.func(x) should appear in place of the @docs block in build/index.md. Note that more than one object can be referenced inside a @docs block – just place each one on a separate line.","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"Note that a @docs block is evaluated in the Main module. This means that each object listed in the block must be visible there. The module can be changed to something else on a per-page basis with a @meta block as in the following","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"# Example.jl Documentation\n\n```@meta\nCurrentModule = Example\n```\n\n```@docs\nfunc(x)\n```","category":"page"},{"location":"man/guide/#Filtering-included-docstrings","page":"Guide","title":"Filtering included docstrings","text":"","category":"section"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"In some cases you may want to include a docstring for a Method that extends a Function from a different module – such as Base. In the following example we extend Base.length with a new definition for the struct T and also add a docstring:","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"struct T\n    # ...\nend\n\n\"\"\"\nCustom `length` docs for `T`.\n\"\"\"\nBase.length(::T) = 1","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"When trying to include this docstring with","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"```@docs\nlength\n```","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"all the docs for length will be included – even those from other modules. There are two ways to solve this problem. Either include the type in the signature with","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"```@docs\nlength(::T)\n```","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"or declare the specific modules that makedocs should include with","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"makedocs(\n    # options\n    modules = [MyModule]\n)","category":"page"},{"location":"man/guide/#Cross-Referencing","page":"Guide","title":"Cross Referencing","text":"","category":"section"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"It may be necessary to refer to a particular docstring or section of your document from elsewhere in the document. To do this we can make use of Documenter's cross-referencing syntax which looks pretty similar to normal markdown link syntax. Replace the contents of src/index.md with the following","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"# Example.jl Documentation\n\n```@docs\nfunc(x)\n```\n\n- link to [Example.jl Documentation](@ref)\n- link to [`func(x)`](@ref)","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"So we just have to replace each link's url with @ref and write the name of the thing we'd link to cross-reference. For document headers it's just plain text that matches the name of the header and for docstrings enclose the object in backticks.","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"This also works across different pages in the same way. Note that these sections and docstrings must be unique within a document.","category":"page"},{"location":"man/guide/#External-Cross-References","page":"Guide","title":"External Cross-References","text":"","category":"section"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"Any project building its documentation with the most recent release of Documenter will generate an objects.inv inventory that can be found in the root of the deployed documentation. The DocumenterInterLinks plugin allows to define a mapping in your make.jl file between an external project name and its inventory file, e.g.,","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"using DocumenterInterLinks\n\nlinks = InterLinks(\n    \"Documenter\" => \"https://documenter.juliadocs.org/stable/objects.inv\"\n)","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"That InterLinks object should then be passed to makedocs as an element of plugins. This enables the ability to cross-reference into the external documentation, e.g.,  of the Documenter package, using an @extref link with a syntax similar to the above @ref, e.g.,","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"See the [`Documenter.makedocs`](@extref) function.","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"See the documentation of the DocumenterInterLinks package for more details.","category":"page"},{"location":"man/guide/#Navigation","page":"Guide","title":"Navigation","text":"","category":"section"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"Documenter can auto-generate tables of contents and docstring indexes for your document with the following syntax. We'll illustrate these features using our index.md file from the previous sections. Add the following to that file","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"# Example.jl Documentation\n\n```@contents\n```\n\n## Functions\n\n```@docs\nfunc(x)\n```\n\n## Index\n\n```@index\n```","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"The @contents block will generate a nested list of links to all the section headers in the document. By default it will gather all the level 1 and 2 headers from every page in the document, but this can be adjusted using Pages and Depth settings as in the following","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"```@contents\nPages = [\"foo.md\", \"bar.md\"]\nDepth = 3\n```","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"The @index block will generate a flat list of links to all the docs that that have been spliced into the document using @docs blocks. As with the @contents block the pages to be included can be set with a Pages = [...] line. Since the list is not nested Depth is not supported for @index.","category":"page"},{"location":"man/guide/#Pages-in-the-Sidebar","page":"Guide","title":"Pages in the Sidebar","text":"","category":"section"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"By default all the pages (.md files) in your source directory get added to the sidebar, sorted by their filenames. However, in most cases you want to use the pages argument to makedocs to control how the sidebar looks like. The basic usage is as follows:","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"makedocs(\n    ...,\n    pages = [\n        \"page.md\",\n        \"Page title\" => \"page2.md\",\n        \"Subsection\" => [\n            ...\n        ]\n    ]\n)","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"Using the pages argument you can organize your pages into subsections and hide some pages from the sidebar with the help of the hide functions.","category":"page"},{"location":"man/guide/#Adding-a-logo-or-icon","page":"Guide","title":"Adding a logo or icon","text":"","category":"section"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"You can easily add a logo or icon to your documentation which will be automatically displayed in the navigation sidebar.","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"During the build process, Documenter looks for suitable graphic images in the src/assets/ directory and automatically copies them to /build/assets/.","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"You can use SVG, PNG, WEBP, GIF, or JPEG images.","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"Documenter looks for files logo.svg, logo.png, logo.webp, logo.gif, logo.jpg, or logo.jpeg, in that order. The first suitable image found is used.","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"This image will be used for both light and dark themes. If you want to create a separate design for the dark theme, add a file called logo-dark.svg (or PNG/WEBP/GIF/JPEG).","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"Files don't need to be square. Images with transparent backgrounds can look better, particularly for dark themes.","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"There's a sidebar_sitename keyword option for Documenter.HTML that lets you hide the sitename that's usually displayed below a logo. This is useful if the logo already contains the name.","category":"page"},{"location":"lib/public/#Public-Documentation","page":"Public API","title":"Public Documentation","text":"","category":"section"},{"location":"lib/public/","page":"Public API","title":"Public API","text":"Documentation for Documenter.jl's public interface.","category":"page"},{"location":"lib/public/","page":"Public API","title":"Public API","text":"See the Internals section of the manual for internal package docs covering all submodules.","category":"page"},{"location":"lib/public/#Contents","page":"Public API","title":"Contents","text":"","category":"section"},{"location":"lib/public/","page":"Public API","title":"Public API","text":"Pages = [\"public.md\"]\nDepth = 2:2","category":"page"},{"location":"lib/public/#Index","page":"Public API","title":"Index","text":"","category":"section"},{"location":"lib/public/","page":"Public API","title":"Public API","text":"Pages = [\"public.md\"]","category":"page"},{"location":"lib/public/#Public-Interface","page":"Public API","title":"Public Interface","text":"","category":"section"},{"location":"lib/public/","page":"Public API","title":"Public API","text":"Documenter\nmakedocs\nDocumenter.except\nhide\nDocumenter.MissingRemoteError\nasset\ndeploydocs\ndoctest\nDocMeta\nDocMeta.getdocmeta\nDocMeta.setdocmeta!","category":"page"},{"location":"lib/public/#Documenter","page":"Public API","title":"Documenter","text":"Main module for Documenter.jl – a documentation generation package for Julia.\n\nTwo functions are exported from this module for public use:\n\nmakedocs. Generates documentation from docstrings and templated markdown files.\ndeploydocs. Deploys generated documentation from Travis-CI to GitHub Pages.\n\nExports\n\nDocMeta\nKaTeX\nMathJax\nMathJax2\nMathJax3\nRemotes\nasset\ndeploydocs\ndoctest\nhide\nmakedocs\n\n\n\n\n\n","category":"module"},{"location":"lib/public/#Documenter.makedocs","page":"Public API","title":"Documenter.makedocs","text":"makedocs(;\n    root    = \"<current-directory>\",\n    source  = \"src\",\n    build   = \"build\",\n    clean   = true,\n    doctest = true,\n    modules = Module[],\n    repo    = \"\",\n    highlightsig = true,\n    sitename = \"\",\n    expandfirst = [],\n    draft = false,\n    others...\n)\n\nCombines markdown files and inline docstrings into an interlinked document. In most cases makedocs should be run from a make.jl file:\n\nusing Documenter\nmakedocs(\n    # keywords...\n)\n\nwhich is then run from the command line with:\n\n$ julia make.jl\n\nThe folder structure that makedocs expects looks like:\n\ndocs/\n    build/\n    src/\n    make.jl\n\nKeywords\n\nroot is the directory from which makedocs should run. When run from a make.jl file this keyword does not need to be set. It is, for the most part, needed when repeatedly running makedocs from the Julia REPL like so:\n\njulia> makedocs(root = joinpath(dirname(pathof(MyModule)), \"..\", \"docs\"))\n\nsource is the directory, relative to root, where the markdown source files are read from. By convention this folder is called src. Note that any non-markdown files stored in source are copied over to the build directory when makedocs is run.\n\nbuild is the directory, relative to root, into which generated files and folders are written when makedocs is run. The name of the build directory is, by convention, called build, though, like with source, users are free to change this to anything else to better suit their project needs.\n\nclean tells makedocs whether to remove all the content from the build folder prior to generating new content from source. By default this is set to true.\n\ndoctest instructs makedocs on whether to try to test Julia code blocks that are encountered in the generated document. By default this keyword is set to true. Doctesting should only ever be disabled when initially setting up a newly developed package where the developer is just trying to get their package and documentation structure correct. After that, it's encouraged to always make sure that documentation examples are runnable and produce the expected results. See the Doctests manual section for details about running doctests.\n\nSetting doctest to :only allows for doctesting without a full build. In this mode, most build stages are skipped and the warnonly keyword is ignored (a doctesting error will always make makedocs throw an error in this mode).\n\nmodules specifies a vector of modules that should be documented in source. If any inline docstrings from those modules are seen to be missing from the generated content then a warning will be printed during execution of makedocs. By default no modules are passed to modules and so no warnings will appear. This setting can be used as an indicator of the \"coverage\" of the generated documentation. For example Documenter's make.jl file contains:\n\nmakedocs(\n    modules = [Documenter],\n    # ...\n)\n\nand so any docstring from the module Documenter that is not spliced into the generated documentation in build will raise a warning.\n\nrepo specifies the remote hosted Git repository (e.g. on github.com) related to the documentation build. It should be passed an object that subtypes and implements the Remotes.Remote interface (e.g. Remotes.GitHub). A template string can also be passed (interpreted according to the rules described in Remotes.URL), but the use of the template strings is discouraged, in favor of concrete Remotes.Remote objects.\n\nremotes can be used to declare a list additional path::AbstractString => remote pairs that are used to determine the remote repository URLs for local filesystem files, such as the edit links for manual Markdown pages, or docstring source links. path should be an absolute local filesystem path to a directory, and will be interpreted as the root of the remote repository specified with remote. remote would normally be Remote object, but can also be a (remote::Remote, commit::AbstractString) tuple, where the second argument specifies the commit within the repository. This is necessary when path is not pointing to a proper Git repository, and so determining the commit automatically is not possible.\n\nIf repo is not passed, makedocs will try to determine it automatically, either by inspecting the locally checked out Git repository, or via the remotes keyword. See the manual section on Remote repository links for more information on how the remote repository links are handled.\n\nIf remotes is set to nothing, all remote repository links (repository links, source links, edit links, issue links etc.) will be completely disabled. This can be useful when publicly deploying documentation for private packages.\n\nhighlightsig enables or disables automatic syntax highlighting of leading, unlabeled code blocks in docstrings (as Julia code). For example, if your docstring begins with an indented code block containing the function signature, then that block would be highlighted as if it were a labeled Julia code block. No other code blocks are affected. This feature is enabled by default.\n\nsitename is displayed in the title bar and/or the navigation menu when applicable.\n\npages can be used to specify a hierarchical page structure, and the order in which the pages appear in the navigation of the rendered output. If omitted, Documenter will automatically generate a flat list of pages based on the files present in the source directory.\n\npages = [\n    \"Overview\" => \"index.md\",\n    \"tutorial.md\",\n    \"Tutorial\" => [\n        \"tutorial/introduction.md\",\n        \"Advanced\" => \"tutorial/features.md\",\n    ],\n    \"apireference.md\",\n]\n\nThe pages keyword must be a list where each element must be one of the following:\n\nA string containing the full path of a Markdown file within the source directory (i.e. relative to the docs/src/ root in standard deployments).\nA \"Page title\" => \"path/to/page.md\" pair, where Page title overrides the page title in the navigation menu (but not on the page itself).\nA \"Subsection title\" => [...] pair, indicating a subsection of pages with the given title in the navigation menu. The list of pages for the subsection follow the same rules as the top-level pages keyword.\n\nSee also hide, which can be used to hide certain pages in the navigation menu.\n\nNote that, by default, regardless of what is specified in pages, Documenter will run and render all Markdown files it finds, even if they are not present in pages. The pagesonly keyword can be used to change this behaviour.\n\npagesonly can be set to true (default: false) to make Documenter process only the pages listed in with the pages keyword. In that case, the Markdown files not present in pages are ignored, i.e. code blocks do not run, docstrings do not get included, and the pages are not rendered in the output in any way.\n\nexpandfirst allows some of the pages to be expanded (i.e. at-blocks evaluated etc.) before the others. Documenter normally evaluates the files in the alphabetic order of their file paths relative to src, but expandfirst allows some pages to be prioritized.\n\nFor example, if you have foo.md and bar.md, bar.md would normally be evaluated before foo.md. But with expandfirst = [\"foo.md\"], you can force foo.md to be evaluated first.\n\nEvaluation order among the expandfirst pages is according to the order they appear in the argument.\n\ndraft can be set to true to build a draft version of the document. In draft mode some potentially time-consuming steps are skipped (e.g. running @example blocks), which is useful when iterating on the documentation. This setting can also be configured per-page by setting Draft = true in an @meta block.\n\ncheckdocs instructs makedocs to check whether all names within the modules defined in the modules keyword that have a docstring attached have the docstring also listed in the manual (e.g. there's a @docs block with that docstring). Possible values are :all (check all names; the default), :exports (check only exported names), :public (check exported names and those marked with the public keyword in Julia ≥ 1.11), and :none (no checks are performed).\n\nBy default, if the document check detect any errors, it will fail the documentation build. This behavior can be relaxed with the warnonly or checkdocs_ignored_modules keywords.\n\ncheckdocs_ignored_modules prevents checkdocs from checking modules supplied as a list of module objects. It will also cause all submodules of these module to be ignored. It can be useful for completely private modules including modules which have been vendored from elsewhere.\n\nNote that checkdocs_ignored_modules does not conversely verify that these docstrings are not included in the documentation.\n\nlinkcheck – if set to true makedocs uses curl to check the status codes of external-pointing links, to make sure that they are up-to-date. The links and their status codes are printed to the standard output. When enabled, any detected errors will fail the build, but this can be overridden by passing :linkcheck to warnonly. Default: false.\n\nlinkcheck_ignore allows certain URLs to be ignored in linkcheck. The values should be a list of strings (which get matched exactly) or Regex objects. By default nothing is ignored.\n\nlinkcheck_timeout configures how long curl waits (in seconds) for a link request to return a response before giving up. The default is 10 seconds.\n\nlinkcheck_useragent can be used to override the user agent string used by the HTTP and HTTPS requests made when checking for broken links. If set to nothing, it uses the default user agent string of the library/tool used to actually perform the requests (currently, the system's curl binary).\n\nIf unset, Documenter uses the following user agent string:\n\nMozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36\n\nThis is set to mimic a realistic web browser. However, the exact user agent string is subject to change. As such, it is possible that breakages can occur when Documenter's version changes, but the goal is to set the user agent such that it would be accepted by as many web servers as possible.\n\nwarnonly can be used to control whether the makedocs build fails with an error, or simply prints a warning if it detects any issues with the document. Additionally, a Symbol or a Vector of Symbols can be passed to make Documenter warn for only those specified error classes (see also: Documenter.except). If set to true, the build should never fail due to document checks. The keyword defaults to false.\n\nNote that setting warnonly = true in general is not recommended, since it will make it very easy to miss Documentation build issues, and will lead to the deployment of broken manuals. The only case where you may want to consider passing true is when you are automatically deploying the documentation for a package release. In that case, warnonly should be set dynamically by checking the relevant environment variables set by the CI system.\n\nworkdir determines the working directory where @example and @repl code blocks are executed. It can be either a path or the special value :build (default).\n\nIf the workdir is set to a path, the working directory is reset to that path for each code block being evaluated. Relative paths are taken to be relative to root, but using absolute paths is recommended (e.g. workdir = joinpath(@__DIR__, \"..\") for executing in the package root for the usual docs/make.jl setup).\n\nWith the default :build option, the working directory is set to a subdirectory of build, determined from the source file path. E.g. for src/foo.md it is set to build/, for src/foo/bar.md it is set to build/foo etc.\n\nNote that workdir does not affect doctests.\n\nplugins is a list of Documenter.Plugin objects. Use as directed by the documentation of a third-party plugin. For any subtype T <: Plugin, the plugins list may contain at most a single object of type T.\n\nOutput formats\n\nformat allows the output format to be specified. The default format is Documenter.HTML which creates a set of HTML files, but Documenter also provides PDF output via the Documenter.LaTeX writer.\n\nOther formats can be enabled by using other addon-packages. For example, the DocumenterMarkdown package provides the original Markdown -> Markdown output. See the Other Output Formats for more information.\n\nSee Also\n\nA guide detailing how to document a package using Documenter's makedocs is provided in the setup guide in the manual.\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#Documenter.except","page":"Public API","title":"Documenter.except","text":"Documenter.except(errors...)\n\nReturns the list of all valid error classes that can be passed as the warnonly argument of makedocs, except for the ones specified in the errors argument. Each error class must be a Symbol and passed as a separate argument.\n\nThis can be used to enable strict error checking for only the listed error classes, while having other error types simply print a warning. E.g. to make Documenter fail the build only for footnote and linkcheck errors, one can set warnonly as\n\nmakedocs(...,\n    warnonly = Documenter.except(:linkcheck, :footnote),\n)\n\nThe possible Symbol values that can be passed to the function are: :autodocs_block, :cross_references, :docs_block, :doctest, :eval_block, :example_block, :footnote, :linkcheck_remotes, :linkcheck, :meta_block, :missing_docs, :parse_error, and :setup_block.\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#Documenter.hide","page":"Public API","title":"Documenter.hide","text":"hide(page)\n\n\nAllows a page to be hidden in the navigation menu. It will only show up if it happens to be the current page. The hidden page will still be present in the linear page list that can be accessed via the previous and next page links. The title of the hidden page can be overridden using the => operator as usual.\n\nUsage\n\nmakedocs(\n    ...,\n    pages = [\n        ...,\n        hide(\"page1.md\"),\n        hide(\"Title\" => \"page2.md\")\n    ]\n)\n\n\n\n\n\nhide(root, children)\n\n\nAllows a subsection of pages to be hidden from the navigation menu. root will be linked to in the navigation menu, with the title determined as usual. children should be a list of pages (note that it can not be hierarchical).\n\nUsage\n\nmakedocs(\n    ...,\n    pages = [\n        ...,\n        hide(\"Hidden section\" => \"hidden_index.md\", [\n            \"hidden1.md\",\n            \"Hidden 2\" => \"hidden2.md\"\n        ]),\n        hide(\"hidden_index.md\", [...])\n    ]\n)\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#Documenter.MissingRemoteError","page":"Public API","title":"Documenter.MissingRemoteError","text":"struct MissingRemoteError <: Exception\n\nThis error is thrown by makedocs when it is unable to determine the remote repository link for a Markdown file or a docstring.\n\nSee the Remote repository links section in the manualfor more information.\n\n\n\n\n\n","category":"type"},{"location":"lib/public/#Documenter.HTMLWriter.asset","page":"Public API","title":"Documenter.HTMLWriter.asset","text":"asset(uri)\n\nCan be used to pass non-local web assets to HTML, where uri should be an absolute HTTP or HTTPS URL.\n\nIt accepts the following keyword arguments:\n\nclass can be used to override the asset class, which determines how exactly the asset gets included in the HTML page. This is necessary if the class can not be determined automatically (default).\n\nShould be one of: :js, :css or :ico. They become a <script>, <link rel=\"stylesheet\" type=\"text/css\"> and <link rel=\"icon\" type=\"image/x-icon\"> elements in <head>, respectively.\n\nislocal can be used to declare the asset to be local. The uri should then be a path relative to the documentation source directory (conventionally src/). This can be useful when it is necessary to override the asset class of a local asset.\n\nUsage\n\nDocumenter.HTML(assets = [\n    # Standard local asset\n    \"assets/extra_styles.css\",\n    # Standard remote asset (extension used to determine that class = :js)\n    asset(\"https://example.com/jslibrary.js\"),\n    # Setting asset class manually, since it can't be determined manually\n    asset(\"https://example.com/fonts\", class = :css),\n    # Same as above, but for a local asset\n    asset(\"asset/foo.script\", class=:js, islocal=true),\n])\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#Documenter.deploydocs","page":"Public API","title":"Documenter.deploydocs","text":"deploydocs(\n    root = \"<current-directory>\",\n    target = \"build\",\n    dirname = \"\",\n    repo = \"<required>\",\n    branch = \"gh-pages\",\n    deps = nothing | <Function>,\n    make = nothing | <Function>,\n    cname = nothing | <String>,\n    devbranch = nothing,\n    devurl = \"dev\",\n    versions = [\"stable\" => \"v^\", \"v#.#\", devurl => devurl],\n    forcepush = false,\n    deploy_config = auto_detect_deploy_system(),\n    push_preview = false,\n    repo_previews = repo,\n    branch_previews = branch,\n    tag_prefix = \"\",\n)\n\nCopies the files generated by makedocs in target to the appropriate (sub-)folder in dirname on the deployment branch, commits them, and pushes to repo.\n\nThis function should be called from within a package's docs/make.jl file after the call to makedocs, like so\n\nusing Documenter, PACKAGE_NAME\nmakedocs(\n    # options...\n)\ndeploydocs(\n    repo = \"github.com/...\"\n)\n\nWhen building the docs for a tag (i.e. a release) the documentation is deployed to a directory with the tag name (i.e. vX.Y.Z) and to the stable directory. Otherwise the docs are deployed to the directory determined by the devurl argument.\n\nThe deployment procedure consists of the following steps:\n\nCheck out the branch of repo to a temporary location.\nRemove the existing deployment (sub-)directory with git rm -r.\nCopy the target (build) folder to the deployment directory.\nGenerate index.html, and versions.js in the branch root and siteinfo.js in the deployment directory.\nAdd all files on the deployment branch (git add -A .), commit them, and push the repo. Note that any .gitignore files in the target directory affect which files will be committed to branch.\n\nnote: Note\nThe index.html will be created at the branch root if and only if one of the following two conditions hold:No such file already exists.\nThe file exists and starts with the HTML comment\n<!--This file is automatically generated by Documenter.jl-->\n\nRequired keyword arguments\n\nrepo is the remote repository where generated HTML content should be pushed to. Do not specify any protocol - \"https://\" or \"git@\" should not be present. This keyword must be set and will throw an error when left undefined. For example this package uses the following repo value:\n\nrepo = \"github.com/JuliaDocs/Documenter.jl.git\"\n\nOptional keyword arguments\n\ndeploy_config determines configuration for the deployment. If this is not specified Documenter will try to autodetect from the currently running environment. See the manual section about Deployment systems.\n\nroot has the same purpose as the root keyword for makedocs.\n\ntarget is the directory, relative to root, where generated content that should be deployed to gh-pages is written to. It should generally be the same as makedocs's build and defaults to \"build\".\n\nbranch is the branch where the generated documentation is pushed. If the branch does not exist, a new orphaned branch is created automatically. It defaults to \"gh-pages\".\n\ndirname is a subdirectory of branch that the docs should be added to. By default, it is \"\", which will add the docs to the root directory.\n\ncname is the CNAME where the documentation will be hosted, which is equivalent to the GitHub Pages \"Custom domain\" setting in the repository settings. If set, it will be used to generate the CNAME file, which has a higher priority than the GitHub Pages settings.\n\ndevbranch is the branch that \"tracks\" the in-development version of the generated documentation. By default Documenter tries to figure this out using git. Can be set explicitly as a string (typically \"master\" or \"main\").\n\ndevurl the folder that in-development version of the docs will be deployed. Defaults to \"dev\".\n\nforcepush a boolean that specifies the behavior of the git-deployment. The default (forcepush = false) is to push a new commit, but when forcepush = true the changes will be combined with the previous commit and force pushed, erasing the Git history on the deployment branch.\n\nversions determines content and order of the resulting version selector in the generated html. The following entries are valid in the versions vector:\n\n\"v#\": includes links to the latest documentation for each major release cycle (i.e. v2.0, v1.1).\n\"v#.#\": includes links to the latest documentation for each minor release cycle (i.e. v2.0, v1.1, v1.0, v0.1).\n\"v#.#.#\": includes links to all released versions.\n\"v^\": includes a link to the docs for the maximum version (i.e. a link vX.Y pointing to vX.Y.Z for highest X, Y, Z, respectively).\nA pair, e.g. \"first\" => \"second\", which will put \"first\" in the selector, and generate a url from which \"second\" can be accessed. The second argument can be \"v^\", to point to the maximum version docs (as in e.g. \"stable\" => \"v^\").\n\nIf versions = nothing documentation will be deployed directly to the \"root\", i.e. not to a versioned subfolder. See the manual section on Deploying without the versioning scheme for more details.\n\npush_preview a boolean that specifies if preview documentation should be deployed from pull requests or not. If your published documentation is hosted at \"https://USER.github.io/PACKAGE.jl/stable, by default the preview will be hosted at \"https://USER.github.io/PACKAGE.jl/previews/PR##\". This feature works for pull requests with head branch in the same repository, i.e. not from forks.\n\nbranch_previews is the branch to which pull request previews are deployed. It defaults to the value of branch.\n\nrepo_previews is the remote repository to which pull request previews are deployed. It defaults to the value of repo.\n\nnote: Note\nPull requests made from forks will not have previews. Hosting previews requires access to the deploy key. Therefore, previews are available only for pull requests that were submitted directly from the main repository. On GitHub Actions, GITHUB_TOKEN must be present for previews to work, even if DOCUMENTER_KEY ise being used to deploy.\n\nnote: Note\nPreviews generated are NOT automatically cleaned up. This can be done manually or automated. A GitHub Actions workflow for automating the same can be found here.\n\ndeps can be set to a function or a callable object and gets called during deployment, and is usually used to install additional dependencies. By default, nothing gets executed.\n\nmake can be set to a function or a callable object and gets called during deployment, and is usually used to specify additional build steps. By default, nothing gets executed.\n\ntag_prefix can be set to allow prefixed version numbers to determine the version number of a release. If tag_prefix = \"\" (the default), only version tags will trigger deployment; with a non-empty tag_prefix, only version tags with that prefix will trigger deployment. See manual sections on Documentation Versions and Deploying from a monorepo for more details.\n\nReleases vs development branches\n\ndeploydocs will automatically figure out whether it is deploying the documentation for a tagged release or just a development branch (usually, based on the environment variables set by the CI system).\n\nWith versioned tags, deploydocs discards the build metadata (i.e. + and everything that follows it) from the version number when determining the name of the directory into which the documentation gets deployed, as well as the tag_prefix (if present). Pre-release identifiers are preserved.\n\nSee Also\n\nThe Hosting Documentation section of the manual provides a step-by-step guide to using the deploydocs function to automatically generate docs and push them to GitHub.\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#Documenter.doctest","page":"Public API","title":"Documenter.doctest","text":"doctest(package::Module; kwargs...)\n\nConvenience method that runs and checks all the doctests for a given Julia package. package must be the Module object corresponding to the top-level module of the package. Behaves like an @testset call, returning a testset if all the doctests are successful or throwing a TestSetException if there are any failures. Can be included in other testsets.\n\nKeywords\n\nmanual controls how manual pages are handled. By default (manual = true), doctest assumes that manual pages are located under docs/src. If that is not the case, the manual keyword argument can be passed to specify the directory. Setting manual = false will skip doctesting of manual pages altogether.\n\nAdditional keywords are passed on to the main doctest method.\n\n\n\n\n\ndoctest(source, modules; kwargs...)\n\nRuns all the doctests in the given modules and on manual pages under the source directory. Behaves like an @testset call, returning a testset if all the doctests are successful or throwing a TestSetException if there are any failures. Can be included in other testsets.\n\nThe manual pages are searched recursively in subdirectories of source too. Doctesting of manual pages can be disabled if source is set to nothing.\n\nKeywords\n\ntestset specifies the name of test testset (default \"Doctests\").\n\ndoctestfilters vector of regex or regex/substitution pairs to filter tests (see the manual on Filtering Doctests)\n\nfix, if set to true, updates all the doctests that fail with the correct output (default false).\n\nplugins is a list of Documenter.Plugin objects to be forwarded to makedocs. Use as directed by the documentation of a third-party plugin.\n\nwarning: Warning\nWhen running doctest(...; fix=true), Documenter will modify the Markdown and Julia source files. It is strongly recommended that you only run it on packages in Pkg's develop mode and commit any staged changes. You should also review all the changes made by doctest before committing them, as there may be edge cases when the automatic fixing fails.\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#Documenter.DocMeta","page":"Public API","title":"Documenter.DocMeta","text":"This module provides APIs for handling documentation metadata in modules.\n\nThe implementation is similar to how docstrings are handled in Base by the Base.Docs module — a special variable is created in each module that has documentation metadata.\n\nPublic API\n\nDocMeta.getdocmeta\nDocMeta.setdocmeta!\n\nSupported metadata\n\nDocTestSetup: contains the doctest setup code for doctests in the module.\n\n\n\n\n\n","category":"module"},{"location":"lib/public/#Documenter.DocMeta.getdocmeta","page":"Public API","title":"Documenter.DocMeta.getdocmeta","text":"getdocmeta(m::Module)\n\nReturns the documentation metadata dictionary for the module m. The dictionary should be considered immutable and assigning values to it is not well-defined. To set documentation metadata values, DocMeta.setdocmeta! should be used instead.\n\n\n\n\n\ngetdocmeta(m::Module, key::Symbol, default=nothing)\n\nReturn the key entry from the documentation metadata for module m, or default if the value is unset.\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#Documenter.DocMeta.setdocmeta!","page":"Public API","title":"Documenter.DocMeta.setdocmeta!","text":"setdocmeta!(m::Module, key::Symbol, value; recursive=false, warn=true)\n\nSet the documentation metadata value key for module m to value.\n\nIf recursive is set to true, it sets the same metadata value for all the submodules too. If warn is true, it prints a warning when key already exists and it gets rewritten.\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#DocumenterTools","page":"Public API","title":"DocumenterTools","text":"","category":"section"},{"location":"lib/public/","page":"Public API","title":"Public API","text":"DocumenterTools.generate\nDocumenterTools.genkeys\nDocumenterTools.OutdatedWarning.generate","category":"page"},{"location":"lib/public/#DocumenterTools.generate","page":"Public API","title":"DocumenterTools.generate","text":"DocumenterTools.generate(path::String = \"docs\"; name = nothing, format = :html)\n\nCreate a documentation stub in path, which is usually a sub folder in the package root. The name of the package is determined automatically, but can be given with the name keyword argument.\n\ngenerate can also be called without any arguments, in which case it simply puts all the generated files into a docs directory in the current working directory. This way, if you are already in the root directory of your package, you generally only need to call generate() to generate the documentation stub.\n\ngenerate creates the following files in path:\n\n.gitignore\nsrc/index.md\nmake.jl\nmkdocs.yml\nProject.toml\n\nArguments\n\npath file path to the documentation directory to be created (default is \"docs\").\n\nKeywords Arguments\n\nname is the name of the package (without .jl). If name is not given generate tries to detect it automatically.\n\nformat can be either :html (default), :markdown or :pdf corresponding to the format keyword to Documenter's makedocs function, see Documenter's manual.\n\nExamples\n\njulia> using DocumenterTools\n\njulia> DocumenterTools.generate(\"path/to/MyPackage/docs\")\n[ ... output ... ]\n\n\n\n\n\nDocumenterTools.generate(pkg::Module; dir = \"docs\", format = :html)\n\nSame as generate(path::String) but the path and name is determined automatically from the module.\n\nnote: Note\nThe package must be in development mode. Make sure you run pkg> develop MyPackage from the Pkg REPL, or Pkg.develop(\"MyPackage\") before generating docs.\n\nExamples\n\njulia> using DocumenterTools\n\njulia> using MyPackage\n\njulia> DocumenterTools.generate(MyPackage)\n[ ... output ... ]\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#DocumenterTools.genkeys","page":"Public API","title":"DocumenterTools.genkeys","text":"DocumenterTools.genkeys(; user=\"$USER\", repo=\"$REPO\")\n\nGenerates the SSH keys necessary for the automatic deployment of documentation with Documenter from a builder to GitHub Pages.\n\nBy default the links in the instructions need to be modified to correspond to actual URLs. The optional user and repo keyword arguments can be specified so that the URLs in the printed instructions could be copied directly. They should be the name of the GitHub user or organization where the repository is hosted and the full name of the repository, respectively.\n\nExamples\n\njulia> using DocumenterTools\n\njulia> DocumenterTools.genkeys()\n┌ Info: Add the key below as a new 'Deploy key' on GitHub (https://github.com/$USER/$REPO/settings/keys) with read and write access.\n└ The 'Title' field can be left empty as GitHub can infer it from the key comment.\n\nssh-rsa AAAAB3NzaC2yc2EAAAaDAQABAAABAQDrNsUZYBWJtXYUk21wxZbX3KxcH8EqzR3ZdTna0Wgk...jNmUiGEMKrr0aqQMZEL2BG7 Documenter\n\n[ Info: Add a secure 'Repository secret' named 'DOCUMENTER_KEY' (to https://github.com/$USER/$REPO/settings/secrets if you deploy using GitHub Actions) with value:\n\nLS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBNnpiRkdXQVZpYlIy...QkVBRWFjY3BxaW9uNjFLaVdOcDU5T2YrUkdmCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==\n\n\njulia> DocumenterTools.genkeys(user=\"JuliaDocs\", repo=\"DocumenterTools.jl\")\n┌ Info: Add the key below as a new 'Deploy key' on GitHub (https://github.com/JuliaDocs/DocumenterTools.jl/settings/keys) with read and write access.\n└ The 'Title' field can be left empty as GitHub can infer it from the key comment.\n\nssh-rsa AAAAB3NzaC2yc2EAAAaDAQABAAABAQDrNsUZYBWJtXYUk21wxZbX3KxcH8EqzR3ZdTna0Wgk...jNmUiGEMKrr0aqQMZEL2BG7 Documenter\n\n[ Info: Add a secure 'Repository secret' named 'DOCUMENTER_KEY' (to https://github.com/JuliaDocs/DocumenterTools.jl/settings/secrets if you deploy using GitHub Actions) with value:\n\nLS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBNnpiRkdXQVZpYlIy...QkVBRWFjY3BxaW9uNjFLaVdOcDU5T2YrUkdmCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==\n\n\n\n\n\ngenkeys(package::Module; remote=\"origin\")\n\nLike the other method, this generates the SSH keys necessary for the automatic deployment of documentation with Documenter from a builder to GitHub Pages, but attempts to guess the package URLs from the Git remote.\n\npackage needs to be the top level module of the package. The remote keyword argument can be used to specify which Git remote is used for guessing the repository's GitHub URL.\n\nThis method requires the following command lines programs to be installed:\n\nwhich (Unix) or where (Windows)\ngit\n\nnote: Note\nThe package must be in development mode. Make sure you run pkg> develop pkg from the Pkg REPL, or Pkg.develop(\"pkg\") before generating the SSH keys.\n\nExamples\n\njulia> using DocumenterTools\n\njulia> DocumenterTools.genkeys(DocumenterTools)\n[Info: add the public key below to https://github.com/JuliaDocs/DocumenterTools.jl/settings/keys with read/write access:\n\nssh-rsa AAAAB3NzaC2yc2EAAAaDAQABAAABAQDrNsUZYBWJtXYUk21wxZbX3KxcH8EqzR3ZdTna0Wgk...jNmUiGEMKrr0aqQMZEL2BG7 username@hostname\n\n[ Info: add a secure 'Repository secret' named 'DOCUMENTER_KEY' to https://travis-ci.com/JuliaDocs/DocumenterTools.jl/settings (if you deploy using Travis CI) or https://github.com/JuliaDocs/DocumenterTools.jl/settings/secrets (if you deploy using GitHub Actions) with value:\n\nLS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBNnpiRkdXQVZpYlIy...QkVBRWFjY3BxaW9uNjFLaVdOcDU5T2YrUkdmCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#DocumenterTools.OutdatedWarning.generate","page":"Public API","title":"DocumenterTools.OutdatedWarning.generate","text":"generate([io::IO = stdout,] root::String;force = false)\n\nThis function adds a (unconditional) warning (and noindex meta tag) to all versions of the documentation in root.\n\nforce overwrites a previous injected warning message created by this function.\n\nA typical use case is to run this on the gh-pages branch of a package. Make sure you review which changes you check in if you are not tagging a new release of your package's documentation at the same time.\n\n\n\n\n\n","category":"function"},{"location":"lib/internals/mdflatten/","page":"MDFlatten","title":"MDFlatten","text":"CollapsedDocStrings = true","category":"page"},{"location":"lib/internals/mdflatten/#MDFlatten","page":"MDFlatten","title":"MDFlatten","text":"","category":"section"},{"location":"lib/internals/mdflatten/","page":"MDFlatten","title":"MDFlatten","text":"Modules = [Documenter.MDFlatten]","category":"page"},{"location":"lib/internals/mdflatten/#Documenter.MDFlatten","page":"MDFlatten","title":"Documenter.MDFlatten","text":"Provides the mdflatten function that can \"flatten\" Markdown objects into a string, with formatting etc. stripped.\n\nNote that the tests in test/mdflatten.jl should be considered to be the spec for the output (number of newlines, indents, formatting, etc.).\n\n\n\n\n\n","category":"module"},{"location":"lib/internals/mdflatten/#Documenter.MDFlatten.mdflatten-Tuple{Any}","page":"MDFlatten","title":"Documenter.MDFlatten.mdflatten","text":"Convert a Markdown object to a String of only text (i.e. not formatting info).\n\nIt drop most of the extra information (e.g. language of a code block, URLs) and formatting (e.g. emphasis, headers). This \"flattened\" representation can then be used as input for search engines.\n\n\n\n\n\n","category":"method"},{"location":"man/examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"man/examples/","page":"Examples","title":"Examples","text":"Sometimes the best way to learn how to use a new package is to look for examples of what others have already built with it.","category":"page"},{"location":"man/examples/","page":"Examples","title":"Examples","text":"The following packages use Documenter to build their documentation and so should give a good overview of what this package is currently able to do.","category":"page"},{"location":"man/examples/","page":"Examples","title":"Examples","text":"note: Note\nPackages are listed alphabetically. If you have a package that uses Documenter then please open a PR that adds it to the appropriate list below; a simple way to do so is to navigate to https://github.com/JuliaDocs/Documenter.jl/edit/master/docs/src/man/examples.md.The make.jl file for all listed packages will be tested to check for potential regressions prior to tagging new Documenter releases whenever possible.","category":"page"},{"location":"man/examples/#Registered","page":"Examples","title":"Registered","text":"","category":"section"},{"location":"man/examples/","page":"Examples","title":"Examples","text":"Packages that have tagged versions available in the general Registry:","category":"page"},{"location":"man/examples/","page":"Examples","title":"Examples","text":"Augmentor.jl\nBanditOpt.jl\nBeaData.jl\nControlSystems.jl\nCOSMO.jl\nDiscretePredictors.jl\nDistributions.jl\nDocumenter.jl\nDrWatson\nEvolvingGraphs.jl\nExtractMacro.jl\nEzXML.jl\nFourierFlows.jl\nGadfly.jl\nGeophysicalFlows.jl\nGeoStats.jl\nHighlights.jl\nHypothesisTests.jl\nInvertibleNetworks.jl\nJUDI.jl\nJuliaGrid.jl\nLuxor.jl\nMergedMethods.jl\nMimi.jl\nNumericSuffixes.jl\nNLOptControl.jl\nOceananigans.jl)\nOhMyREPL.jl\nOnlineStats.jl\nPauliStrings.jl\nPhotoAcoustic.jl\nPigeons.jl\nPOMDPs.jl\nPhyloNetworks.jl\nPrivateModules.jl\nQuery.jl\nQuestDBClient.jl\nSimGBS.jl\nSlimOptim.jl\nSymbolicRegression.jl\nTaylorSeries.jl\nWeave.jl\nWorldDynamics.jl","category":"page"},{"location":"man/examples/#Documentation-repositories","page":"Examples","title":"Documentation repositories","text":"","category":"section"},{"location":"man/examples/","page":"Examples","title":"Examples","text":"Some projects or organizations maintain dedicated documentation repositories that are separate from specific packages.","category":"page"},{"location":"man/examples/","page":"Examples","title":"Examples","text":"DifferentialEquations.jl\nJuliaDocs landing page\nJuliaImages\nJuliaMusic\nPlots.jl","category":"page"},{"location":"lib/internals/jsdependencies/","page":"JSDependencies","title":"JSDependencies","text":"CollapsedDocStrings = true","category":"page"},{"location":"lib/internals/jsdependencies/#JSDependencies","page":"JSDependencies","title":"JSDependencies","text":"","category":"section"},{"location":"lib/internals/jsdependencies/","page":"JSDependencies","title":"JSDependencies","text":"Modules = [Documenter.JSDependencies]","category":"page"},{"location":"lib/internals/jsdependencies/#Documenter.JSDependencies","page":"JSDependencies","title":"Documenter.JSDependencies","text":"Provides an API to programmatically construct a RequireJS script.\n\n\n\n\n\n","category":"module"},{"location":"lib/internals/jsdependencies/#Documenter.JSDependencies.RemoteLibrary","page":"JSDependencies","title":"Documenter.JSDependencies.RemoteLibrary","text":"struct RemoteLibrary\n\nDeclares a remote JS dependency that should be declared in the RequireJS configuration shim.\n\nFields\n\nname: a unique name for the dependency, used to refer to it in other dependencies and snippets\nurl: full remote URL from where the dependency can be loaded from\ndeps: a list of the library's dependencies (becomes the deps configuration in the RequireJS shim)\nexports: sets the exports config in the resulting RequireJS shim\n\nConstructors\n\nRemoteLibrary(name::AbstractString, url::AbstractString; deps=String[], exports=nothing)\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/jsdependencies/#Documenter.JSDependencies.RequireJS","page":"JSDependencies","title":"Documenter.JSDependencies.RequireJS","text":"struct RequireJS\n\nDeclares a single RequireJS configuration/app file.\n\nFields\n\nlibraries: a dictionary of RemoteLibrary declarations (keys are the library names)\nsnippets: a list of JS snippets (Snippet)\n\nConstructors\n\nRequireJS(libraries::AbstractVector{RemoteLibrary}, snippets::AbstractVector{Snippet} = Snippet[])\n\nAPI\n\nThe push! function can be used to add additional libraries and snippets.\n\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/jsdependencies/#Documenter.JSDependencies.Snippet","page":"JSDependencies","title":"Documenter.JSDependencies.Snippet","text":"struct Snippet\n\nDeclares a JS code snipped that should be loaded with RequireJS. This gets wrapped in require([deps...], function(args...) {script...}) in the output.\n\nFields\n\ndeps: names of the RemoteLibrary dependencies of the snippet\nargs: the arguments of the callback function, corresponding to the library objects of the dependencies, in the order of deps\njs: the JS code of the function that gets used as the function body of the callback\n\nConstructors\n\nSnippet(deps::AbstractVector, args::AbstractVector, js::AbstractString)\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/jsdependencies/#Documenter.JSDependencies.jsescape-Tuple{Any}","page":"JSDependencies","title":"Documenter.JSDependencies.jsescape","text":"Replaces some of the characters in the string with escape sequences so that the strings would be valid JS string literals, as per the ECMAScript® 2017 standard. Note that it always escapes both potential \" and ' closing quotes.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/jsdependencies/#Documenter.JSDependencies.json_jsescape-Tuple","page":"JSDependencies","title":"Documenter.JSDependencies.json_jsescape","text":"json_jsescape(args...)\n\nCall JSON.json(args...) to generate a String of JSON, but then also escape two Unicode characters to get valid JS (since JSON is not a JS subset).\n\nnote: Note\nTechnically, starting with ECMAScript® 2019 (10th edition), this is no longer necessary. The JS standard was changed in a way that all valid JSON is also valid JS.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/jsdependencies/#Documenter.JSDependencies.parse_snippet","page":"JSDependencies","title":"Documenter.JSDependencies.parse_snippet","text":"parse_snippet(filename::AbstractString) -> Snippet\nparse_snippet(io::IO) -> Snippet\n\nParses a JS snippet file into a Snippet object.\n\nFormat\n\nThe first few lines are parsed to get the dependencies and argument variable names of the snippet. They need to match ^//\\s*([a-z]+): (i.e. start with //, optional whitespace, a lowercase identifier, and a colon). Once the parser hits a line that does not match that pattern, it will assume that it and all the following lines are the actual script.\n\nOnly lowercase letters are allowed in the identifiers. Currently only libraries and arguments are actually parsed and lines with other syntactically valid identifiers are ignored. For libraries and arguments, the value (after the colon) must be a comma separated list.\n\nA valid snippet file would look like the following. Note that the list of arguments can be shorter than the list of dependencies.\n\n// libraries: jquery, highlight, highlight-julia, highlight-julia-repl\n// arguments: $, hljs\n\n// Initialize the highlight.js highlighter\n$(document).ready(function() {\n  hljs.initHighlighting();\n})\n\n\n\n\n\n","category":"function"},{"location":"lib/internals/jsdependencies/#Documenter.JSDependencies.verify-Tuple{Documenter.JSDependencies.RequireJS}","page":"JSDependencies","title":"Documenter.JSDependencies.verify","text":"verify(r::RequireJS; verbose=false) -> Bool\n\nChecks that none of the dependencies are missing (returns false if some are). If verbose is set to true, it will also log an error with the missing dependency.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/jsdependencies/#Documenter.JSDependencies.writejs","page":"JSDependencies","title":"Documenter.JSDependencies.writejs","text":"writejs(io::IO, r::RequireJS)\nwritejs(filename::AbstractString, r::RequireJS)\n\nWrites out the RequireJS object as a valid JS that can be loaded with a <script> tag, either into a stream or a file. It will contain all the configuration and snippets.\n\n\n\n\n\n","category":"function"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"EditURL = \"https://github.com/JuliaDocs/Documenter.jl/blob/master/CHANGELOG.md\"","category":"page"},{"location":"release-notes/#Release-notes","page":"Release notes","title":"Release notes","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.","category":"page"},{"location":"release-notes/#Unreleased","page":"Release notes","title":"Unreleased","text":"","category":"section"},{"location":"release-notes/#Added","page":"Release notes","title":"Added","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"makedocs and doctest now accept regex/substitution pairs in doctestfilters. (#2360, #2619)","category":"page"},{"location":"release-notes/#Changed","page":"Release notes","title":"Changed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Symlinks are now followed when walking the docs directory. (#2610)\nPDF/LaTeX builds now throw a more informative error when sitename is not provided. (#2636)\n@autodocs now lists public unexported symbols by default (i.e. when Public = true). (#2629)\nThis is potentially breaking as it can cause previously working builds to fail if they are being run in strict mode. Errors can happen if there are unexported symbols marked with public whose docstrings are being included manually with e.g. @docs blocks, and there is also an @autodocs block including docstrings for all public symbols. The solution is to remove the duplicate inclusion.\ncheckdocs has a new option :public to check that unexported symbols marked with public are included in the docs. (#2629)\nFixing doctests that use [...] to hide part of an error message (such as a stacktrace) no longer replaces the [...] if the output otherwise matches (#2511, #2642)","category":"page"},{"location":"release-notes/#Version-[v1.8.1](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v1.8.1)-2025-02-11","page":"Release notes","title":"Version v1.8.1 - 2025-02-11","text":"","category":"section"},{"location":"release-notes/#Fixed","page":"Release notes","title":"Fixed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"DocMeta has been updated to respect world-age semantics for bindings, introduced in Julia 1.12. (#2621, #2622, #2624)","category":"page"},{"location":"release-notes/#Version-[v1.8.0](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v1.8.0)-2024-11-07","page":"Release notes","title":"Version v1.8.0 - 2024-11-07","text":"","category":"section"},{"location":"release-notes/#Changed-2","page":"Release notes","title":"Changed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"deploydocs now ignores any global GPG signing Git settings (i.e. commit.gpgSign = false). (#2592)","category":"page"},{"location":"release-notes/#Fixed-2","page":"Release notes","title":"Fixed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"The search modal no longer runs into a race condition with loading the search index and consistently opens correctly. (#2593)","category":"page"},{"location":"release-notes/#Other","page":"Release notes","title":"Other","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Documenter now uses Runic.jl for code formatting.","category":"page"},{"location":"release-notes/#Version-[v1.7.0](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v1.7.0)-2024-09-04","page":"Release notes","title":"Version v1.7.0 - 2024-09-04","text":"","category":"section"},{"location":"release-notes/#Added-2","page":"Release notes","title":"Added","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"The User-Agent header set in the linkcheck HTTP(S) requests can now be customized with the linkcheck_useragent option to makedocs. (#2557, #2562, #2571)\nAdmonitions with category todo are now colored purple. Previously they were default-colored like all other unknown admonitions categories. (#2526)\nA checkdocs_ignored_modules keyword argument to makedocs(...), which prevents checkdocs from warning about missing documentation in certain modules. (#2233)","category":"page"},{"location":"release-notes/#Changed-3","page":"Release notes","title":"Changed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"The default User-Agent header set in the linkcheck HTTP(S) requests now reports Chrome/127.0.0.0 instead of Chrome/51.0.2704.103. This may change how servers interpret the linkcheck requests, and cause previously passing checks to failing, but it is more likely to fix previous spurious failures. (#2557, #2569)","category":"page"},{"location":"release-notes/#Fixed-3","page":"Release notes","title":"Fixed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"The paths for size_threshold_ignore option of Documenter.HTML are now correctly normalized and no longer sensitive to platform-dependent differences in path separators. (#2560, #2561)","category":"page"},{"location":"release-notes/#Version-[v1.6.0](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v1.6.0)-2024-08-20","page":"Release notes","title":"Version v1.6.0 - 2024-08-20","text":"","category":"section"},{"location":"release-notes/#Changed-4","page":"Release notes","title":"Changed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"The MathJax3 setup now uses tex-svg-full.js and additionally draws in mhchem by default, allowing for chemistry symbols to be rendered (consistent with Pluto.jl). (#2549)","category":"page"},{"location":"release-notes/#Fixed-4","page":"Release notes","title":"Fixed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Collapsing of docstrings in the HTML output can now only be triggered when clicking on the icon or the empty area only. (#2204, #2551)","category":"page"},{"location":"release-notes/#Version-[v1.5.0](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v1.5.0)-2024-06-26","page":"Release notes","title":"Version v1.5.0 - 2024-06-26","text":"","category":"section"},{"location":"release-notes/#Added-3","page":"Release notes","title":"Added","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Four new experimental themes (catppuccin-latte, catppuccin-frappe, catppuccin-macchiato, and catppuccin-mocha) have been added. These are based on the Catppuccin color palette. The existing themes (documenter-light and documenter-dark) are still the default light and dark theme, respectively. (#2496)","category":"page"},{"location":"release-notes/#Changed-5","page":"Release notes","title":"Changed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Coloring of admonitions have been toned down in order to make them slightly less eye-catching. (#2499)\nThickness and rounding of docstrings and code blocks have been adjusted to match admonitions. (#2499)\nAll search terms in the HTML search must now match the result, as opposed to any. In other words, they are now AND-ed together, and not OR-ed. (#2514)","category":"page"},{"location":"release-notes/#Fixed-5","page":"Release notes","title":"Fixed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"The search prompt in the HTML output again correctly handles parenthesis and other special character that would previously cause the search to crash. (#2513)","category":"page"},{"location":"release-notes/#Version-[v1.4.1](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v1.4.1)-2024-05-02","page":"Release notes","title":"Version v1.4.1 - 2024-05-02","text":"","category":"section"},{"location":"release-notes/#Fixed-6","page":"Release notes","title":"Fixed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"In HTML output, links in inline code are now correctly colored on hover. (#2497)\nDoctest fixing functionality handles another edge case. (#2303, #2378)","category":"page"},{"location":"release-notes/#Version-[v1.4.0](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v1.4.0)-2024-04-14","page":"Release notes","title":"Version v1.4.0 - 2024-04-14","text":"","category":"section"},{"location":"release-notes/#Changed-6","page":"Release notes","title":"Changed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"A fully qualified @ref link now resolves in Main as well, in addition to CurrentModule. For any package whose docstrings are included in the documentation, as long as that package is loaded in make.jl, fully qualified @ref links to docstrings in the package will work from anywhere. This simplifies, e.g., linking between docstrings for packages that use sub-modules. (#2470)\nHTMLWriter saw several refactoring, which should not lead to any user-visible changes, but may affect plugins that are relying on Documenter's internals. (#2475, #2480, #2482)","category":"page"},{"location":"release-notes/#Version-[v1.3.0](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v1.3.0)-2024-03-01","page":"Release notes","title":"Version v1.3.0 - 2024-03-01","text":"","category":"section"},{"location":"release-notes/#Added-4","page":"Release notes","title":"Added","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Added support for a CollapsedDocStrings key in every page's @meta block. Setting CollapsedDocStrings = true for a particular page essentially clicks the \"Collapse all docstrings\" in the navigation bar after the page loads, collapsing all docstrings on that page. This can make API documentation pages much more readable. (#2282, #2394, #2459, #2460)\nAutomatically write an objects.inv inventory file to be be included in every online deployment of the documentation. With the help of the DocumenterInterLinks plugin, any other project using Documenter or Sphinx can then externally link to any page, heading, or docstring in the documentation. (#2366, #2424)\nAdded a parameter inventory_version to the HTML() options that may be passed to makedocs. This option sets the version metadata field in the new objects.inv inventory file. In most cases, the project version for the inventory will be automatically detected from the main Project.toml file, respectively, during deployment in deploydocs, from the git tag of the release. Any project may still want to explicitly set inventory_version via, e.g., pkgversion(MyProject) instead of relying on an auto-detected version. Projects with a non-standard setup (documentation-only-repos, monorepos) should modify their existing configuration to explicitly set inventory_version. (#2449)","category":"page"},{"location":"release-notes/#Changed-7","page":"Release notes","title":"Changed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"The search in the HTML output:\nIs now case-insensitive. (#2373, #2374)\nPrioritizes prefix matches. (#2203, #2375)\nUtilizes webworkers and is more responsive. (#2415)\nClearing the search query no longer deselects filters. (#2415)\nWhen selecting one filter all others are automatically deselected. (#2415)","category":"page"},{"location":"release-notes/#Fixed-7","page":"Release notes","title":"Fixed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Fix escaping special html entities in search output. (#2441, #2461)\nFix the search filter toggle button styling in the HTML output. (#2406, #2408)\nThe theme selector for the HTML output now correctly picks Automatic (OS) if the user hasn't explicitly set the theme. (#2414, #2438)\nFix the search window sometimes not appearing in the HTML output. (#2430, #2458)","category":"page"},{"location":"release-notes/#Version-[v1.2.1](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v1.2.1)-2023-12-02","page":"Release notes","title":"Version v1.2.1 - 2023-12-02","text":"","category":"section"},{"location":"release-notes/#Fixed-8","page":"Release notes","title":"Fixed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Fix an erroneous warning about the CurrentModule argument of @meta blocks. (#2364, #2365)","category":"page"},{"location":"release-notes/#Version-[v1.2.0](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v1.2.0)-2023-11-29","page":"Release notes","title":"Version v1.2.0 - 2023-11-29","text":"","category":"section"},{"location":"release-notes/#Changed-8","page":"Release notes","title":"Changed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"id anchors may now start with a numeric digit. (#744, #2325)\nDocumenter prints a more informative warning now if there is unexpected Julia interpolation in the Markdown (e.g. from errant $ signs). (#2288, #2327)\nDocumenter now warns when it encounters invalid keys in the various key-value at-blocks. (#2306, #2324)\nFile sizes are now expressed in more human-readable format. (#2272, #2344)\nDocumenter now uses Git.jl (as opposed to the system's git binary) for Git operations. (#2348)\nWoodpecker CI 1.x and 2.x are now also supported. (#2337, #2335, #2339)","category":"page"},{"location":"release-notes/#Fixed-9","page":"Release notes","title":"Fixed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Enabled text wrapping in docstring header on smaller screens. (#2293, #2307)\nFixed breadcrumb overflow with long page title on narrow screens (mobile). (#2317)\nFixed linkcheck not checking inside of docstrings. (#2329, #2330)\nHeadings are now rewritten to <strong> in lists found in docstrings. (#2308, #2313)","category":"page"},{"location":"release-notes/#Version-[v1.1.2](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v1.1.2)-2023-10-23","page":"Release notes","title":"Version v1.1.2 - 2023-10-23","text":"","category":"section"},{"location":"release-notes/#Fixed-10","page":"Release notes","title":"Fixed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Non-breaking spaces are now properly converted as \"~\" in the LaTeXWriter. (#2300)","category":"page"},{"location":"release-notes/#Version-[v1.1.1](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v1.1.1)-2023-10-12","page":"Release notes","title":"Version v1.1.1 - 2023-10-12","text":"","category":"section"},{"location":"release-notes/#Fixed-11","page":"Release notes","title":"Fixed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Fixed, docstring collapse/expand icon not changing correctly when clicking rapidly. (#2103, #2217)","category":"page"},{"location":"release-notes/#Version-[v1.1.0](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v1.1.0)-2023-09-28","page":"Release notes","title":"Version v1.1.0 - 2023-09-28","text":"","category":"section"},{"location":"release-notes/#Added-5","page":"Release notes","title":"Added","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Added Remotes.GitLab for specifying a Remote hosted on gitlab.com or a self-hosted GitLab instance. (#2279)","category":"page"},{"location":"release-notes/#Fixed-12","page":"Release notes","title":"Fixed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Fixed display of inline LaTeX math $ ... $ from show methods in HTMLWriter. (#2280, #2281)\nFixed a crash in GitHub remote link checking when remotes = nothing. (#2274, #2285)\nFix an error occurring with DocTestFilters = nothing in @meta blocks. (#2273, #1696)","category":"page"},{"location":"release-notes/#Version-[v1.0.1](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v1.0.1)-2023-09-18","page":"Release notes","title":"Version v1.0.1 - 2023-09-18","text":"","category":"section"},{"location":"release-notes/#Fixed-13","page":"Release notes","title":"Fixed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Docstring with an unwrapped Markdown.MD object, such as the ones created when the Markdown.@doc_str macro is used, are correctly handled again. (#2269)","category":"page"},{"location":"release-notes/#Version-[v1.0.0](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v1.0.0)-2023-09-15","page":"Release notes","title":"Version v1.0.0 - 2023-09-15","text":"","category":"section"},{"location":"release-notes/#Version-changes","page":"Release notes","title":"Version changes","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"The (minimum) required Julia version has been raised from 1.0 to 1.6. For older Julia versions the 0.27.X release can still be used. (#1835, #1841)","category":"page"},{"location":"release-notes/#Breaking","page":"Release notes","title":"Breaking","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"The strict keyword argument to makedocs has been removed and replaced with warnonly. makedocs now fails builds by default if any of the document checks fails (previously it only issued warnings by default). (#2051, #2194)\nFor upgrading: If you are running with strict = true, you can just drop the strict option. If you are currently being strict about specific error classes, you can invert the list of error classes with Documenter.except.\nIf you were not setting the strict keyword, but your build is failing now, you should first endeavor to fix the errors that are causing the build to fail. If that is not feasible, you can exclude specific error categories from failing the build (e.g. warnonly = [:footnote, :cross_references]). Finally, setting warnonly = true can be used to recover the old strict = false default behavior, turning all errors back into warnings.\nThe Markdown backend has been fully removed from the Documenter package, in favor of the external DocumenterMarkdown package. This includes the removal of the exported Deps module. (#1826)\nFor upgrading: To keep using the Markdown backend, refer to the DocumenterMarkdown package. That package might not immediately support the latest Documenter version, however.\n@eval blocks now require the last expression to be either nothing or of type Markdown.MD, with other cases now issuing an :eval_block error, and falling back to a text representation of the object. (#1919, #2260)\nFor upgrading: The cases where an @eval results in a object that is not nothing or ::Markdown.MD, the returned object should be reviewed. In case the resulting object is of some Markdown node type (e.g. Markdown.Paragraph or Markdown.Table), it can simply be wrapped in Markdown.MD([...]) for block nodes, or Markdown.MD([Markdown.Paragraph([...])]) for inline nodes. In other cases Documenter was likely not handling the returned object in a correct way, but please open an issue if this change has broken a previously working use case. The error can be ignored by passing :eval_block to the warnonly keyword.\nThe handling of remote repository (e.g. GitHub) URLs has been overhauled. (#1808, #1881, #2081, #2232)\nIn addition to generating source and edit links for the main repository, Documenter can now also be configured to generate correct links for cases where some files are from a different repository (e.g. with vendored dependencies). There have also been changes and fixes to the way the automatic detection of source and edit links works.\nThe fallbacks to TRAVIS_REPO_SLUG and GITHUB_REPOSITORY variables have been removed in favor of explicitly specifying the repo keyword in the makedocs call.\nDocumenter is now also more strict about the cases where it is unable to determine the URLs, and therefore previously successful builds may break.\nFor upgrading: As the fallbacks to CI variables have been removed, make sure that you have your source checked out as a proper Git repository when building the documentation, so that Documenter could determine the repository link automatically from the Git origin URL. On GitHub Actions, this should normally already be the case, and user action is unlikely to be necessary. In other cases, if necessary, you can configure the repo and/or remotes keywords of makedocs appropriately.\nThese changes should mostly affect more complex builds that include docstrings or files from various sources, such as when including docstrings from multiple packages. In the latter case in particular, you should make sure that all the relevant packages are also fully cloned and added as development dependencies to the docs/Project.toml (or equivalent) environment (or that the remotes keyword is configured for the Pkg.add-ed packages).\nFinally, in general, even if the build succeeds, double check that the various remote links (repository links, source links, edits links) have been generated correctly. If you run into any unexpected errors, please open an issue.\nDocumenter now checks that local links (e.g. to other Markdown files, local images; such as [see the other page](other.md)) are pointing to existing files. (#2130, #2187)\nThis can cause existing builds to fail because previously broken links are now caught by the Documenter's document checks, in particular because Documenter now runs in strict mode by default.\nFor upgrading: You should double check and fix all the offending links. Alternatively, you can also set warnonly = :cross_references, so that the errors would be reduced to warnings (however, this is not recommended, as you will have broken links in your generated documentation).\nThe HTML output now enforces size thresholds for the generated HTML files, to catch cases where Documenter is deploying extremely large HTML files (usually due to generated content, like figures). If any generated HTML file is above either of the thresholds, Documenter will either error and fail the build (if above size_threshold), or warn (if above size_threshold_warn). The size threshold can also be ignored for specific pages with size_threshold_ignore. (#2142, #2205, #2211, #2252)\nFor upgrading: If your builds are now failing due to the size threshold checks, you should first investigate why the generated HTML files are so large (e.g. you are likely automatically generating too much HTML, like extremely large inline SVG figures), and try to reduce them below the default thresholds. If you are unable to reduce the generated file size, you can increase the size_threshold value to just above the maximum size, or disable the enforcement of size threshold checks altogether by setting size_threshold = nothing. If it is just a few specific pages that are offending, you can also ignore those with size_threshold_ignore.\nUser-provided assets/search.js file no longer overrides Documenter's default search implementation, and the user-provided files will now be ignored by default. (#2236)\nFor upgrading: The JS file can still be included via the assets keyword of format = HTML(...). However, it will likely conflict with Documenter's default search implementation. If you require an API to override Documenter's search engine, please open an issue.\nPlugin objects which were formally passed as (undocumented) positional keyword arguments to makedocs are now given as elements of a list plugins passed as a keyword argument (#2245, #2249)\nFor upgrading: If you are passing any plugin objects to makedocs (positionally), pass them via the plugins keyword instead.\nmakedocs will now throw an error if it gets passed an unsupported keyword argument. (#2259)\nFor upgrading: Remove the listed keyword arguments from the makedocs call. If the keyword was previously valid, consult this CHANGELOG for upgrade instructions.","category":"page"},{"location":"release-notes/#Added-6","page":"Release notes","title":"Added","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Doctest filters can now be specified as regex/substitution pairs, i.e. r\"...\" => s\"...\", in order to control the replacement (which defaults to the empty string, \"\"). (#1989, #1271)\nDocumenter is now more careful not to accidentally leak SSH keys (in e.g. error messages) by removing DOCUMENTER_KEY from the environment when it is not needed. (#1958, #1962)\nAdmonitions are now styled with color in the LaTeX output. (#1931, #1932, #1946, #1955)\nImproved the styling of code blocks in the LaTeXWriter. (#1933, #1935, #1936, #1944, #1956, #1957)\nAutomatically resize oversize tabular environments from @example blocks in LaTeXWriter. (#1930, #1937)\nThe ansicolor keyword to HTML() now defaults to true, meaning that executed outputs from @example- and @repl-blocks are now by default colored (if they emit colored output). (#1828)\nDocumenter now shows a link to the root of the repository in the top navigation bar. The link is determined automatically from the remote repository, unless overridden or disabled via the repolink argument of HTML. (#1254)\nA more general API is now available to configure the remote repository URLs via the repo argument of makedocs by passing objects that are subtypes of Remotes.Remote and implement its interface (e.g. Remotes.GitHub). (#1808, #1881)\nBroken issue references (i.e. links like [#1234](@ref), but when Documenter is unable to determine the remote GitHub repository) now generate :cross_references errors that can be caught via the strict keyword. (#1808)\nThis is potentially breaking as it can cause previously working builds to fail if they are being run in strict mode. However, such builds were already leaving broken links in the generated documentation.\nFor upgrading: the easiest way to fix the build is to remove the offending @ref links. Alternatively, the repo argument to makedocs can be set to the appropriate Remotes.Remote object that implements the Remotes.issueurl function, which would make sure that correct URLs are generated.\nWoodpecker CI is now automatically supported for documentation deployment. (#1880)\nThe @contents-block now support UnitRanges for the Depth argument. This makes it possible to configure also the minimal header depth that should be displayed (Depth = 2:3, for example). This is supported by the HTML and the LaTeX/PDF backends. (#245, #1890)\nThe code copy buttons in HTML now have title and aria-label attributes. (#1903)\nThe at-ref links are now more flexible, allowing arbitrary links to point to both docstrings and section headings. (#781, #1900)\nCode blocks like @example or @repl are now also expanded in nested contexts (e.g. admonitions, lists or block quotes). (#491, #1970)\nThe new pagesonly keyword to makedocs can be used to restrict builds to just the Markdown files listed in pages (as opposed to all .md files under src/). (#1980)\nSearch engine and social media link previews are now supported, with Documenter generating the relevant HTML meta tags. (#1321, #1991)\ndeploydocs now supports custom tag prefixes; see section \"Deploying from a monorepo\" in the docs. (#1291, #1792, #1993)\nThe target keyword of deploydocs is now required to point to a subdirectory of root (usually the directory where make.jl is located). (#2019)\nAdded keyboard shortcuts for search box (Ctrl + / or Cmd + / to focus into the search box, Esc to focus out of it). (#1536, #2027)\nThe various JS and font dependencies of the HTML backend have been updated to the latest non-breaking versions. (#2066, #2067, #2070, #2071, #2213)\nKaTeX has been updated from v0.13.24 to v0.16.8 (major version bump).\nFont Awesome has been updated from v5.15.4 to v6.4.2 (major version bump).\nbulma.sass has been updated from v0.7.5 to v0.9.4 (major version bump).\ndarkly.scss been updated to v0.8.1.\nhighlight.js has been updated from v11.5.1 to v11.8.0.\nJuliaMono has been updated from v0.045 to v0.050.\njQuery UI has been updated from v1.12.1 to v1.13.2.\njquery has been updated from v3.6.0 to v3.7.0.\nMathJax 2 has been updated  from v2.7.7 to v2.7.9.\nMove the mobile layout sidebar toggle (hamburger) from the right side to the left side. (#1312, #2076, #2169, #2215, #2216)\nAdded the ability to expand/collapse individual as well as all docstrings. (#1393, #2078)\nInvalid local link warnings during HTML rendering now print a bit more context, helping in pinpointing the offending link. (#2100)\nAdmonitions with category details are now rendered as (collapsed) <details> in the HTML backend. The admonition title is used as the <summary>. (#2128)\nTheme switcher now includes an \"Automatic (OS preference)\" option that makes the site follow the user's OS setting. (#1745, #2085, #2170)\nDocumenter now generates a .documenter-siteinfo.json file in the HTML build, that contains some metadata about the build. (#2181)\nThe search UI has had a complete overhaul, with a fresh new modal UI with better context for search results and a filter mechanism to remove unwanted results. The client-side search engine has been changed from LunrJs to MinisearchJs. (#1437, #2141, #2147, #2202)\nThe doctest routine can now receive the same plugins keyword argument as makedocs. This enables doctest to run if any plugin with a mandatory Plugin object is loaded, e.g., DocumenterCitations. (#2245)\nThe HTML output will automatically write larger @example-block outputs to files, to make the generated HTML files smaller. The size threshold can be controlled with the example_size_threshold option to HTML. (#2143, #2247)\nThe @docs and @autodocs blocks can now be declared non-canonical, allowing multiple copied of the same docstring to be included in the manual. (#1079, #1570, #2237)","category":"page"},{"location":"release-notes/#Fixed-14","page":"Release notes","title":"Fixed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Line endings in Markdown source files are now normalized to LF before parsing, to work around [a bug in the Julia Markdown parser][JuliaLang/julia#29344] where parsing is sensitive to line endings, and can therefore cause platform-dependent behavior. (#1906)\nHTMLWriter no longer complains about invalid URLs in docstrings when makedocs gets run multiple time in a Julia session, as it no longer modifies the underlying docstring objects. (#505, #1924)\nDocstring doctests now properly get checked on each makedocs run, when run multiple times in the same Julia session. (#974, #1948)\nThe default decision for whether to deploy preview builds for pull requests have been changed from true to false when not possible to verify the origin of the pull request. (#1969)\ndeploydocs now correctly handles version symlinks where the destination directory has been deleted. (#2012)","category":"page"},{"location":"release-notes/#Other-2","page":"Release notes","title":"Other","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Documenter now uses MarkdownAST to internally represent Markdown documents. While this change should not lead to any visible changes to the user, it is a major refactoring of the code. Please report any novel errors or unexpected behavior you encounter when upgrading to 0.28 on the Documenter issue tracker. (#1892, #1912, #1924, #1948)\nThe code layout has changed considerably, with many of the internal submodules removed. This may be breaking for code that hooks into various Documenter internals, as various types and functions now live at different code paths. (#1976, #1977, #2191, #2214)","category":"page"},{"location":"release-notes/#Version-[v0.27.25](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v0.27.25)-2023-07-03","page":"Release notes","title":"Version v0.27.25 - 2023-07-03","text":"","category":"section"},{"location":"release-notes/#Fixed-15","page":"Release notes","title":"Fixed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Page headings are now correctly escaped in LaTeXWriter. (#2134)\nCompiling the dark theme with Sass no longer emits deprecation warnings about !global assignments. (#1766, #1983, #2145)\nThe CSS Documenter ships is now minified. (#2153, #2157)","category":"page"},{"location":"release-notes/#Version-[v0.27.24](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v0.27.24)-2023-01-23","page":"Release notes","title":"Version v0.27.24 - 2023-01-23","text":"","category":"section"},{"location":"release-notes/#Security","page":"Release notes","title":"Security","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"deploydocs now takes extra care to avoid committing the temporary SSH key file to the Git repo. (#2018)","category":"page"},{"location":"release-notes/#Version-[v0.27.23](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v0.27.23)-2022-08-26","page":"Release notes","title":"Version v0.27.23 - 2022-08-26","text":"","category":"section"},{"location":"release-notes/#Added-7","page":"Release notes","title":"Added","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"The native and docker PDF builds now run with the -interaction=batchmode (instead of nonstopmode) and -halt-on-error options to make the LaTeX error logs more readable and to fail the build early. (#1908)","category":"page"},{"location":"release-notes/#Fixed-16","page":"Release notes","title":"Fixed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"The PDF/LaTeX output now handles hard Markdown line breaks (i.e. Markdown.LineBreak nodes). (#1908)\nPreviously broken links within the PDF output are now fixed. (JuliaLang/julia#38054, JuliaLang/julia#43652, #1909)","category":"page"},{"location":"release-notes/#Version-[v0.27.22](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v0.27.22)-2022-07-24","page":"Release notes","title":"Version v0.27.22 - 2022-07-24","text":"","category":"section"},{"location":"release-notes/#Other-3","page":"Release notes","title":"Other","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Documenter is now compatible with DocStringExtensions v0.9. (#1885, #1886)","category":"page"},{"location":"release-notes/#Version-[v0.27.21](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v0.27.21)-2022-07-13","page":"Release notes","title":"Version v0.27.21 - 2022-07-13","text":"","category":"section"},{"location":"release-notes/#Fixed-17","page":"Release notes","title":"Fixed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Fix a regression where Documenter throws an error on systems that do not have Git available. (#1870, #1871)","category":"page"},{"location":"release-notes/#Version-[v0.27.20](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v0.27.20)-2022-07-10","page":"Release notes","title":"Version v0.27.20 - 2022-07-10","text":"","category":"section"},{"location":"release-notes/#Added-8","page":"Release notes","title":"Added","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"The various JS and font dependencies of the HTML backend have been updated to the latest non-breaking versions. (#1844, #1846)\nMathJax 3 has been updated from v3.2.0 to v3.2.2.\nJuliaMono has been updated from v0.044 to v0.045.\nFont Awesome has been updated from v5.15.3 to v5.15.4.\nhighlight.js has been updated from v11.0.1 to v11.5.1.\nKaTeX has been updated from v0.13.11 to v0.13.24.\nExperimental: deploydocs now supports \"deploying to tarball\" (rather than pushing to the gh-pages branch) via the undocumented experiments archive keyword. (#1865)","category":"page"},{"location":"release-notes/#Fixed-18","page":"Release notes","title":"Fixed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"When including docstrings for an alias, Documenter now correctly tries to include the exactly matching docstring first, before checking for signature subtypes. (#1842)\nWhen checking for missing docstrings, Documenter now correctly handles docstrings for methods that extend bindings from other modules that have not been imported into the current module. (#1695, #1857, #1861)\nBy overriding GIT_TEMPLATE_DIR, git no longer picks up arbitrary user templates and hooks when internally called by Documenter. (#1862)","category":"page"},{"location":"release-notes/#Version-[v0.27.19](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v0.27.19)-2022-06-05","page":"Release notes","title":"Version v0.27.19 - 2022-06-05","text":"","category":"section"},{"location":"release-notes/#Added-9","page":"Release notes","title":"Added","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Documenter can now build draft version of HTML documentation by passing draft=true to makedocs. Draft mode skips potentially expensive parts of the building process and can be useful to get faster feedback when writing documentation. Draft mode currently skips doctests, @example-, @repl-, @eval-, and @setup-blocks. Draft mode can be disabled (or enabled) on a per-page basis by setting Draft = true in an @meta block. (#1836)\nOn the HTML search page, pressing enter no longer causes the page to refresh (and therefore does not trigger the slow search index rebuild). (#1728, #1833, #1834)\nFor the edit_link keyword to HTML(), Documenter automatically tries to figure out if the remote default branch is main, master, or something else. It will print a warning if it is unable to reliably determine either edit_link or devbranch (for deploydocs). (#1827, #1829)\nProfiling showed that a significant amount of the HTML page build time was due to external git commands (used to find remote URLs for docstrings). These results are now cached on a per-source-file basis resulting in faster build times. This is particularly useful when using LiveServer.jls functionality for live-updating the docs while writing. (#1838)","category":"page"},{"location":"release-notes/#Version-[v0.27.18](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v0.27.18)-2022-05-25","page":"Release notes","title":"Version v0.27.18 - 2022-05-25","text":"","category":"section"},{"location":"release-notes/#Added-10","page":"Release notes","title":"Added","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"The padding of the various container elements in the HTML style has been reduced, to improve the look of the generated HTML pages. (#1814, #1818)","category":"page"},{"location":"release-notes/#Fixed-19","page":"Release notes","title":"Fixed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"When deploying unversioned docs, Documenter now generates a siteinfo.js file that disables the version selector, even if a ../versions.js happens to exists. (#1667, #1825)\nBuild failures now only show fatal errors, rather than all errors. (#1816)\nDisable git terminal prompt when detecting remote HEAD branch for ssh remotes, and allow ssh-agent authentication (by appending rather than overriding ENV). (#1821)","category":"page"},{"location":"release-notes/#Version-[v0.27.17](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v0.27.17)-2022-05-09","page":"Release notes","title":"Version v0.27.17 - 2022-05-09","text":"","category":"section"},{"location":"release-notes/#Added-11","page":"Release notes","title":"Added","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"PDF/LaTeX output can now be compiled with the Tectonic LaTeX engine. (#1802, #1803)\nThe phrasing of the outdated version warning in the HTML output has been improved. (#1805)\nDocumenter now provides the Documenter.except function which can be used to \"invert\" the list of errors that are passed to makedocs via the strict keyword. (#1811)","category":"page"},{"location":"release-notes/#Fixed-20","page":"Release notes","title":"Fixed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"When linkchecking HTTP and HTTPS URLs, Documenter now also passes a realistic accept-encoding header along with the request, in order to work around servers that try to block non-browser requests. (#1807)\nLaTeX build logs are now properly outputted to the LaTeXWriter.{stdout,stderr} files when using the Docker build option. (#1806)\nmakedocs no longer fails with an UndefVarError if it encounters a specific kind of bad docsystem state related to docstrings attached to the call syntax, but issues an @autodocs error/warning instead. (JuliaLang/julia#45174, #1192, #1810, #1811)","category":"page"},{"location":"release-notes/#Version-[v0.27.16](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v0.27.16)-2022-04-19","page":"Release notes","title":"Version v0.27.16 - 2022-04-19","text":"","category":"section"},{"location":"release-notes/#Added-12","page":"Release notes","title":"Added","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Update CSS source file for JuliaMono, so that all font variations are included (not just JuliaMono Regular) and that the latest version (0.039 -> 0.044) of the font would be used. (#1780, #1784)\nThe table of contents in the generated PDFs have more space between section numbers and titles to avoid them overlapping. (#1785)\nThe preamble of the LaTeX source of the PDF build can now be customized by the user. (#1746, #1788)\nThe package version number shown in the PDF manual can now be set by the user by passing the version option to format = LaTeX(). (#1795)","category":"page"},{"location":"release-notes/#Fixed-21","page":"Release notes","title":"Fixed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Fix strict mode to properly print errors, not just a warnings. (#1756, #1776)\nDisable git terminal prompt when detecting remote HEAD branch. (#1797)\nWhen linkchecking HTTP and HTTPS URLs, Documenter now passes a realistic browser (Chrome) User-Agent header along with the request, in order to work around servers that try to use the User-Agent to block non-browser requests. (#1796)","category":"page"},{"location":"release-notes/#Version-[v0.27.15](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v0.27.15)-2022-03-17","page":"Release notes","title":"Version v0.27.15 - 2022-03-17","text":"","category":"section"},{"location":"release-notes/#Added-13","page":"Release notes","title":"Added","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Documenter now deploys documentation from scheduled jobs (schedule on GitHub actions). (#1772, #1773)\nImprove layout of the table of contents section in the LaTeX/PDF output. (#1750)","category":"page"},{"location":"release-notes/#Fixed-22","page":"Release notes","title":"Fixed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Improve the fix for extraneous whitespace in REPL blocks. (#1774)","category":"page"},{"location":"release-notes/#Version-[v0.27.14](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v0.27.14)-2022-03-02","page":"Release notes","title":"Version v0.27.14 - 2022-03-02","text":"","category":"section"},{"location":"release-notes/#Fixed-23","page":"Release notes","title":"Fixed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Fix a CSS bug causing REPL code blocks to contain extraneous whitespace. (#1770, #1771)","category":"page"},{"location":"release-notes/#Version-[v0.27.13](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v0.27.13)-2022-02-25","page":"Release notes","title":"Version v0.27.13 - 2022-02-25","text":"","category":"section"},{"location":"release-notes/#Fixed-24","page":"Release notes","title":"Fixed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Fix a CSS bug causing the location of the code copy button to not be fixed in the upper right corner. (#1758, #1759)\nFix a bug when loading the copy.js script for the code copy button. (#1760, #1762)","category":"page"},{"location":"release-notes/#Version-[v0.27.12](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v0.27.12)-2022-01-17","page":"Release notes","title":"Version v0.27.12 - 2022-01-17","text":"","category":"section"},{"location":"release-notes/#Fixed-25","page":"Release notes","title":"Fixed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Fix code copy button in insecure contexts (e.g. pages hosted without https). (#1754)","category":"page"},{"location":"release-notes/#Version-[v0.27.11](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v0.27.11)-2022-01-16","page":"Release notes","title":"Version v0.27.11 - 2022-01-16","text":"","category":"section"},{"location":"release-notes/#Added-14","page":"Release notes","title":"Added","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Documenter now deploys documentation from manually triggered events (workflow_dispatch on GitHub actions). (#1554, #1752)\nMathJax 3 has been updated to v3.2.0 (minor version bump). (#1743)\nHTML code blocks now have a copy button. (#1748)\nDocumenter now tries to detect the development branch using git with the old default (master) as fallback. If you use main as the development branch you shouldn't need to specify devbranch = \"main\" as an argument to deploydocs anymore. (#1443, #1727, #1751)","category":"page"},{"location":"release-notes/#Version-[v0.27.10](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v0.27.10)-2021-10-20","page":"Release notes","title":"Version v0.27.10 - 2021-10-20","text":"","category":"section"},{"location":"release-notes/#Fixed-26","page":"Release notes","title":"Fixed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Fix depth of headers in LaTeXWriter. (#1716)","category":"page"},{"location":"release-notes/#Version-[v0.27.9](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v0.27.9)-2021-10-18","page":"Release notes","title":"Version v0.27.9 - 2021-10-18","text":"","category":"section"},{"location":"release-notes/#Fixed-27","page":"Release notes","title":"Fixed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Fix some errors with text/latex MIME type in LaTeXWriter. (#1709)","category":"page"},{"location":"release-notes/#Version-[v0.27.8](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v0.27.8)-2021-10-14","page":"Release notes","title":"Version v0.27.8 - 2021-10-14","text":"","category":"section"},{"location":"release-notes/#Added-15","page":"Release notes","title":"Added","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"The keyword argument strict in makedocs is more flexible: in addition to a boolean indicating whether or not any error should result in a failure, strict also accepts a Symbol or Vector{Symbol} indicating which error(s) should result in a build failure. (#1689)\nAllow users to inject custom JavaScript resources to enable alternatives to Google Analytics like plausible.io. (#1706)","category":"page"},{"location":"release-notes/#Fixed-28","page":"Release notes","title":"Fixed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Fix a few accessibility issues in the HTML output. (#1673)","category":"page"},{"location":"release-notes/#Version-[v0.27.7](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v0.27.7)-2021-09-27","page":"Release notes","title":"Version v0.27.7 - 2021-09-27","text":"","category":"section"},{"location":"release-notes/#Fixed-29","page":"Release notes","title":"Fixed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Fix an error when building documentation for the first time with push_preview. (#1693, #1704)\nFix a rare logger error for failed doctests. (#1698, #1699)\nFix an error occurring with DocTestFilters = nothing in @meta blocks. (#1696)","category":"page"},{"location":"release-notes/#Version-[v0.27.6](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v0.27.6)-2021-09-07","page":"Release notes","title":"Version v0.27.6 - 2021-09-07","text":"","category":"section"},{"location":"release-notes/#Added-16","page":"Release notes","title":"Added","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Add support for generating index.html to redirect to dev or stable. The redirected destination is the same as the outdated warning. If there's already user-generated index.html, Documenter will not overwrite the file. (#937, #1657, #1658)","category":"page"},{"location":"release-notes/#Fixed-30","page":"Release notes","title":"Fixed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Checking whether a PR comes from the correct repository when deciding to deploy a preview on GitHub Actions now works on Julia 1.0 too. (#1665)\nWhen a doctest fails, pass file and line information associated to the location of the doctest instead of the location of the testing code in Documenter to the logger. (#1687)\nEnabled colored printing for each output of @repl-blocks. (#1691)","category":"page"},{"location":"release-notes/#Version-[v0.27.5](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v0.27.5)-2021-07-27","page":"Release notes","title":"Version v0.27.5 - 2021-07-27","text":"","category":"section"},{"location":"release-notes/#Fixed-31","page":"Release notes","title":"Fixed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Fix an error introduced in version v0.27.4 (PR(#1634) which was triggered by trailing comments in @eval/@repl/@example blocks. (#1655, #1661)","category":"page"},{"location":"release-notes/#Version-[v0.27.4](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v0.27.4)-2021-07-19","page":"Release notes","title":"Version v0.27.4 - 2021-07-19","text":"","category":"section"},{"location":"release-notes/#Added-17","page":"Release notes","title":"Added","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"@example- and @repl-blocks now support colored output by mapping ANSI escape sequences to HTML. This requires Julia >= 1.6 and passing ansicolor=true to Documenter.HTML (e.g. makedocs(format=Documenter.HTML(ansicolor=true, ...), ...)). In Documenter 0.28.0 this will be the default so to (preemptively) opt-out pass ansicolor=false. (#1441, #1628, #1629, #1647)\nExperimental Documenter's HTML output can now prerender syntax highlighting of code blocks, i.e. syntax highlighting is applied when generating the HTML page rather than on the fly in the browser after the page is loaded. This requires (i) passing prerender=true to Documenter.HTML and (ii) a node (NodeJS) executable available in PATH. A path to a node executable can be specified by passing the node keyword argument to Documenter.HTML (for example from the NodeJS_16_jll Julia package). In addition, the highlightjs keyword argument can be used to specify a file path to a highlight.js library (if this is not given the release used by Documenter will be used). Example configuration:\nusing Documenter, NodeJS_16_jll\n\nmakedocs(;\n    format = Documenter.HTML(\n        prerender = true,            # enable prerendering\n        node = NodeJS_16_jll.node(), # specify node executable (required if not available in PATH)\n        # ...\n    )\n    # ...\n)\nThis feature is experimental and subject to change in future releases. (#1627)\nThe julia> prompt is now colored in green in the julia-repl language highlighting. (#1639, #1641)\nThe .hljs CSS class is now added to all code blocks to make sure that the correct text color is used for non-highlighted code blocks and if JavaScript is disabled. (#1645)\nThe sandbox module used for evaluating @repl and @example blocks is now removed (replaced with Main) in text output. (#1633)\n@repl, @example, and @eval blocks now have LineNumberNodes inserted such that e.g. @__FILE__ and @__LINE__ give better output and not just \"none\" for the file and 1 for the line. This requires Julia 1.6 or higher (no change on earlier Julia versions). (#1634)","category":"page"},{"location":"release-notes/#Fixed-32","page":"Release notes","title":"Fixed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Dollar signs in the HTML output no longer get accidentally misinterpreted as math delimiters in the browser. (#890, #1625)\nFix overflow behavior for math environments to hide unnecessary vertical scrollbars. (#1575, #1649)","category":"page"},{"location":"release-notes/#Version-[v0.27.3](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v0.27.3)-2021-06-29","page":"Release notes","title":"Version v0.27.3 - 2021-06-29","text":"","category":"section"},{"location":"release-notes/#Added-18","page":"Release notes","title":"Added","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Documenter can now deploy documentation directly to the \"root\" instead of versioned folders. (#1615, #1616)\nThe version of Documenter used for generating a document is now displayed in the build information. (#1609, #1611)","category":"page"},{"location":"release-notes/#Fixed-33","page":"Release notes","title":"Fixed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"The HTML front end no longer uses ligatures when displaying code (with JuliaMono). (#1610, #1617)","category":"page"},{"location":"release-notes/#Version-[v0.27.2](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v0.27.2)-2021-06-18","page":"Release notes","title":"Version v0.27.2 - 2021-06-18","text":"","category":"section"},{"location":"release-notes/#Added-19","page":"Release notes","title":"Added","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"The default font has been changed to Lato Medium so that the look of the text would be closer to the old Google Fonts version of Lato. (#1602, #1604)","category":"page"},{"location":"release-notes/#Version-[v0.27.1](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v0.27.1)-2021-06-17","page":"Release notes","title":"Version v0.27.1 - 2021-06-17","text":"","category":"section"},{"location":"release-notes/#Added-20","page":"Release notes","title":"Added","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"The HTML output now uses JuliaMono as the default monospace font, retrieved from CDNJS. Relatedly, the Lato font is also now retrieved from CDNJS, and the generated HTML pages no longer depend on Google Fonts. (#618, #1561, #1568, #1569), JuliaLang/www.julialang.org\nThe wording of the text in the the old version warning box was improved. (#1595)","category":"page"},{"location":"release-notes/#Fixed-34","page":"Release notes","title":"Fixed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Documenter no longer throws an error when generating the version selector if there are no deployed versions. (#1594, #1596)","category":"page"},{"location":"release-notes/#Version-[v0.27.0](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v0.27.0)-2021-06-11","page":"Release notes","title":"Version v0.27.0 - 2021-06-11","text":"","category":"section"},{"location":"release-notes/#Added-21","page":"Release notes","title":"Added","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"The JS dependencies have been updated to their respective latest versions.\nhighlight.js has been updated to v11.0.1 (major version bump), which also brings various updates to the highlighting of Julia code. Due to the changes in highlight.js, code highlighting will not work on IE11. (#1503, #1551, #1590)\nHeadroom.js has been updated to v0.12.0 (major version bump). (#1590)\nKaTeX been updated to v0.13.11 (major version bump). (#1590)\nMathJax versions have been updated to v2.7.7 (patch version bump) and v3.1.4 (minor version bump), for MathJax 2 and 3, respectively. (#1590)\njQuery been updated to v3.6.0 (minor version bump). (#1590)\nFont Awesome has been updated to v5.15.3 (patch version bump). (#1590)\nlunr.js has been updated to v2.3.9 (patch version bump). (#1590)\nlodash.js has been updated to v4.17.21 (patch version bump). (#1590)\ndeploydocs now throws an error if something goes wrong with the Git invocations used to deploy to gh-pages. (#1529)\nIn the HTML output, the site name at the top of the sidebar now also links back to the main page of the documentation (just like the logo). (#1553)\nThe generated HTML sites can now detect if the version the user is browsing is not for the latest version of the package and display a notice box to the user with a link to the latest version. In addition, the pages get a noindex tag which should aid in removing outdated versions from search engine results. (#1302, #1449, #1577)\nThe analytics in the HTML output now use the gtag.js script, replacing the old deprecated setup. (#1559)","category":"page"},{"location":"release-notes/#Fixed-35","page":"Release notes","title":"Fixed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"A bad repo argument to deploydocs containing a protocol now throws an error instead of being misinterpreted. (#1531, #1533)\nSVG images generated by @example blocks are now properly scaled to page width by URI-encoding the images, instead of directly embedding the SVG tags into the HTML. (#1537, #1538)\ndeploydocs no longer tries to deploy pull request previews from forks on GitHub Actions. (#1534, #1567)","category":"page"},{"location":"release-notes/#Other-4","page":"Release notes","title":"Other","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Documenter is no longer compatible with IOCapture v0.1 and now requires IOCapture v0.2. (#1549)","category":"page"},{"location":"release-notes/#Version-[v0.26.3](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v0.26.3)-2021-03-02","page":"Release notes","title":"Version v0.26.3 - 2021-03-02","text":"","category":"section"},{"location":"release-notes/#Fixed-36","page":"Release notes","title":"Fixed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"The internal naming of the temporary modules used to run doctests changed to accommodate upcoming printing changes in Julia. (JuliaLang/julia#39841, #1540)","category":"page"},{"location":"release-notes/#Version-[v0.26.2](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v0.26.2)-2021-02-15","page":"Release notes","title":"Version v0.26.2 - 2021-02-15","text":"","category":"section"},{"location":"release-notes/#Added-22","page":"Release notes","title":"Added","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"doctest() no longer throws an error if cleaning up the temporary directory fails for some reason. (#1513, #1526)\nCosmetic improvements to the PDF output. (#1342, #1527)\nIf jldoctest keyword arguments fail to parse, these now get logged as doctesting failures, rather than being ignored with a warning or making makedocs throw an error (depending on why they fail to parse). (#1556, #1557)","category":"page"},{"location":"release-notes/#Fixed-37","page":"Release notes","title":"Fixed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Script-type doctests that have an empty output section no longer crash Documenter. (#1510)\nWhen checking for authentication keys when deploying, Documenter now more appropriately checks if the environment variables are non-empty, rather than just whether they are defined. (#1511)\nDoctests now correctly handle the case when the repository has been checked out with CRLF line endings (which can happen on Windows with core.autocrlf=true). (#1516, #1519, #1520)\nMultiline equations are now correctly handled in at-block outputs. (#1518)","category":"page"},{"location":"release-notes/#Version-[v0.26.1](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v0.26.1)-2020-12-16","page":"Release notes","title":"Version v0.26.1 - 2020-12-16","text":"","category":"section"},{"location":"release-notes/#Fixed-38","page":"Release notes","title":"Fixed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"HTML assets that are copied directly from Documenters source to the build output now has correct file permissions. (#1497)","category":"page"},{"location":"release-notes/#Version-[v0.26.0](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v0.26.0)-2020-12-10","page":"Release notes","title":"Version v0.26.0 - 2020-12-10","text":"","category":"section"},{"location":"release-notes/#Breaking-2","page":"Release notes","title":"Breaking","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"The PDF/LaTeX output is again provided as a Documenter built-in and can be enabled by passing an instance of Documenter.LaTeX to format. The DocumenterLaTeX package has been deprecated. (#1493)\nFor upgrading: If using the PDF/LaTeX output, change the format argument of makedocs to format = Documenter.LaTeX(...) and remove all references to the DocumenterLaTeX package (e.g. from docs/Project.toml).","category":"page"},{"location":"release-notes/#Added-23","page":"Release notes","title":"Added","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Objects that render as equations and whose text/latex representations are wrapped in display equation delimiters \\[ ... \\] or $$ ... $$ are now handled correctly in the HTML output. (#1278, #1283, #1426)\nThe search page in the HTML output now shows the page titles in the search results. (#1468)\nThe HTML front end now respects the user's OS-level dark theme preference (determined via the prefers-color-scheme: dark media query). (#1320, #1456)\nHTML output now bails early if there are no pages, instead of throwing an UndefRefError. In addition, it will also warn if index.md is missing and it is not able to generate the main landing page (index.html). (#1201, #1491)\ndeploydocs now prints a warning on GitHub Actions, Travis CI and Buildkite if the current branch is main, but devbranch = \"master, which indicates a possible Documenter misconfiguration due to GitHub changing the default primary branch of a repository to main. (#1489)","category":"page"},{"location":"release-notes/#Version-[v0.25.5](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v0.25.5)-2020-11-23","page":"Release notes","title":"Version v0.25.5 - 2020-11-23","text":"","category":"section"},{"location":"release-notes/#Fixed-39","page":"Release notes","title":"Fixed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"In the HTML output, display equations that are wider than the page now get a scrollbar instead of overflowing. (#1470, #1476)","category":"page"},{"location":"release-notes/#Version-[v0.25.4](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v0.25.4)-2020-11-19","page":"Release notes","title":"Version v0.25.4 - 2020-11-19","text":"","category":"section"},{"location":"release-notes/#Added-24","page":"Release notes","title":"Added","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Documenter can now deploy from Buildkite CI to GitHub Pages with Documenter.Buildkite. (#1469)\nDocumenter now support Azure DevOps Repos URL scheme when generating edit and source links pointing to the repository. (#1462, #1463, #1471)","category":"page"},{"location":"release-notes/#Fixed-40","page":"Release notes","title":"Fixed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Type aliases of Unions (e.g. const MyAlias = Union{Foo,Bar}) are now correctly listed as \"Type\" in docstrings. (#1466, #1474)\nHTMLWriter no longer prints a warning when encountering mailto: URLs in links. (#1472)","category":"page"},{"location":"release-notes/#Version-[v0.25.3](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v0.25.3)-2020-10-28","page":"Release notes","title":"Version v0.25.3 - 2020-10-28","text":"","category":"section"},{"location":"release-notes/#Added-25","page":"Release notes","title":"Added","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Documenter can now deploy from GitLab CI to GitHub Pages with Documenter.GitLab. (#1448)\nThe URL to the MathJax JS module can now be customized by passing the url keyword argument to the constructors (MathJax2, MathJax3). (#1428, #1430)","category":"page"},{"location":"release-notes/#Fixed-41","page":"Release notes","title":"Fixed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Documenter.doctest now correctly accepts the doctestfilters keyword, similar to Documenter.makedocs. (#1364, #1435)\nThe Selectors.dispatch function now uses a cache to avoid calling subtypes on selectors multiple times during a makedocs call to avoid slowdowns due to [subtypes being slow][julia-38079]. (#1438, #1440, #1452)","category":"page"},{"location":"release-notes/#Version-[v0.25.2](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v0.25.2)-2020-08-18","page":"Release notes","title":"Version v0.25.2 - 2020-08-18","text":"","category":"section"},{"location":"release-notes/#Deprecated","page":"Release notes","title":"Deprecated","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"The Documenter.MathJax type, used to specify the mathematics rendering engine in the HTML output, is now deprecated in favor of Documenter.MathJax2. (#1362, #1367)\nFor upgrading: simply replace MathJax with MathJax2. I.e. instead of\nmakedocs(\n    format = Documenter.HTML(mathengine = Documenter.MathJax(...), ...),\n    ...\n)\nyou should have\nmakedocs(\n    format = Documenter.HTML(mathengine = Documenter.MathJax2(...), ...),\n    ...\n)","category":"page"},{"location":"release-notes/#Added-26","page":"Release notes","title":"Added","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"It is now possible to use MathJax v3 as the mathematics rendering in the HTML output. This can be done by passing Documenter.MathJax3 as the mathengine keyword to HTML. (#1362, #1367)\nThe deployment commits created by Documenter are no longer signed by the @zeptodoctor user, but rather with the non-existing documenter@juliadocs.github.io email address. (#1379, #1388)","category":"page"},{"location":"release-notes/#Fixed-42","page":"Release notes","title":"Fixed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"REPL doctest output lines starting with # right after the input code part are now correctly treated as being part of the output (unless prepended with 7 spaces, in line with the standard heuristic). (#1369)\nDocumenter now throws away the extra information from the info string of a Markdown code block (i.e. `language extra-info), to correctly determine the language, which should be a single word. (#1392, #1400)\nDocumenter now works around a Julia 1.5.0 regression (JuliaLang/julia#36953) which broke doctest fixing if the original doctest output was empty. (#1337, #1389)","category":"page"},{"location":"release-notes/#Version-[v0.25.1](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v0.25.1)-2020-07-21","page":"Release notes","title":"Version v0.25.1 - 2020-07-21","text":"","category":"section"},{"location":"release-notes/#Added-27","page":"Release notes","title":"Added","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"When automatically determining the page list (i.e. pages is not passed to makedocs), Documenter now lists index.md before other pages. (#1355)\nThe output text boxes of @example blocks are now style differently from the code blocks, to make it easier to visually distinguish between the input and output. (#1026, #1357, #1360)\nThe generated HTML site now displays a footer by default that mentions Julia and Documenter. This can be customized or disabled by passing the footer keyword to Documeter.HTML. (#1184, #1365)\nWarnings that cause makedocs to error when strict=true are now printed as errors when strict is set to true. (#1088, #1349)","category":"page"},{"location":"release-notes/#Fixed-43","page":"Release notes","title":"Fixed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"In the PDF/LaTeX output, equations that use the align or align* environment are no longer further wrapped in equation*/split. (#1368)","category":"page"},{"location":"release-notes/#Version-[v0.25.0](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v0.25.0)-2020-06-30","page":"Release notes","title":"Version v0.25.0 - 2020-06-30","text":"","category":"section"},{"location":"release-notes/#Added-28","page":"Release notes","title":"Added","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"When deploying with deploydocs, any SSH username can now be used (not just git), by prepending username@ to the repository URL in the repo argument. (#1285)\nThe first link fragment on each page now omits the number; before the rendering resulted in: #foobar-1, #foobar-2, and now: #foobar, #foobar-2. For backwards compatibility the old fragments are also inserted such that old links will still point to the same location. (#1292)\nWhen deploying on CI with deploydocs, the build information in the version number (i.e. what comes after +) is now discarded when determining the destination directory. This allows custom tags to be used to fix documentation build and deployment issues for versions that have already been registered. (#1298)\nYou can now optionally choose to push pull request preview builds to a different branch and/or different repository than the main docs builds, by setting the optional branch_previews and/or repo_previews keyword arguments to the deploydocs function. Also, you can now optionally choose to use a different SSH key for preview builds, by setting the optional DOCUMENTER_KEY_PREVIEWS environment variable; if the DOCUMENTER_KEY_PREVIEWS environment variable is not set, then the regular DOCUMENTER_KEY environment variable will be used. (#1307, #1310, #1315)\nThe LaTeX/PDF backend now supports the platform=\"none\" keyword, which outputs only the TeX source files, rather than a compiled PDF. (#1338, #1339)\nLinkcheck no longer prints a warning when encountering a 302 Found temporary redirect. (#1344, #1345)","category":"page"},{"location":"release-notes/#Fixed-44","page":"Release notes","title":"Fixed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Deps.pip is again a closure and gets executed during the deploydocs call, not before it. (#1240)\nCustom assets (CSS, JS etc.) for the HTML build are now again included as the very last elements in the <head> tag so that it would be possible to override default the default assets. (#1328)\nDocstrings from @autodocs blocks are no longer sorted according to an undocumented rule where exported names should come before unexported names. Should this behavior be necessary, the @autodocs can be replaced by two separate blocks that use the Public and Private options to filter out the unexported or exported docstrings in the first or the second block, respectively. (#964, #1323)","category":"page"},{"location":"release-notes/#Version-[v0.24.11](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v0.24.11)-2020-05-06","page":"Release notes","title":"Version v0.24.11 - 2020-05-06","text":"","category":"section"},{"location":"release-notes/#Fixed-45","page":"Release notes","title":"Fixed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Some sections and page titles that were missing from the search results in the HTML backend now show up. (#1311)","category":"page"},{"location":"release-notes/#Version-[v0.24.10](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v0.24.10)-2020-04-26","page":"Release notes","title":"Version v0.24.10 - 2020-04-26","text":"","category":"section"},{"location":"release-notes/#Added-29","page":"Release notes","title":"Added","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"The curl timeout when checking remote links is now configurable with the linkcheck_timeout keyword. (#1057, #1295)","category":"page"},{"location":"release-notes/#Fixed-46","page":"Release notes","title":"Fixed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Special characters are now properly escaped in admonition titles in LaTeX/PDF builds and do not cause the PDF build to fail anymore. (#1299)","category":"page"},{"location":"release-notes/#Version-[v0.24.9](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v0.24.9)-2020-04-15","page":"Release notes","title":"Version v0.24.9 - 2020-04-15","text":"","category":"section"},{"location":"release-notes/#Fixed-47","page":"Release notes","title":"Fixed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Canonical URLs are now properly prettified (e.g. /path/ instead of /path/index.html) when using prettyurls=true. (#1293)","category":"page"},{"location":"release-notes/#Version-[v0.24.8](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v0.24.8)-2020-04-13","page":"Release notes","title":"Version v0.24.8 - 2020-04-13","text":"","category":"section"},{"location":"release-notes/#Added-30","page":"Release notes","title":"Added","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Non-standard admonition categories are (again) applied to the admonition <div> elements in HTML output (as is-category-$category). (#1279, #1280)","category":"page"},{"location":"release-notes/#Version-[v0.24.7](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v0.24.7)-2020-03-23","page":"Release notes","title":"Version v0.24.7 - 2020-03-23","text":"","category":"section"},{"location":"release-notes/#Fixed-48","page":"Release notes","title":"Fixed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Remove only, a new export from Base on Julia 1.4, from the JS search filter. (#1264)\nFix errors in LaTeX builds due to bad escaping of certain characters. (#1118, #1119, #1200, #1269)","category":"page"},{"location":"release-notes/#Version-[v0.24.6](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v0.24.6)-2020-03-12","page":"Release notes","title":"Version v0.24.6 - 2020-03-12","text":"","category":"section"},{"location":"release-notes/#Added-31","page":"Release notes","title":"Added","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Reorganize some of the internal variables in Documenter's Sass sources, to make it easier to create custom themes on top of the Documenter base theme. (#1258)","category":"page"},{"location":"release-notes/#Version-[v0.24.5](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v0.24.5)-2020-01-31","page":"Release notes","title":"Version v0.24.5 - 2020-01-31","text":"","category":"section"},{"location":"release-notes/#Added-32","page":"Release notes","title":"Added","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Documenter now correctly emulates the \"REPL softscope\" (Julia 1.5) in REPL-style doctest blocks and @repl blocks. (#1232)","category":"page"},{"location":"release-notes/#Version-[v0.24.4](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v0.24.4)-2020-01-18","page":"Release notes","title":"Version v0.24.4 - 2020-01-18","text":"","category":"section"},{"location":"release-notes/#Added-33","page":"Release notes","title":"Added","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Change the inline code to less distracting black color in the HTML light theme. (#1212, #1222)\nAdd the ability specify the lang attribute of the html tag in the HTML output, to better support documentation pages in other languages. By default Documenter now defaults to lang=\"en\". (#1223)","category":"page"},{"location":"release-notes/#Version-[v0.24.3](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v0.24.3)-2019-12-16","page":"Release notes","title":"Version v0.24.3 - 2019-12-16","text":"","category":"section"},{"location":"release-notes/#Fixed-49","page":"Release notes","title":"Fixed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Fix a case where Documenter's deployment would fail due to git picking up the wrong ssh config file on non-standard systems. (#1216)","category":"page"},{"location":"release-notes/#Version-[v0.24.2](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v0.24.2)-2019-11-26","page":"Release notes","title":"Version v0.24.2 - 2019-11-26","text":"","category":"section"},{"location":"release-notes/#Other-5","page":"Release notes","title":"Other","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Improvements to logging in deploydocs. (#1195)","category":"page"},{"location":"release-notes/#Version-[v0.24.1](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v0.24.1)-2019-11-25","page":"Release notes","title":"Version v0.24.1 - 2019-11-25","text":"","category":"section"},{"location":"release-notes/#Fixed-50","page":"Release notes","title":"Fixed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Fix a bad mktempdir incantation in LaTeXWriter. (#1194)","category":"page"},{"location":"release-notes/#Version-[v0.24.0](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v0.24.0)-2019-11-22","page":"Release notes","title":"Version v0.24.0 - 2019-11-22","text":"","category":"section"},{"location":"release-notes/#Breaking-3","page":"Release notes","title":"Breaking","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Documenter no longer creates a symlink between the old latest url to specified devurl. (#1151)\nFor upgrading: Make sure that links to the latest documentation have been updated (e.g. the package README).\nThe deprecated makedocs keywords (html_prettyurls, html_disable_git, html_edit_branch, html_canonical, assets, analytics) have been removed. (#1107)\nFor upgrading: Pass the corresponding values to the HTML constructor when settings the format keyword.","category":"page"},{"location":"release-notes/#Deprecated-2","page":"Release notes","title":"Deprecated","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"The edit_branch keyword to Documenter.HTML has been deprecated in favor of the new edit_link keyword. As a new feature, passing edit_link = nothing disables the \"Edit on GitHub\" links altogether. (#1173)\nFor upgrading: If using edit_branch = nothing, use edit_link = :commit instead. If passing a String to edit_branch, pass that to edit_link instead.","category":"page"},{"location":"release-notes/#Added-34","page":"Release notes","title":"Added","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Documenter can now deploy preview documentation from pull requests (with head branch in the same repository, i.e. not from forks). This is enabled by passing push_preview=true to deploydocs. (#1180)\nDeployment is now more customizable and thus not as tied to Travis CI as before. (#1147, #1171, #1180)\nDocumenter now has builtin support for deploying from GitHub Actions. Documenter will autodetect the running system, unless explicitly specified. (#1144, #1152)\nWhen using GitHub Actions Documenter will (try to) post a GitHub status with a link to the generated documentation. This is especially useful for pull request preview builds (see above). (#1186)\nThe Documenter HTML front end now uses KaTeX as the default math rendering engine. (#1097)\nPossible breakage: This may break the rendering of equations that use some more esoteric features that are only supported in MathJax. It is possible to switch back to MathJax by passing mathengine = Documenter.MathJax() to the HTML constructor in the format keyword.\nThe HTML front end generated by Documenter has been redesigned and now uses the Bulma CSS framework. (#1043)\nPossible breakage: Packages overriding the default Documenter CSS file, relying on some external CSS or relying on Documenter's CSS working in a particular way will not build correct-looking sites. Custom themes should now be developed as Sass files and compiled together with the Documenter and Bulma Sass dependencies (under assets/html/scss).\nThe handling of JS and CSS assets is now more customizable:\nThe asset function can now be used to declare remote JS and CSS assets in the assets keyword. (#1108)\nThe highlights keyword to HTML can be used to declare additional languages that should be highlighted in code blocks. (#1094)\nIt is now possible to choose between MathJax and KaTeX as the math rendering engine with the mathengine keyword to HTML and to set their configuration in the make.jl script directly. (#1097)\nThe JS and CSS dependencies of the front end have been updated to the latest versions. (#1189)\nDisplaying of the site name at the top of the sidebar can now be disabled by passing sidebar_sitename = false to HTML in the format keyword. (#1089)\nFor deployments that have Google Analytics enabled, the URL fragment (i.e. the in-page # target) also stored in analytics. (#1121)\nPage titles are now boosted in the search, yielding better search results. (#631, #1112, #1113)\nIn the PDF/LaTeX output, images that are wider than the text are now being scaled down to text width automatically. The PDF builds now require the adjustbox LaTeX package to be available. (#1137)\nIf the TeX compilation fails for the PDF/LaTeX output, makedocs now throws an exception. (#1166)","category":"page"},{"location":"release-notes/#Fixed-51","page":"Release notes","title":"Fixed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"LaTeXWriter now outputs valid LaTeX if an @contents block is nested by more than two levels, or if @contents or @index blocks do not contain any items. (#1166)","category":"page"},{"location":"release-notes/#Version-[v0.23.4](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v0.23.4)-2019-10-09","page":"Release notes","title":"Version v0.23.4 - 2019-10-09","text":"","category":"section"},{"location":"release-notes/#Fixed-52","page":"Release notes","title":"Fixed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"The include and eval functions are also available in @setup blocks now. (#1148, #1153)","category":"page"},{"location":"release-notes/#Version-[v0.23.3](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v0.23.3)-2019-08-28","page":"Release notes","title":"Version v0.23.3 - 2019-08-28","text":"","category":"section"},{"location":"release-notes/#Fixed-53","page":"Release notes","title":"Fixed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Fix file permission error when Pkg.testing Documenter. (#1115)","category":"page"},{"location":"release-notes/#Version-[v0.23.2](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v0.23.2)-2019-08-04","page":"Release notes","title":"Version v0.23.2 - 2019-08-04","text":"","category":"section"},{"location":"release-notes/#Fixed-54","page":"Release notes","title":"Fixed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Empty Markdown headings no longer cause Documenter to crash. (#1081, #1082)","category":"page"},{"location":"release-notes/#Version-[v0.23.1](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v0.23.1)-2019-07-28","page":"Release notes","title":"Version v0.23.1 - 2019-07-28","text":"","category":"section"},{"location":"release-notes/#Fixed-55","page":"Release notes","title":"Fixed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Documenter no longer throws an error if the provided EditURL argument is missing. (#1076, #1077)\nNon-standard Markdown AST nodes no longer cause Documenter to exit with a missing method error in doctesting and HTML output. Documenter falls back to repr() for such nodes. (#1073, #1075)\nDocstrings parsed into nested Markdown.MD objects are now unwrapped correctly and do not cause Documenter to crash with a missing method error anymore. The user can run into that when reusing docstrings with the @doc @doc(foo) function bar end pattern. (#1075)","category":"page"},{"location":"release-notes/#Version-[v0.23.0](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v0.23.0)-2019-07-18","page":"Release notes","title":"Version v0.23.0 - 2019-07-18","text":"","category":"section"},{"location":"release-notes/#Version-changes-2","page":"Release notes","title":"Version changes","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Documenter v0.23 requires Julia v1.0. (#1015)","category":"page"},{"location":"release-notes/#Breaking-4","page":"Release notes","title":"Breaking","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"DocTestSetups that are defined in @meta blocks no longer apply to doctests that are in docstrings. (#774)\nSpecifically, the pattern where @docs or @autodocs blocks were surrounded by @meta blocks, setting up a shared DocTestSetup for many docstrings, no longer works.\nDocumenter now exports the DocMeta module, which provides an alternative way to add DocTestSetup to docstrings.\nFor upgrading: Use DocMeta.setdocmeta! in make.jl to set up a DocTestSetup that applies to all the docstrings in a particular module instead and, if applicable, remove the now redundant @meta blocks. See the \"Setup code\" section under \"Doctesting\" in the manual for more information.","category":"page"},{"location":"release-notes/#Added-35","page":"Release notes","title":"Added","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"makedocs now accepts the doctest = :only keyword, which allows doctests to be run while most other build steps, such as rendering, are skipped. This makes it more feasible to run doctests as part of the test suite (see the manual for more information). (#198, #535, #756, #774)\nDocumenter now exports the doctest function, which verifies the doctests in all the docstrings of a given module. This can be used to verify docstring doctests as part of test suite, or to fix doctests right in the REPL. (#198, #535, #756, #774, #1054)\nmakedocs now accepts the expandfirst argument, which allows specifying a set of pages that should be evaluated before others. (#1027, #1029)\nThe evaluation order of pages is now fixed (unless customized with expandfirst). The pages are evaluated in the alphabetical order of their file paths. (#1027, #1029)\nThe logo image in the HTML output will now always point to the first page in the navigation menu (as opposed to index.html, which may or may not exist). When using pretty URLs, the index.html part now omitted from the logo link URL. (#1005)\nMinor changes to how doctesting errors are printed. (#1028)\nVideos can now be included in the HTML output using the image syntax (![]()) if the file extension matches a known format (.webm, .mp4, .ogg, .ogm, .ogv, .avi). (#1034)\nThe PDF output now uses the DejaVu Sans  and DejaVu Sans Mono fonts to provide better Unicode coverage. (#803, #1066)\nExperimental The current working directory when evaluating @repl and @example blocks can now be set to a fixed directory by passing the workdir keyword to makedocs. The new keyword and its behaviour are experimental and not part of the public API. (#1013, #1025)","category":"page"},{"location":"release-notes/#Fixed-56","page":"Release notes","title":"Fixed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"The HTML output now outputs HTML files for pages that are not referenced in the pages keyword too (Documenter finds them according to their extension). But they do exists outside of the standard navigation hierarchy (as defined by pages). This fixes a bug where these pages could still be referenced by @ref links and @contents blocks, but in the HTML output, the links ended up being broken. (#1031, #1047)\nmakedocs now throws an error when the format objects (Documenter.HTML, LaTeX, Markdown) get passed positionally. The format types are no longer subtypes of Documenter.Plugin. (#1046, #1061)\nDoctesting now also handles doctests that contain invalid syntax and throw parsing errors. (#487, #1062)\nStacktraces in doctests that throw an error are now filtered more thoroughly, fixing an issue where too much of the stacktrace was included when doctest or makedocs was called from a more complicated context. (#1062)","category":"page"},{"location":"release-notes/#Version-[v0.22.6](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v0.22.6)-2019-07-18","page":"Release notes","title":"Version v0.22.6 - 2019-07-18","text":"","category":"section"},{"location":"release-notes/#Other-6","page":"Release notes","title":"Other","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Add DocStringExtensions 0.8 as an allowed dependency version. (#1071)","category":"page"},{"location":"release-notes/#Version-[v0.22.5](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v0.22.5)-2019-07-03","page":"Release notes","title":"Version v0.22.5 - 2019-07-03","text":"","category":"section"},{"location":"release-notes/#Fixed-57","page":"Release notes","title":"Fixed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Fix a test dependency problem revealed by a bugfix in Julia / Pkg. (#1037)","category":"page"},{"location":"release-notes/#Version-[v0.22.4](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v0.22.4)-2019-05-09","page":"Release notes","title":"Version v0.22.4 - 2019-05-09","text":"","category":"section"},{"location":"release-notes/#Fixed-58","page":"Release notes","title":"Fixed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Documenter no longer crashes if the build includes doctests from docstrings that are defined in files that do not exist on the file system (e.g. if a Julia Base docstring is included when running a non-source Julia build). (#1002)\nURLs for files in the repository are now generated correctly when the repository is used as a Git submodule in another repository. (#1000, #1004)\nWhen checking for omitted docstrings, Documenter no longer gives \"Package.Package missing\" type false positives. (#1009)\nmakedocs again exits with an error if strict=true and there is a doctest failure. (#1003, #1014)","category":"page"},{"location":"release-notes/#Version-[v0.22.3](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v0.22.3)-2019-04-12","page":"Release notes","title":"Version v0.22.3 - 2019-04-12","text":"","category":"section"},{"location":"release-notes/#Fixed-59","page":"Release notes","title":"Fixed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Fixed filepaths for images included in the .tex file for PDF output on Windows. (#999)","category":"page"},{"location":"release-notes/#Version-[v0.22.2](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v0.22.2)-2019-04-05","page":"Release notes","title":"Version v0.22.2 - 2019-04-05","text":"","category":"section"},{"location":"release-notes/#Fixed-60","page":"Release notes","title":"Fixed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Error reporting for meta-blocks now handles missing files gracefully instead of throwing. (#996)","category":"page"},{"location":"release-notes/#Added-36","page":"Release notes","title":"Added","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"The sitename keyword argument to deploydocs, which is required for the default HTML output, is now properly documented. (#995)","category":"page"},{"location":"release-notes/#Version-[v0.22.1](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v0.22.1)-2019-03-30","page":"Release notes","title":"Version v0.22.1 - 2019-03-30","text":"","category":"section"},{"location":"release-notes/#Fixed-61","page":"Release notes","title":"Fixed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Fixed a world-age related bug in doctests. (#994)","category":"page"},{"location":"release-notes/#Version-[v0.22.0](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v0.22.0)-2019-03-28","page":"Release notes","title":"Version v0.22.0 - 2019-03-28","text":"","category":"section"},{"location":"release-notes/#Deprecated-3","page":"Release notes","title":"Deprecated","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"The assets and analytics arguments to makedocs have been deprecated in favor of the corresponding arguments of the Documenter.HTML format plugin. (#953)\nFor upgrading: pass the corresponding arguments with the Documenter.HTML plugin instead. E.g. instead of\nmakedocs(\n    assets = ..., analytics = ...,\n    ...\n)\nyou should have\nmakedocs(\n    format = Documenter.HTML(assets = ..., analytics = ...),\n    ...\n)\nNote: It is technically possible to specify the same argument twice with different values by passing both variants. In that case the value passed to makedocs takes precedence.","category":"page"},{"location":"release-notes/#Added-37","page":"Release notes","title":"Added","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Documentation is no longer deployed on Travis CI cron jobs. (#917)\nLog messages from failed @meta, @docs, @autodocs, @eval, @example and @setup blocks now include information about the source location of the block. (#929)\nDocstrings from @docs-blocks are now included in the rendered docs even if some part(s) of the block failed. (#928, #935)\nThe Markdown and LaTeX output writers can now handle multimedia output, such as images, from @example blocks. All the writers now also handle text/markdown output, which is preferred over text/plain if available. (#938, #948)\nThe HTML output now also supports SVG, WebP, GIF and JPEG logos. (#953)\nReporting of failed doctests are now using the logging system to be consistent with the rest of Documenter's output. (#958)\nThe construction of the search index in the HTML output has been refactored to make it easier to use with other search backends in the future. The structure of the generated search index has also been modified, which can yield slightly different search results. Documenter now depends on the lightweight JSON.jl package. (#966)\nDocstrings that begin with an indented code block (such as a function signature) now have that block highlighted as Julia code by default. This behaviour can be disabled by passing highlightsig=false to makedocs. (#980)","category":"page"},{"location":"release-notes/#Fixed-62","page":"Release notes","title":"Fixed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Paths in include calls in @eval, @example, @repl and jldoctest blocks are now interpreted to be relative pwd, which is set to the output directory of the resulting file. (#941)\ndeploydocs and git_push now support non-github repos correctly and work when the .ssh directory does not already exist or the working directory contains spaces. (#971)\nTables now honor column alignment in the HTML output. If a column does not explicitly specify its alignment, the parser defaults to it being right-aligned, whereas previously all cells were left-aligned. (#511, #989)\nCode lines ending with # hide are now properly hidden for CRLF inputs. (#991)","category":"page"},{"location":"release-notes/#Version-[v0.21.5](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v0.21.5)-2019-02-22","page":"Release notes","title":"Version v0.21.5 - 2019-02-22","text":"","category":"section"},{"location":"release-notes/#Fixed-63","page":"Release notes","title":"Fixed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Deprecation warnings for format now get printed correctly when multiple formats are passed as a Vector. (#967)","category":"page"},{"location":"release-notes/#Version-[v0.21.4](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v0.21.4)-2019-02-16","page":"Release notes","title":"Version v0.21.4 - 2019-02-16","text":"","category":"section"},{"location":"release-notes/#Fixed-64","page":"Release notes","title":"Fixed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"A bug in jldoctest-blocks that, in rare cases, resulted in wrong output has been fixed. (#959, #960)","category":"page"},{"location":"release-notes/#Version-[v0.21.3](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v0.21.3)-2019-02-12","page":"Release notes","title":"Version v0.21.3 - 2019-02-12","text":"","category":"section"},{"location":"release-notes/#Security-2","page":"Release notes","title":"Security","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"The lunr.js and lodash JavaScript dependencies have been updated to their latest patch versions (from 2.3.1 to 2.3.5 and 4.17.4 to 4.17.11, respectively). This is in response to a vulnerability in lodash <4.17.11 (CVE-2018-16487). (#946)","category":"page"},{"location":"release-notes/#Version-[v0.21.2](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v0.21.2)-2019-02-06","page":"Release notes","title":"Version v0.21.2 - 2019-02-06","text":"","category":"section"},{"location":"release-notes/#Fixed-65","page":"Release notes","title":"Fixed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"linkcheck now handles servers that do not support HEAD requests and properly checks for status codes of FTP responses. (#934)","category":"page"},{"location":"release-notes/#Version-[v0.21.1](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v0.21.1)-2019-01-29","page":"Release notes","title":"Version v0.21.1 - 2019-01-29","text":"","category":"section"},{"location":"release-notes/#Fixed-66","page":"Release notes","title":"Fixed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"@repl blocks now work correctly together with quoted expressions. (#923, #926)\n@example, @repl and @eval blocks now handle reserved words, e.g. try/catch, correctly. (#886, #927)","category":"page"},{"location":"release-notes/#Version-[v0.21.0](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v0.21.0)-2018-12-11","page":"Release notes","title":"Version v0.21.0 - 2018-12-11","text":"","category":"section"},{"location":"release-notes/#Deprecated-4","page":"Release notes","title":"Deprecated","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"The symbol values to the format argument of makedocs (:html, :markdown, :latex) have been deprecated in favor of the Documenter.HTML, Markdown and LaTeX objects. The Markdown and LaTeX types are exported from the DocumenterMarkdown and DocumenterLaTeX packages, respectively. HTML output is still the default. (#891)\nFor upgrading: If you don't specify format (i.e. you rely on the default) you don't have to do anything. Otherwise update calls to makedocs to use struct instances instead of symbols, e.g.\nmakedocs(\n    format = :markdown\n)\nshould be changed to\nusing DocumenterMarkdown\nmakedocs(\n    format = Markdown()\n)\nThe html_prettyurls, html_canonical, html_disable_git and html_edit_branch arguments to makedocs have been deprecated in favor of the corresponding arguments of the Documenter.HTML format plugin. (#864, #891)\nFor upgrading: pass the corresponding arguments with the Documenter.HTML plugin instead. E.g. instead of\nmakedocs(\n    html_prettyurls = ..., html_canonical = ...,\n    ...\n)\nyou should have\nmakedocs(\n    format = Documenter.HTML(prettyurls = ..., canonical = ...),\n    ...\n)\nNote: It is technically possible to specify the same argument twice with different values by passing both variants. In that case the value to the deprecated `html*` variant takes precedence._","category":"page"},{"location":"release-notes/#Added-38","page":"Release notes","title":"Added","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Packages extending Documenter can now define subtypes of Documenter.Plugin, which can be passed to makedocs as positional arguments to pass options to the extensions. (#864)\n@autodocs blocks now support the Filter keyword, which allows passing a user-defined function that will filter the methods spliced in by the at-autodocs block. (#885)\nlinkcheck now supports checking URLs using the FTP protocol. (#879)\nBuild output logging has been improved and switched to the logging macros from Base. (#876)\nThe default documenter.sty LaTeX preamble now include \\usepackage{graphicx}. (#898)\ndeploydocs is now more helpful when it fails to interpret DOCUMENTER_KEY. It now also uses the BatchMode SSH option and throws an error instead of asking for a passphrase and timing out the Travis build when DOCUMENTER_KEY is broken. (#697, #907)\ndeploydocs now have a forcepush keyword argument that can be used to force-push the built documentation instead of adding a new commit. (#905)","category":"page"},{"location":"release-notes/#Version-[v0.20.0](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v0.20.0)-2018-10-27","page":"Release notes","title":"Version v0.20.0 - 2018-10-27","text":"","category":"section"},{"location":"release-notes/#Version-changes-3","page":"Release notes","title":"Version changes","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Documenter v0.20 requires at least Julia v0.7. (#795)","category":"page"},{"location":"release-notes/#Breaking-5","page":"Release notes","title":"Breaking","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"Documentation deployment via the deploydocs function has changed considerably.\nThe user-facing directories (URLs) of different versions and what gets displayed in the version selector have changed. By default, Documenter now creates the stable/ directory (as before) and a directory for every minor version (vX.Y/). The release-X.Y directories are no longer created. (#706, #813, #817)\nTechnically, Documenter now deploys actual files only to dev/ and vX.Y.Z/ directories. The directories (URLs) that change from version to version (e.g. latest/, vX.Y) are implemented as symlinks on the gh-pages branch.\nThe version selector will only display vX.Y/, stable/ and dev/ directories by default. This behavior can be customized with the versions keyword of deploydocs.\nDocumentation from the development branch (e.g. master) now deploys to dev/ by default (instead of latest/). This can be customized with the devurl keyword. (#802)\nThe latest keyword to deploydocs has been deprecated and renamed to devbranch. (#802)\nThe julia and osname keywords to deploydocs are now deprecated. (#816)\nThe default values of the target, deps and make keywords to deploydocs have been changed. See the default format change below for more information. (#826)\nFor upgrading:\nIf you are using the latest keyword, then just use devbranch with the same value instead.\nUpdate links that point to latest/ to point to dev/ instead (e.g. in the README).\nRemove any links to the release-X.Y branches and remove the directories from your gh-pages branch.\nThe operating system and Julia version should be specified in the Travis build stage configuration (via julia: and os: options, see \"Hosting Documentation\" in the manual for more details) or by checking the TRAVIS_JULIA_VERSION and TRAVIS_OS_NAME environment variables in make.jl yourself.\nmakedocs will now build Documenter's native HTML output by default and deploydocs' defaults now assume the HTML output. (#826)\nThe default value of the format keyword of makedocs has been changed to :html.\nThe default value of the target keyword to deploydocs has been changed to \"build\".\nThe default value of the make and deps keywords to deploydocs have been changed to nothing.\nFor upgrading: If you are relying on the Markdown/MkDocs output, you now need to:\nIn makedocs, explicitly set format = :markdown\nIn deploydocs, explicitly set\ntarget = \"site\"\ndeps = Deps.pip(\"pygments\", \"mkdocs\")\nmake = () -> run(`mkdocs build`)\nExplicitly import DocumenterMarkdown in make.jl. See the MarkdownWriter deprecation below.\nIf you already specify any of the changed keywords, then you do not need to make any changes to those keywords you already set.\nHowever, if you are setting any of the values to the new defaults (e.g. when you are already using the HTML output), you may now rely on the new defaults.\n\"Pretty URLs\" are enabled by default now for the HTML output. The default value of the html_prettyurls has been changed to true.\nFor a page foo/page.md Documenter now generates foo/page/index.html, instead of foo/page.html. On GitHub pages deployments it means that your URLs look like  foo/page/ instead of foo/page.html.\nFor local builds you should explicitly set html_prettyurls = false.\nFor upgrading: If you wish to retain the old behavior, set html_prettyurls = false in makedocs. If you already set html_prettyurls, you do not need to change anything.\nThe Travis.genkeys and Documenter.generate functions have been moved to a separate DocumenterTools.jl package. (#789)","category":"page"},{"location":"release-notes/#Deprecated-5","page":"Release notes","title":"Deprecated","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"The Markdown/MkDocs (format = :markdown) and PDF/LaTeX (format = :latex) outputs now require an external package to be loaded (DocumenterMarkdown and DocumenterLaTeX, respectively). (#833)\nFor upgrading: Make sure that the respective extra package is installed and then just add using DocumenterMarkdown or using DocumenterLaTeX to make.jl.","category":"page"},{"location":"release-notes/#Added-39","page":"Release notes","title":"Added","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"If Documenter is not able to determine which Git hosting service is being used to host the source, the \"Edit on XXX\" links become \"Edit source\" with a generic icon. (#804)\nThe at-blocks now support MIME\"text/html\" rendering of objects (e.g. for interactive plots). I.e. if a type has show(io, ::MIME\"text/html\", x) defined, Documenter now uses that when rendering the objects in the document. (#764)\nAddeds to the sidebar. When loading a page, the sidebar will jump to the current page now. Also, the scrollbar in WebKit-based browsers look less intrusive now. (#792, #854, #863)\nMinor style enhancements to admonitions. (#841)","category":"page"},{"location":"release-notes/#Fixed-67","page":"Release notes","title":"Fixed","text":"","category":"section"},{"location":"release-notes/","page":"Release notes","title":"Release notes","text":"The at-blocks that execute code can now handle include statements. (#793, #794)\nAt-docs blocks no longer give an error when containing empty lines. (#823, #824)","category":"page"},{"location":"lib/internals/deploydocs/","page":"Deploydocs","title":"Deploydocs","text":"CollapsedDocStrings = true","category":"page"},{"location":"lib/internals/deploydocs/#Deploydocs","page":"Deploydocs","title":"Deploydocs","text":"","category":"section"},{"location":"lib/internals/deploydocs/","page":"Deploydocs","title":"Deploydocs","text":"Documenter.gitrm_copy\nDocumenter.git_push\nDocumenter.user_host_upstream","category":"page"},{"location":"lib/internals/deploydocs/#Documenter.gitrm_copy","page":"Deploydocs","title":"Documenter.gitrm_copy","text":"gitrm_copy(src, dst)\n\nUses git rm -r to remove dst and then copies src to dst. Assumes that the working directory is within the git repository of dst is when the function is called.\n\nThis is to get around #507 on filesystems that are case-insensitive (e.g. on OS X, Windows). Without doing a git rm first, git add -A will not detect case changes in filenames.\n\n\n\n\n\n","category":"function"},{"location":"lib/internals/deploydocs/#Documenter.git_push","page":"Deploydocs","title":"Documenter.git_push","text":"git_push(\n    root, tmp, repo;\n    branch=\"gh-pages\", dirname=\"\", target=\"site\", sha=\"\",\n    cname=nothing, devurl=\"dev\",\n    deploy_config, subfolder\n)\n\nHandles pushing changes to the remote documentation branch. The documentation are placed in the folder specified by subfolder.\n\n\n\n\n\n","category":"function"},{"location":"lib/internals/deploydocs/#Documenter.user_host_upstream","page":"Deploydocs","title":"Documenter.user_host_upstream","text":"user_host_upstream(repo)\n\nDisassemble repo address into user, host, and path to repo. If no user is given, default to \"git\". Reassemble user, host and path into an upstream to git push to.\n\n\n\n\n\n","category":"function"},{"location":"lib/internals/documents/","page":"Documents","title":"Documents","text":"CollapsedDocStrings = true","category":"page"},{"location":"lib/internals/documents/#Documents","page":"Documents","title":"Documents","text":"","category":"section"},{"location":"lib/internals/documents/","page":"Documents","title":"Documents","text":"Modules = [Documenter]\nPages = [\"documents.jl\"]","category":"page"},{"location":"lib/internals/documents/#Documenter.Document","page":"Documents","title":"Documenter.Document","text":"Represents an entire document.\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/documents/#Documenter.Globals","page":"Documents","title":"Documenter.Globals","text":"Page-local values such as current module that are shared between nodes in a page.\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/documents/#Documenter.Internal","page":"Documents","title":"Documenter.Internal","text":"Private state used to control the generation process.\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/documents/#Documenter.LocalImage","page":"Documents","title":"Documenter.LocalImage","text":"Represents a reference to a local image. The path can be assumed to be an \"absolute\" path relative to the document root (i.e. src/ or build/ directories). See LocalLink for more details.\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/documents/#Documenter.LocalLink","page":"Documents","title":"Documenter.LocalLink","text":"Represents a reference to a local file. The path can be assumed to be an \"absolute\" path relative to the document root (i.e. src/ or build/ directories).\n\nIn the standard setup, when the documentation setup lives in docs/, with source files in docs/src, a link to the file docs/src/foo/bar.md would have path = \"foo/bar.md\".\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/documents/#Documenter.NavNode","page":"Documents","title":"Documenter.NavNode","text":"Element in the navigation tree of a document, containing navigation references to other page, reference to the Page object etc.\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/documents/#Documenter.Page","page":"Documents","title":"Documenter.Page","text":"Represents a single markdown file.\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/documents/#Documenter.User","page":"Documents","title":"Documenter.User","text":"User-specified values used to control the generation process.\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/documents/#Documenter.getplugin-Union{Tuple{T}, Tuple{Documenter.Document, Type{T}}} where T<:Documenter.Plugin","page":"Documents","title":"Documenter.getplugin","text":"Documenter.getplugin(doc::Document, T) -> Plugin\n\nRetrieves the object for the Plugin sub-type T stored in doc. If an object of type T was an element of the plugins list passed to makedocs, that object will be returned. Otherwise, a new T object will be created using the default constructor T(). Subsequent calls to getplugin(doc, T) return the same object.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/documents/#Documenter.is_strict-Tuple{Documenter.Document, Symbol}","page":"Documents","title":"Documenter.is_strict","text":"is_strict(::Document, val::Symbol) -> Bool\n\nInternal function to check if Documenter should throw an error or simply print a warning when hitting error condition.\n\nSingle-argument is_strict(strict) provides a curried function.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/documents/#Documenter.navpath-Tuple{Documenter.NavNode}","page":"Documents","title":"Documenter.navpath","text":"Constructs a list of the ancestors of the navnode (including the navnode itself), ordered so that the root of the navigation tree is the first and navnode itself is the last item.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/documents/#Documenter.populate!-Tuple{Documenter.Document}","page":"Documents","title":"Documenter.populate!","text":"populate!(document)\n\n\nPopulates the ContentsNodes and IndexNodes of the document with links.\n\nThis can only be done after all the blocks have been expanded (and nodes constructed), because the items have to exist before we can gather the links to those items.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/documents/#Documenter.relpath_from_remote_root-Tuple{Documenter.Document, AbstractString}","page":"Documents","title":"Documenter.relpath_from_remote_root","text":"relpath_from_remote_root(doc, path)\n\n\nReturns the the the remote that contains the file, and the relative path of the file within the repo (or nothing, nothing if the file is not in a known repo).\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/documents/#Documenter.shortcommit-Tuple{Documenter.RemoteRepository}","page":"Documents","title":"Documenter.shortcommit","text":"shortcommit(remoteref)\n\n\nReturns the first 5 characters of the current Git commit hash of the remote.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/docchecks/","page":"DocChecks","title":"DocChecks","text":"CollapsedDocStrings = true","category":"page"},{"location":"lib/internals/docchecks/#DocChecks","page":"DocChecks","title":"DocChecks","text":"","category":"section"},{"location":"lib/internals/docchecks/","page":"DocChecks","title":"DocChecks","text":"Modules = [Documenter]\nPages = [\"docchecks.jl\"]","category":"page"},{"location":"lib/internals/docchecks/#Documenter.footnotes-Tuple{Documenter.Document}","page":"DocChecks","title":"Documenter.footnotes","text":"footnotes(doc)\n\n\nChecks footnote links in a Document.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/docchecks/#Documenter.linkcheck-Tuple{Documenter.Document}","page":"DocChecks","title":"Documenter.linkcheck","text":"linkcheck(doc)\n\n\nChecks external links using curl.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/docchecks/#Documenter.missingdocs-Tuple{Documenter.Document}","page":"DocChecks","title":"Documenter.missingdocs","text":"missingdocs(doc)\n\n\nChecks that a Document contains all available docstrings that are defined in the modules keyword passed to makedocs.\n\nPrints out the name of each object that has not had its docs spliced into the document.\n\nReturns the number of missing bindings to allow for automated testing of documentation.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/utilities/","page":"Utilities","title":"Utilities","text":"CollapsedDocStrings = true","category":"page"},{"location":"lib/internals/utilities/#Utilities","page":"Utilities","title":"Utilities","text":"","category":"section"},{"location":"lib/internals/utilities/","page":"Utilities","title":"Utilities","text":"Modules = [Documenter]\nPages = [\"utilities/utilities.jl\"]","category":"page"},{"location":"lib/internals/utilities/#Documenter.GIT_REMOTE_CACHE","page":"Utilities","title":"Documenter.GIT_REMOTE_CACHE","text":"Stores the memoized results of getremote.\n\n\n\n\n\n","category":"constant"},{"location":"lib/internals/utilities/#Documenter.julia_remote","page":"Utilities","title":"Documenter.julia_remote","text":"A Remote corresponding to the main Julia language repository.\n\n\n\n\n\n","category":"constant"},{"location":"lib/internals/utilities/#Documenter.Default","page":"Utilities","title":"Documenter.Default","text":"struct Default{T}\n\nInternal wrapper type that is meant to be used in situations where it is necessary to distinguish whether the user explicitly passed the same value as the default value to a keyword argument, or whether the keyword argument was not passed at all.\n\nfunction foo(; kwarg = Default(\"default value\"))\n    if isa(kwarg, Default)\n        # User did not explicitly pass a value for kwarg\n    else kwarg === \"default value\"\n        # User passed \"default value\" explicitly\n    end\nend\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/utilities/#Documenter.Object","page":"Utilities","title":"Documenter.Object","text":"Represents an object stored in the docsystem by its binding and signature.\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/utilities/#Documenter.assetsdir-Tuple{}","page":"Utilities","title":"Documenter.assetsdir","text":"Returns the path to the Documenter assets directory.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/utilities/#Documenter.codelang-Tuple{AbstractString}","page":"Utilities","title":"Documenter.codelang","text":"codelang(infostring)\n\n\nExtracts the language identifier from the info string of a Markdown code block.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/utilities/#Documenter.currentdir-Tuple{}","page":"Utilities","title":"Documenter.currentdir","text":"Returns the current directory.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/utilities/#Documenter.doccat-Tuple{Documenter.Object}","page":"Utilities","title":"Documenter.doccat","text":"Returns the category name of the provided Object.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/utilities/#Documenter.docs","page":"Utilities","title":"Documenter.docs","text":"docs(ex, str)\n\nReturns an expression that, when evaluated, returns the docstrings associated with ex.\n\n\n\n\n\n","category":"function"},{"location":"lib/internals/utilities/#Documenter.find_root_parent-Tuple{Any, Any}","page":"Utilities","title":"Documenter.find_root_parent","text":"find_root_parent(f, path)\n\n\nTries to determine the \"root\" of the directory hierarchy containing path. Returns the absolute path to the root directory or nothing if no root was found. If path is a directory, it may itself already be a root.\n\nThe predicate f gets called with absolute paths to directories and must return true if the directory is a \"root\". An example predicate is is_git_repo_root that checks if the directory is a Git repository root.\n\nThe dbdir keyword argument specifies the name of the directory we are searching for to determine if this is a repository or not. If there is a file called dbdir, then it's contents is checked under the assumption that it is a Git worktree or a submodule.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/utilities/#Documenter.getremote-Tuple{AbstractString}","page":"Utilities","title":"Documenter.getremote","text":"getremote(\n    dir::AbstractString\n) -> Union{Nothing, Documenter.Remotes.Remote}\n\n\nDetermines the GitHub remote of a directory by checking remote.origin.url of the repository. Returns a Remotes.GitHub, or nothing is something has gone wrong (e.g. it's run on a directory not in a Git repo, or origin.url points to a non-GitHub remote).\n\nThe results for a given directory are memoized in GIT_REMOTE_CACHE, since calling git is expensive and it is often called on the same directory over and over again.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/utilities/#Documenter.git_remote_head_branch-Tuple{Any, Any}","page":"Utilities","title":"Documenter.git_remote_head_branch","text":"Calls git remote show $(remotename) to try to determine the main (development) branch of the remote repository. Returns master and prints a warning if it was unable to figure it out automatically.\n\nroot is the the directory where git gets run. varname is just informational and used to construct the warning messages.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/utilities/#Documenter.is_git_repo_root-Tuple{AbstractString}","page":"Utilities","title":"Documenter.is_git_repo_root","text":"is_git_repo_root(directory; dbdir)\n\n\nCheck is directory is a Git repository root.\n\nThe dbdir keyword argument specifies the name of the directory we are searching for to determine if this is a repository or not. If there is a file called dbdir, then it's contents is checked under the assumption that it is a Git worktree or a submodule.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/utilities/#Documenter.isabsurl-Tuple{Any}","page":"Utilities","title":"Documenter.isabsurl","text":"isabsurl(url)\n\nChecks whether url is an absolute URL (as opposed to a relative one).\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/utilities/#Documenter.mdparse-Tuple{AbstractString}","page":"Utilities","title":"Documenter.mdparse","text":"mdparse(s::AbstractString; mode=:single)\n\nParses the given string as Markdown using Markdown.parse, but strips away the surrounding layers, such as the outermost Markdown.MD. What exactly is returned depends on the mode keyword. The resulting Markdown AST is converted into an array of MarkdownAST.Nodes.\n\nThe mode keyword argument can be one of the following:\n\n:single (default) – returns a single block-level object (e.g. Markdown.Paragraph or Markdown.Admonition) and errors if the string parses into multiple blocks.\n:blocks – the function returns a Vector{Any} of Markdown blocks.\n:span – Returns a Vector{Any} of span-level items, stripping away the outer block. This requires the string to parse into a single Markdown.Paragraph, the contents of which gets returned.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/utilities/#Documenter.object-Tuple{Union{Expr, Symbol}, AbstractString}","page":"Utilities","title":"Documenter.object","text":"object(ex, str)\n\nReturns a expression that, when evaluated, returns an Object representing ex.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/utilities/#Documenter.parseblock-Tuple{AbstractString, Any, Any}","page":"Utilities","title":"Documenter.parseblock","text":"Returns a vector of parsed expressions and their corresponding raw strings.\n\nReturns a Vector of tuples (expr, code), where expr is the corresponding expression (e.g. a Expr or Symbol object) and code is the string of code the expression was parsed from.\n\nThe keyword argument skip = N drops the leading N lines from the input string.\n\nIf raise=false is passed, the Meta.parse does not raise an exception on parse errors, but instead returns an expression that will raise an error when evaluated. parseblock returns this expression normally and it must be handled appropriately by the caller.\n\nThe linenumbernode can be passed as a LineNumberNode to give information about filename and starting line number of the block (requires Julia 1.6 or higher).\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/utilities/#Documenter.slugify-Tuple{AbstractString}","page":"Utilities","title":"Documenter.slugify","text":"Slugify a string into a suitable URL.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/utilities/#Documenter.srcpath-Tuple{Any, Any, Any}","page":"Utilities","title":"Documenter.srcpath","text":"Find the path of a file relative to the source directory. root is the path to the directory containing the file file.\n\nIt is meant to be used with walkdir(source).\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/utilities/#Documenter.submodules-Tuple{Vector{Module}}","page":"Utilities","title":"Documenter.submodules","text":"Returns the set of submodules of a given root module/s.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/utilities/#Documenter.@docerror-Tuple{Any, Any, Any, Vararg{Any}}","page":"Utilities","title":"Documenter.@docerror","text":"@docerror(doc, tag, msg, exs...)\n\nAdd tag to the doc.internal.errors array and log the message msg as an error (if tag matches the doc.user.strict setting) or warning.\n\ndoc must be the instance of Document used for the Documenter run\ntag must be one of the Symbols in ERROR_NAMES\nmsg is the explanation of the issue to the user\nexs... are additional expressions that will be included with the message; see @error and @warn\n\n\n\n\n\n","category":"macro"},{"location":"lib/internals/utilities/","page":"Utilities","title":"Utilities","text":"Remotes.URL\nRemotes.repofile","category":"page"},{"location":"lib/internals/utilities/#Documenter.Remotes.URL","page":"Utilities","title":"Documenter.Remotes.URL","text":"URL(urltemplate, repourl=nothing)\n\nA Remote type used internally in Documenter when the user passes a URL template string as the repo argument. Will return nothing from repourl if the optional repourl argument is not passed.\n\nCan contain the following template sections that Documenter will replace:\n\n{commit}: replaced by the commit SHA, branch or tag name\n{path}: replaced by the path of the file, relative to the repository root\n{line}: replaced by the line (or line range) reference\n\nFor example, the template URLs might look something like:\n\nGitLab:\nhttps://gitlab.com/user/project/-/tree/{commit}{path}#{line}\nAzure DevOps:\nhttps://dev.azure.com/org/project/_git/repo?path={path}&version={commit}{line}&lineStartColumn=1&lineEndColumn=1\nBitBucket:\nhttps://bitbucket.org/user/project/src/{commit}/{path}#lines-{line}\n\nHowever, an explicit Remote object is preferred over using a template string when configuring Documenter.\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/utilities/#Documenter.Remotes.repofile","page":"Utilities","title":"Documenter.Remotes.repofile","text":"repofile(remote::Remote, ref, filename, linerange=nothing)\n\nDocumenter's internal version of fileurl, which sanitizes the inputs before they are passed to the potentially user-defined fileurl implementations.\n\n\n\n\n\n","category":"function"},{"location":"lib/internals/documentertools/","page":"DocumenterTools","title":"DocumenterTools","text":"CollapsedDocStrings = true","category":"page"},{"location":"lib/internals/documentertools/#DocumenterTools","page":"DocumenterTools","title":"DocumenterTools","text":"","category":"section"},{"location":"lib/internals/documentertools/","page":"DocumenterTools","title":"DocumenterTools","text":"DocumenterTools.package_devpath","category":"page"},{"location":"lib/internals/documentertools/#DocumenterTools.package_devpath","page":"DocumenterTools","title":"DocumenterTools.package_devpath","text":"package_devpath(pkg)\n\n\nReturns the path to the top level directory of a devved out package source tree. The package is identified by its top level module pkg.\n\n\n\n\n\n","category":"function"},{"location":"lib/internals/documentertools/#Generator","page":"DocumenterTools","title":"Generator","text":"","category":"section"},{"location":"lib/internals/documentertools/","page":"DocumenterTools","title":"DocumenterTools","text":"Modules = [DocumenterTools.Generator]","category":"page"},{"location":"lib/internals/documentertools/#DocumenterTools.Generator","page":"DocumenterTools","title":"DocumenterTools.Generator","text":"Provides the functions related to generating documentation stubs.\n\n\n\n\n\n","category":"module"},{"location":"lib/internals/documentertools/#DocumenterTools.Generator.gitignore-Tuple{}","page":"DocumenterTools","title":"DocumenterTools.Generator.gitignore","text":"gitignore()\n\n\nContents of the default .gitignore file.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/documentertools/#DocumenterTools.Generator.index-Tuple{Any}","page":"DocumenterTools","title":"DocumenterTools.Generator.index","text":"index(pkgname)\n\n\nContents of the default src/index.md file.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/documentertools/#DocumenterTools.Generator.make-Tuple{Any}","page":"DocumenterTools","title":"DocumenterTools.Generator.make","text":"make(pkgname; format)\n\n\nContents of the default make.jl file.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/documentertools/#DocumenterTools.Generator.mkdocs-Tuple{Any}","page":"DocumenterTools","title":"DocumenterTools.Generator.mkdocs","text":"mkdocs(pkgname; description, author, url)\n\n\nContents of the default mkdocs.yml file.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/documentertools/#DocumenterTools.Generator.project-Tuple{}","page":"DocumenterTools","title":"DocumenterTools.Generator.project","text":"project(; format)\n\n\nContents of the default Project.toml file.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/documentertools/#DocumenterTools.Generator.savefile-Tuple{Any, Any, Any}","page":"DocumenterTools","title":"DocumenterTools.Generator.savefile","text":"savefile(f, root, filename)\n\n\nAttempts to save a file at $(root)/$(filename). f will be called with file stream (see open).\n\nfilename can also be a file in a subdirectory (e.g. src/index.md), and then then subdirectories will be created automatically.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/documentertools/#Themes","page":"DocumenterTools","title":"Themes","text":"","category":"section"},{"location":"lib/internals/documentertools/","page":"DocumenterTools","title":"DocumenterTools","text":"warning: Experimental API\nThe theming API in DocumenterTools is very experimental and may change without notice.","category":"page"},{"location":"lib/internals/documentertools/","page":"DocumenterTools","title":"DocumenterTools","text":"Modules = [DocumenterTools.Themes]","category":"page"},{"location":"lib/internals/documentertools/#DocumenterTools.Themes","page":"DocumenterTools","title":"DocumenterTools.Themes","text":"The Themes module contains APIs to more easily compile the Documenter Sass themes into CSS files.\n\nTo compile an Sass file into a Documenter theme, you can use the Themes.compile function:\n\njulia> using DocumenterTools: Themes\n\njulia> Themes.compile(\"mytheme.scss\")\n\nWhen working on the Documenter built-in themes, the Themes.themewatcher function can be used to automatically update all the built-in themes when any of the Sass files are modified. To enable it, just run\n\njulia> using DocumenterTools: Themes\n\njulia> Themes.themewatcher()\n\nNote that it will read and overwrite the Sass and CSS files of the Documenter of the environment DocumenterTools is loaded in — make sure that you have Documenter added as a development dependency to that environment.\n\n\n\n\n\n","category":"module"},{"location":"lib/internals/documentertools/#DocumenterTools.Themes.compile","page":"DocumenterTools","title":"DocumenterTools.Themes.compile","text":"compile(src[, dst])\n\nCompile an input Sass/SCSS file src into a CSS file. The standard Documenter Sass/SCSS files are available in the include path.\n\nThe optional dst argument can be used to specify the output file. Otherwise, the file extension of the src file is simply replaced by .css.\n\n\n\n\n\n","category":"function"},{"location":"lib/internals/documentertools/#DocumenterTools.Themes.compile_native_theme-Tuple{Any}","page":"DocumenterTools","title":"DocumenterTools.Themes.compile_native_theme","text":"compile_native_theme(name; dst=nothing)\n\nCompiles a native Documenter theme and places it into Documenter's assets directory.\n\nOptionally, the dst keyword argument can be used to specify the output file.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/documentertools/#DocumenterTools.Themes.themewatcher-Tuple{}","page":"DocumenterTools","title":"DocumenterTools.Themes.themewatcher","text":"themewatcher()\n\nStarts an asynchronous background task that checks for changes in the Documenter Sass files and recompiles all native themes whenever changes are detected.\n\n\n\n\n\n","category":"method"},{"location":"man/other-formats/#Other-Output-Formats","page":"Other Output Formats","title":"Other Output Formats","text":"","category":"section"},{"location":"man/other-formats/","page":"Other Output Formats","title":"Other Output Formats","text":"In addition to the default native HTML output, Documenter also provides a built-in LaTeX-based PDF output. Additional output formats are provided through plugin packages. Once the corresponding package is loaded, the output format can be specified using the format option in makedocs.","category":"page"},{"location":"man/other-formats/#pdf-output","page":"Other Output Formats","title":"PDF Output via LaTeX","text":"","category":"section"},{"location":"man/other-formats/","page":"Other Output Formats","title":"Other Output Formats","text":"makedocs can be switched over to use the PDF/LaTeX backend by passing a Documenter.LaTeX object as the format keyword:","category":"page"},{"location":"man/other-formats/","page":"Other Output Formats","title":"Other Output Formats","text":"using Documenter\nmakedocs(format = Documenter.LaTeX(), ...)","category":"page"},{"location":"man/other-formats/","page":"Other Output Formats","title":"Other Output Formats","text":"Documenter will then generate a PDF file of the documentation using LaTeX, which will be placed in the output (build/) directory.","category":"page"},{"location":"man/other-formats/","page":"Other Output Formats","title":"Other Output Formats","text":"The makedocs argument sitename will be used for the \\title field in the tex document, and if the build is for a release tag (i.e. when the \"TRAVIS_TAG\" environment variable is set) the version number will be appended to the title. The makedocs argument authors should also be specified, it will be used for the \\authors field in the tex document.","category":"page"},{"location":"man/other-formats/","page":"Other Output Formats","title":"Other Output Formats","text":"warning: Known issue\nIf the makedocs argument pages is not assigned, Documenter will generate tex documents without contents. (#2132)","category":"page"},{"location":"man/other-formats/#Compiling-using-natively-installed-latex","page":"Other Output Formats","title":"Compiling using natively installed latex","text":"","category":"section"},{"location":"man/other-formats/","page":"Other Output Formats","title":"Other Output Formats","text":"The following is required to build the documentation:","category":"page"},{"location":"man/other-formats/","page":"Other Output Formats","title":"Other Output Formats","text":"You need pdflatex and latexmk commands to be installed and available to Documenter.\nYou need the minted LaTeX package and its backend source highlighter Pygments installed.\nYou need the DejaVu Sans and DejaVu Sans Mono fonts installed.","category":"page"},{"location":"man/other-formats/#Compiling-using-Tectonic","page":"Other Output Formats","title":"Compiling using Tectonic","text":"","category":"section"},{"location":"man/other-formats/","page":"Other Output Formats","title":"Other Output Formats","text":"The documentation can be also built using the Tectonic LaTeX engine. It is required to have a tectonic available in PATH, or to provide a path to the binary using the tectonic keyword:","category":"page"},{"location":"man/other-formats/","page":"Other Output Formats","title":"Other Output Formats","text":"using Documenter\n\n# Executable `tectonic` is present in `PATH`\nmakedocs(\n    format = Documenter.LaTeX(platform=\"tectonic\"),\n    ...)\n\n# The path to `tectonic` is provided by the tectonic_jll package\nusing tectonic_jll: tectonic\nmakedocs(\n    format = Documenter.LaTeX(platform=\"tectonic\", tectonic=tectonic()),\n    ...)","category":"page"},{"location":"man/other-formats/#Compiling-using-docker-image","page":"Other Output Formats","title":"Compiling using docker image","text":"","category":"section"},{"location":"man/other-formats/","page":"Other Output Formats","title":"Other Output Formats","text":"It is also possible to use a prebuilt docker image to compile the .tex file. The image contains all of the required installs described in the section above. The only requirement for using the image is that docker is installed and available for the builder to call. You also need to tell Documenter to use the docker image, instead of natively installed tex which is the default. This is done with the LaTeX specifier:","category":"page"},{"location":"man/other-formats/","page":"Other Output Formats","title":"Other Output Formats","text":"using Documenter\nmakedocs(\n    format = Documenter.LaTeX(platform = \"docker\"),\n    ...\n)","category":"page"},{"location":"man/other-formats/","page":"Other Output Formats","title":"Other Output Formats","text":"If you build the documentation on Travis you need to add","category":"page"},{"location":"man/other-formats/","page":"Other Output Formats","title":"Other Output Formats","text":"services:\n  - docker","category":"page"},{"location":"man/other-formats/","page":"Other Output Formats","title":"Other Output Formats","text":"to your .travis.yml file.","category":"page"},{"location":"man/other-formats/#Compiling-to-LaTeX-only","page":"Other Output Formats","title":"Compiling to LaTeX only","text":"","category":"section"},{"location":"man/other-formats/","page":"Other Output Formats","title":"Other Output Formats","text":"There's a possibility to save only the .tex file and skip the PDF compilation. For this purpose use the platform=\"none\" keyword:","category":"page"},{"location":"man/other-formats/","page":"Other Output Formats","title":"Other Output Formats","text":"using Documenter\nmakedocs(\n    format = Documenter.LaTeX(platform = \"none\"),\n    ...\n)","category":"page"},{"location":"man/other-formats/#custom-latex","page":"Other Output Formats","title":"Custom LaTeX style","text":"","category":"section"},{"location":"man/other-formats/","page":"Other Output Formats","title":"Other Output Formats","text":"The PDF/LaTeX backend works by generating a TeX file based on the input Markdown files. For users who need or want more control over the generated PDF, it is possible to customize the setup part of the generated TeX code.","category":"page"},{"location":"man/other-formats/#Load-custom-packages","page":"Other Output Formats","title":"Load custom packages","text":"","category":"section"},{"location":"man/other-formats/","page":"Other Output Formats","title":"Other Output Formats","text":"By default, the generated TeX file loads the documenter.sty style file, which loads several packages (such as fontspec, amsmath, listings, minted, tabulary, graphicx) and otherwise configures the TeX build.","category":"page"},{"location":"man/other-formats/","page":"Other Output Formats","title":"Other Output Formats","text":"Users can load additional packages and declare additional configuration by adding a custom.sty file to the assets/ source directory. The custom style file will be loaded right after the default style (documenter.sty).","category":"page"},{"location":"man/other-formats/#Custom-preamble","page":"Other Output Formats","title":"Custom preamble","text":"","category":"section"},{"location":"man/other-formats/","page":"Other Output Formats","title":"Other Output Formats","text":"By default, Documenter uses the preamble.tex preamble, with only the dynamically generated declarations for the \\DocMainTitle, \\DocVersion, \\DocAuthors, and \\JuliaVersion variables preceding it.","category":"page"},{"location":"man/other-formats/","page":"Other Output Formats","title":"Other Output Formats","text":"For more control, it is possible to fully replace the preamble by adding a preamble.tex file into the assets/ source directory, which will then be used instead of the default one. The Documenter tests contain two examples of how a custom preamble can be used:","category":"page"},{"location":"man/other-formats/","page":"Other Output Formats","title":"Other Output Formats","text":"To customize the cover page of the manual.\nTo customize the TOC style.","category":"page"},{"location":"man/other-formats/#Markdown-and-MkDocs","page":"Other Output Formats","title":"Markdown & MkDocs","text":"","category":"section"},{"location":"man/other-formats/","page":"Other Output Formats","title":"Other Output Formats","text":"Documenter no longer provides the Markdown/MkDocs output, and this functionality has moved to the DocumenterMarkdown package.","category":"page"},{"location":"man/latex/#latex_syntax","page":"LaTeX Syntax","title":"LaTeX Syntax","text":"","category":"section"},{"location":"man/latex/","page":"LaTeX Syntax","title":"LaTeX Syntax","text":"The following section describes how to add equations written using LaTeX to your documentation.","category":"page"},{"location":"man/latex/#Escaping-Characters-in-Docstrings","page":"LaTeX Syntax","title":"Escaping Characters in Docstrings","text":"","category":"section"},{"location":"man/latex/","page":"LaTeX Syntax","title":"LaTeX Syntax","text":"Since some characters used in LaTeX syntax, such as $ and \\, are treated differently in docstrings. They need to be escaped using a \\ character as in the following example:","category":"page"},{"location":"man/latex/","page":"LaTeX Syntax","title":"LaTeX Syntax","text":"\"\"\"\nHere's some inline maths: ``\\\\sqrt[n]{1 + x + x^2 + \\\\ldots}``.\n\nHere's an equation:\n\n``\\\\frac{n!}{k!(n - k)!} = \\\\binom{n}{k}``\n\nThis is the binomial coefficient.\n\"\"\"\nfunc(x) = # ...","category":"page"},{"location":"man/latex/","page":"LaTeX Syntax","title":"LaTeX Syntax","text":"Note that for equations on the manual pages (in .md files) the escaping is not necessary. So, when moving equations between the manual and docstrings, the escaping \\ characters have to the appropriately added or removed.","category":"page"},{"location":"man/latex/","page":"LaTeX Syntax","title":"LaTeX Syntax","text":"To avoid needing to escape the special characters in docstrings the raw\"\" string macro can be used, combined with @doc:","category":"page"},{"location":"man/latex/","page":"LaTeX Syntax","title":"LaTeX Syntax","text":"@doc raw\"\"\"\nHere's some inline maths: ``\\sqrt[n]{1 + x + x^2 + \\ldots}``.\n\nHere's an equation:\n\n``\\frac{n!}{k!(n - k)!} = \\binom{n}{k}``\n\nThis is the binomial coefficient.\n\"\"\"\nfunc(x) = # ...","category":"page"},{"location":"man/latex/","page":"LaTeX Syntax","title":"LaTeX Syntax","text":"A related issue is how to add dollar signs to a docstring. They need to be double-escaped as follows:","category":"page"},{"location":"man/latex/","page":"LaTeX Syntax","title":"LaTeX Syntax","text":"\"\"\"\nThe cost was \\\\\\$1.\n\"\"\"","category":"page"},{"location":"man/latex/#Inline-Equations","page":"LaTeX Syntax","title":"Inline Equations","text":"","category":"section"},{"location":"man/latex/","page":"LaTeX Syntax","title":"LaTeX Syntax","text":"Here's some inline maths: ``\\sqrt[n]{1 + x + x^2 + \\ldots}``.","category":"page"},{"location":"man/latex/","page":"LaTeX Syntax","title":"LaTeX Syntax","text":"which will be displayed as","category":"page"},{"location":"man/latex/","page":"LaTeX Syntax","title":"LaTeX Syntax","text":"","category":"page"},{"location":"man/latex/","page":"LaTeX Syntax","title":"LaTeX Syntax","text":"Here's some inline maths: sqrtn1 + x + x^2 + ldots.","category":"page"},{"location":"man/latex/","page":"LaTeX Syntax","title":"LaTeX Syntax","text":"","category":"page"},{"location":"man/latex/","page":"LaTeX Syntax","title":"LaTeX Syntax","text":"warning: Warning\nSimilar to LaTeX, using $ and $$ to escape inline and display equations also works. However, doing so is deprecated and this functionality may be removed in a future release.","category":"page"},{"location":"man/latex/#Display-Equations","page":"LaTeX Syntax","title":"Display Equations","text":"","category":"section"},{"location":"man/latex/","page":"LaTeX Syntax","title":"LaTeX Syntax","text":"Here's an equation:\n\n```math\n\\frac{n!}{k!(n - k)!} = \\binom{n}{k}\n```\n\nThis is the binomial coefficient.\n\n---\n\nTo write a system of equations, use the `aligned` environment:\n\n```math\n\\begin{aligned}\n\\nabla\\cdot\\mathbf{E}  &= 4 \\pi \\rho \\\\\n\\nabla\\cdot\\mathbf{B}  &= 0 \\\\\n\\nabla\\times\\mathbf{E} &= - \\frac{1}{c} \\frac{\\partial\\mathbf{B}}{\\partial t} \\\\\n\\nabla\\times\\mathbf{B} &= - \\frac{1}{c} \\left(4 \\pi \\mathbf{J} + \\frac{\\partial\\mathbf{E}}{\\partial t} \\right)\n\\end{aligned}\n```\n\nThese are Maxwell's equations.\n","category":"page"},{"location":"man/latex/","page":"LaTeX Syntax","title":"LaTeX Syntax","text":"which will be displayed as","category":"page"},{"location":"man/latex/","page":"LaTeX Syntax","title":"LaTeX Syntax","text":"","category":"page"},{"location":"man/latex/","page":"LaTeX Syntax","title":"LaTeX Syntax","text":"Here's an equation:","category":"page"},{"location":"man/latex/","page":"LaTeX Syntax","title":"LaTeX Syntax","text":"fracnk(n - k) = binomnk","category":"page"},{"location":"man/latex/","page":"LaTeX Syntax","title":"LaTeX Syntax","text":"This is the binomial coefficient.","category":"page"},{"location":"man/latex/","page":"LaTeX Syntax","title":"LaTeX Syntax","text":"","category":"page"},{"location":"man/latex/","page":"LaTeX Syntax","title":"LaTeX Syntax","text":"To write a system of equations, use the aligned environment:","category":"page"},{"location":"man/latex/","page":"LaTeX Syntax","title":"LaTeX Syntax","text":"beginaligned\nnablacdotmathbfE  = 4 pi rho \nnablacdotmathbfB  = 0 \nnablatimesmathbfE = - frac1c fracpartialmathbfBpartial t \nnablatimesmathbfB = - frac1c left(4 pi mathbfJ + fracpartialmathbfEpartial t right)\nendaligned","category":"page"},{"location":"man/latex/","page":"LaTeX Syntax","title":"LaTeX Syntax","text":"These are Maxwell's equations.","category":"page"},{"location":"man/latex/#Printing-LaTeX-from-Julia","page":"LaTeX Syntax","title":"Printing LaTeX from Julia","text":"","category":"section"},{"location":"man/latex/","page":"LaTeX Syntax","title":"LaTeX Syntax","text":"To pretty-print LaTeX from Julia, overload Base.show for the MIME\"text/latex\" type. For example:","category":"page"},{"location":"man/latex/","page":"LaTeX Syntax","title":"LaTeX Syntax","text":"struct LaTeXEquation\n    content::String\nend\n\nfunction Base.show(io::IO, ::MIME\"text/latex\", x::LaTeXEquation)\n    # Wrap in $$ for display math printing\n    return print(io, \"\\$\\$ \" * x.content * \" \\$\\$\")\nend\n\nLaTeXEquation(raw\"\"\"\n    \\left[\\begin{array}{c}\n        x \\\\\n        y\n    \\end{array}\\right]\n\"\"\")","category":"page"},{"location":"man/latex/#Set-math-engine-and-define-macros-for-LaTeX","page":"LaTeX Syntax","title":"Set math engine and define macros for LaTeX","text":"","category":"section"},{"location":"man/latex/","page":"LaTeX Syntax","title":"LaTeX Syntax","text":"The mathengine argument to Documenter.HTMLWriter.HTML allows the math rendering engine to be specified, supporting both MathJax and KaTeX (with the latter being the default).","category":"page"},{"location":"man/latex/","page":"LaTeX Syntax","title":"LaTeX Syntax","text":"Furthermore, you can also pass custom configuration to the rendering engine. E.g. to add global LaTeX command definitions, you can set mathengine to:","category":"page"},{"location":"man/latex/","page":"LaTeX Syntax","title":"LaTeX Syntax","text":"mathengine = Documenter.MathJax(Dict(:TeX => Dict(\n    :equationNumbers => Dict(:autoNumber => \"AMS\"),\n    :Macros => Dict(\n        :ket => [\"|#1\\\\rangle\", 1],\n        :bra => [\"\\\\langle#1|\", 1],\n    ),\n)))","category":"page"},{"location":"man/latex/","page":"LaTeX Syntax","title":"LaTeX Syntax","text":"Or with MathJax v3, the physics package can be loaded:","category":"page"},{"location":"man/latex/","page":"LaTeX Syntax","title":"LaTeX Syntax","text":"mathengine = MathJax3(Dict(\n    :loader => Dict(\"load\" => [\"[tex]/physics\"]),\n    :tex => Dict(\n        \"inlineMath\" => [[\"\\$\",\"\\$\"], [\"\\\\(\",\"\\\\)\"]],\n        \"tags\" => \"ams\",\n        \"packages\" => [\"base\", \"ams\", \"autoload\", \"physics\"],\n    ),\n))","category":"page"},{"location":"man/latex/","page":"LaTeX Syntax","title":"LaTeX Syntax","text":"The syntax is slightly different if using KaTeX, the following example is what you might include in your makedocs function:","category":"page"},{"location":"man/latex/","page":"LaTeX Syntax","title":"LaTeX Syntax","text":"makedocs(\n    format = Documenter.HTML(; mathengine=\n        Documenter.KaTeX(\n            Dict(:delimiters => [\n                Dict(:left => raw\"$\",   :right => raw\"$\",   display => false),\n                Dict(:left => raw\"$$\",  :right => raw\"$$\",  display => true),\n                Dict(:left => raw\"\\[\",  :right => raw\"\\]\",  display => true),\n                ],\n                :macros => Dict(\"\\\\RR\" => \"\\\\mathbb{R}\",\n                    raw\"\\Xi\" => raw\"X_{i}\",\n                    raw\"\\Ru\" => raw\"R_{\\mathrm{univ.}}\",\n                    raw\"\\Pstd\" => raw\"P_{\\mathrm{std}}\",\n                    raw\"\\Tstd\" => raw\"T_{\\mathrm{std}}\",\n                ),\n            )\n        )\n    )\n)","category":"page"},{"location":"man/latex/","page":"LaTeX Syntax","title":"LaTeX Syntax","text":"MathJax2, MathJax3 and KaTeX are available types for mathengine.","category":"page"},{"location":"lib/internals/selectors/","page":"Selectors","title":"Selectors","text":"CollapsedDocStrings = true","category":"page"},{"location":"lib/internals/selectors/#Selectors","page":"Selectors","title":"Selectors","text":"","category":"section"},{"location":"lib/internals/selectors/","page":"Selectors","title":"Selectors","text":"Modules = [Documenter.Selectors]","category":"page"},{"location":"lib/internals/selectors/#Documenter.Selectors","page":"Selectors","title":"Documenter.Selectors","text":"An extensible code selection interface.\n\nThe Selectors module provides an extensible way to write code that has to dispatch on different predicates without hardcoding the control flow into a single chain of if statements.\n\nIn the following example a selector for a simple condition is implemented and the generated selector code is described:\n\nabstract type MySelector <: Selectors.AbstractSelector end\n\n# The different cases we want to test.\nabstract type One    <: MySelector end\nabstract type NotOne <: MySelector end\n\n# The order in which to test the cases.\nSelectors.order(::Type{One})    = 0.0\nSelectors.order(::Type{NotOne}) = 1.0\n\n# The predicate to test against.\nSelectors.matcher(::Type{One}, x)    = x === 1\nSelectors.matcher(::Type{NotOne}, x) = x !== 1\n\n# What to do when a test is successful.\nSelectors.runner(::Type{One}, x)    = println(\"found one\")\nSelectors.runner(::Type{NotOne}, x) = println(\"not found\")\n\n# Test our selector with some numbers.\nfor i in 0:5\n    Selectors.dispatch(MySelector, i)\nend\n\nSelectors.dispatch(Selector, i) will behave equivalent to the following:\n\nfunction dispatch(::Type{MySelector}, i::Int)\n    if matcher(One, i)\n        runner(One, i)\n    elseif matcher(NotOne, i)\n        runner(NotOne, i)\n    end\nend\n\nand further to\n\nfunction dispatch(::Type{MySelector}, i::Int)\n    if i === 1\n        println(\"found one\")\n    elseif i !== 1\n        println(\"not found\")\n    end\nend\n\nThe module provides the following interface for creating selectors:\n\norder\nmatcher\nrunner\nstrict\ndisable\ndispatch\n\n\n\n\n\n","category":"module"},{"location":"lib/internals/selectors/#Documenter.Selectors.AbstractSelector","page":"Selectors","title":"Documenter.Selectors.AbstractSelector","text":"Root selector type. Each user-defined selector must subtype from this, i.e.\n\nabstract type MySelector <: Selectors.AbstractSelector end\n\nabstract type First  <: MySelector end\nabstract type Second <: MySelector end\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/selectors/#Documenter.Selectors.disable-Union{Tuple{Type{T}}, Tuple{T}} where T<:Documenter.Selectors.AbstractSelector","page":"Selectors","title":"Documenter.Selectors.disable","text":"Disable a particular case in a selector so that it is never used.\n\nSelectors.disable(::Type{Debug}) = true\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/selectors/#Documenter.Selectors.dispatch-Union{Tuple{T}, Tuple{Type{T}, Vararg{Any}}} where T<:Documenter.Selectors.AbstractSelector","page":"Selectors","title":"Documenter.Selectors.dispatch","text":"Call Selectors.runner(T, args...) where T is a subtype of MySelector for which matcher(T, args...) is true.\n\nSelectors.dispatch(MySelector, args...)\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/selectors/#Documenter.Selectors.leaf_subtypes-Union{Tuple{Type{T}}, Tuple{T}} where T","page":"Selectors","title":"Documenter.Selectors.leaf_subtypes","text":"Return a list of all subtypes of T which do not have further subtypes.\n\nThe returned list includes subtypes of subtypes, and it does not distinguish between concrete types (i.e. types which are guaranteed not to have subtypes) and abstract types (which may or may not have subtypes).\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/selectors/#Documenter.Selectors.matcher","page":"Selectors","title":"Documenter.Selectors.matcher","text":"Define the matching test for each case in a selector, i.e.\n\nSelectors.matcher(::Type{First}, x)  = x == 1\nSelectors.matcher(::Type{Second}, x) = true\n\nNote that the return type must be Bool.\n\nTo match against multiple cases use the Selectors.strict function.\n\n\n\n\n\n","category":"function"},{"location":"lib/internals/selectors/#Documenter.Selectors.order","page":"Selectors","title":"Documenter.Selectors.order","text":"Define the precedence of each case in a selector, i.e.\n\nSelectors.order(::Type{First})  = 1.0\nSelectors.order(::Type{Second}) = 2.0\n\nNote that the return type must be Float64. Defining multiple case types to have the same order will result in undefined behaviour.\n\n\n\n\n\n","category":"function"},{"location":"lib/internals/selectors/#Documenter.Selectors.runner","page":"Selectors","title":"Documenter.Selectors.runner","text":"Define the code that will run when a particular Selectors.matcher test returns true, i.e.\n\nSelectors.runner(::Type{First}, x)  = println(\"`x` is equal to `1`.\")\nSelectors.runner(::Type{Second}, x) = println(\"`x` is not equal to `1`.\")\n\n\n\n\n\n","category":"function"},{"location":"lib/internals/selectors/#Documenter.Selectors.strict-Union{Tuple{Type{T}}, Tuple{T}} where T<:Documenter.Selectors.AbstractSelector","page":"Selectors","title":"Documenter.Selectors.strict","text":"Define whether a selector case will \"fallthrough\" or not when successfully matched against. By default matching is strict and does not fallthrough to subsequent selector cases.\n\n# Adding a debugging selector case.\nabstract type Debug <: MySelector end\n\n# Insert prior to all other cases.\nSelectors.order(::Type{Debug}) = 0.0\n\n# Fallthrough to the next case on success.\nSelectors.strict(::Type{Debug}) = false\n\n# We always match, regardless of the value of `x`.\nSelectors.matcher(::Type{Debug}, x) = true\n\n# Print some debugging info.\nSelectors.runner(::Type{Debug}, x) = @show x\n\n\n\n\n\n","category":"method"},{"location":"showcase/#Showcase","page":"Showcase","title":"Showcase","text":"","category":"section"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"This page showcases the various page elements that are supported by Documenter. It should be read side-by-side with its source (docs/src/showcase.md) to see what syntax exactly is used to create the various elements.","category":"page"},{"location":"showcase/#Table-of-contents","page":"Showcase","title":"Table of contents","text":"","category":"section"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"A table of contents can be generated with an @contents block. The one for this page renders as","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"Pages = [\"showcase.md\"]","category":"page"},{"location":"showcase/#Basic-Markdown","page":"Showcase","title":"Basic Markdown","text":"","category":"section"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"Documenter can render all the Markdown syntax supported by the Julia Markdown parser. You can use all the usual markdown syntax, such as bold text and italic text and print(\"inline code\").","category":"page"},{"location":"showcase/#Code-blocks","page":"Showcase","title":"Code blocks","text":"","category":"section"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"Code blocks are rendered as follows:","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"This is an non-highlighted code block.\n... Rendered in monospace.","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"When the language is specified for the block, e.g. by starting the block with ```julia, the contents gets highlighted appropriately (for the language that are supported by the highlighter).","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"function foo(x::Integer)\n    @show x + 1\nend","category":"page"},{"location":"showcase/#Mathematics","page":"Showcase","title":"Mathematics","text":"","category":"section"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"For mathematics, both inline and display equations are available. Inline equations should be written as LaTeX between two backticks, e.g. ``A x^2 + B x + C = 0``. It will render as A x^2 + B x + C = 0.","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"The LaTeX for display equations must be wrapped in a ```math code block and will render like","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"x_12 = frac-B pm sqrtB^2 - 4 A C2A","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"By default, the HTML output renders equations with KaTeX, but MathJax can optionally be used as well.","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"warning: Warning\nSimilar to LaTeX, using $ and $$ to escape inline and display equations also works. However, doing so is deprecated and this functionality may be removed in a future release.","category":"page"},{"location":"showcase/#Images","page":"Showcase","title":"Images","text":"","category":"section"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"Include images using basic Markdown syntax:","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"(Image: Enter a descriptive caption for the image)","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"The path should be relative to the directory of the current file. Alternatively, use ./ to begin a path relative to the src of the documents, e.g., ./assets/logo.png.","category":"page"},{"location":"showcase/#Admonitions","page":"Showcase","title":"Admonitions","text":"","category":"section"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"Admonitions are colorful boxes used to highlight parts of the documentation.","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"Each admonition begins with three !!!, and then the content is indented underneath with four spaces:","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"!!! note \"An optional title\"\n    Here is something you should pay attention to.","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"Documenter supports a range of admonition types for different circumstances.","category":"page"},{"location":"showcase/#Note-admonition","page":"Showcase","title":"Note admonition","text":"","category":"section"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"note: 'note' admonition\nAdmonitions look like this. This is a !!! note-type admonition.Note that admonitions themselves can contain other block-level elements too, such as code blocks. E.g.f(x) = x^2However, you can not have at-blocks, docstrings, doctests etc. in an admonition.Headings are OK though:Heading 1Heading 2Heading 3Heading 4Heading 5Heading 6","category":"page"},{"location":"showcase/#Info-admonition","page":"Showcase","title":"Info admonition","text":"","category":"section"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"info: 'info' admonition\nThis is a !!! info-type admonition. This is the same as a !!! note-type.","category":"page"},{"location":"showcase/#Tip-admonition","page":"Showcase","title":"Tip admonition","text":"","category":"section"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"tip: 'tip' admonition\nThis is a !!! tip-type admonition.","category":"page"},{"location":"showcase/#Warning-admonition","page":"Showcase","title":"Warning admonition","text":"","category":"section"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"warning: 'warning' admonition\nThis is a !!! warning-type admonition.","category":"page"},{"location":"showcase/#Danger-admonition","page":"Showcase","title":"Danger admonition","text":"","category":"section"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"danger: 'danger' admonition\nThis is a !!! danger-type admonition.","category":"page"},{"location":"showcase/#Compat-admonition","page":"Showcase","title":"Compat admonition","text":"","category":"section"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"compat: 'compat' admonition\nThis is a !!! compat-type admonition.","category":"page"},{"location":"showcase/#TODO-admonition","page":"Showcase","title":"TODO admonition","text":"","category":"section"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"todo: 'todo' admonition\nThis is a !!! todo-type admonition.","category":"page"},{"location":"showcase/#Details-admonition","page":"Showcase","title":"Details admonition","text":"","category":"section"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"Admonitions with type details is rendered as a collapsed <details> block in the HTML output, with the admonition title as the <summary>.","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"details: 'details' admonition\nThis is a !!! details-type admonition.","category":"page"},{"location":"showcase/#Unknown-admonition-class","page":"Showcase","title":"Unknown admonition class","text":"","category":"section"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"ukw: Unknown admonition class\nAdmonition with an unknown admonition class. This is a code example.","category":"page"},{"location":"showcase/#Lists","page":"Showcase","title":"Lists","text":"","category":"section"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"Tight lists look as follows","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\nNulla quis venenatis justo.\nIn non sodales eros.","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"If the lists contain paragraphs or other block level elements, they look like this:","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"Morbi et varius nisl, eu semper orci.\nDonec vel nibh sapien. Maecenas ultricies mauris sapien. Nunc et sem ac justo ultricies dignissim ac vitae sem.\nNulla molestie aliquet metus, a dapibus ligula.\nMorbi pellentesque sodales sollicitudin. Fusce semper placerat suscipit. Aliquam semper tempus ex, non efficitur erat posuere in. Fusce at orci eu ex sagittis commodo.\nFusce tempus scelerisque egestas. Pellentesque varius nulla a varius fringilla.\nFusce nec urna eu orci porta blandit.","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"Numbered lists are also supported","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\nNulla quis venenatis justo.\nIn non sodales eros.","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"As are nested lists","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"Morbi et varius nisl, eu semper orci.\nDonec vel nibh sapien. Maecenas ultricies mauris sapien. Nunc et sem ac justo ultricies dignissim ac vitae sem.\nLorem ipsum dolor sit amet, consectetur adipiscing elit.\nNulla quis venenatis justo.\nIn non sodales eros.\nNulla molestie aliquet metus, a dapibus ligula.\nLorem ipsum dolor sit amet, consectetur adipiscing elit.\nNulla quis venenatis justo.\nIn non sodales eros.\nFusce nec urna eu orci porta blandit.","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"Lists can also be included in other blocks that can contain block level items","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"note: Bulleted lists in admonitions\nLorem ipsum dolor sit amet, consectetur adipiscing elit.\nNulla quis venenatis justo.\nIn non sodales eros.","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"note: Large lists in admonitions\nMorbi et varius nisl, eu semper orci.\nDonec vel nibh sapien. Maecenas ultricies mauris sapien. Nunc et sem ac justo ultricies dignissim ac vitae sem.\nLorem ipsum dolor sit amet, consectetur adipiscing elit.\nNulla quis venenatis justo.\nIn non sodales eros.\nNulla molestie aliquet metus, a dapibus ligula.\nLorem ipsum dolor sit amet, consectetur adipiscing elit.\nNulla quis venenatis justo.\nIn non sodales eros.\nFusce nec urna eu orci porta blandit.","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"Morbi et varius nisl, eu semper orci.\nDonec vel nibh sapien. Maecenas ultricies mauris sapien. Nunc et sem ac justo ultricies dignissim ac vitae sem.\nLorem ipsum dolor sit amet, consectetur adipiscing elit.\nNulla quis venenatis justo.\nIn non sodales eros.","category":"page"},{"location":"showcase/#Tables","page":"Showcase","title":"Tables","text":"","category":"section"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"object implemented value\nA ✓ 10.00\nBB ✓ 1000000.00","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"With explicit alignment.","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"object implemented value\nA ✓ 10.00\nBB ✓ 1000000.00","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"Tables that are too wide should become scrollable.","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"object implemented value\nA ✓ 10.00\nBBBBBBBBBBBBBBBBBBBB ✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓ 1000000000000000000000000000000000000000000000000000000.00","category":"page"},{"location":"showcase/#Footnotes","page":"Showcase","title":"Footnotes","text":"","category":"section"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"Footnote references can be added with the [^label] syntax.[1] The footnote definitions get collected at the bottom of the page.","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"The footnote label can be an arbitrary string and even consist of block-level elements.[Clarke61]","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"[1]: A footnote definition uses the [^label]: ... syntax in a block scope.","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"[Clarke61]: Any sufficiently advanced technology is indistinguishable from magic.Arthur C. Clarke, Profiles of the Future (1961): Clarke's Third Law.","category":"page"},{"location":"showcase/#Headings","page":"Showcase","title":"Headings","text":"","category":"section"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"Finally, headings render as follows","category":"page"},{"location":"showcase/#Heading-level-3","page":"Showcase","title":"Heading level 3","text":"","category":"section"},{"location":"showcase/#Heading-level-4","page":"Showcase","title":"Heading level 4","text":"","category":"section"},{"location":"showcase/#Heading-level-5","page":"Showcase","title":"Heading level 5","text":"","category":"section"},{"location":"showcase/#Heading-level-6","page":"Showcase","title":"Heading level 6","text":"","category":"section"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"To see an example of a level 1 heading see the page title and for level 2 heading, see the one just under this paragraph.","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"note: Headings in sidebars\nLevel 1 and 2 heading show up in the sidebar, for the current page.","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"Note that in docstrings, the headings get rewritten as just bold text right now:","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"DocumenterShowcase.baz","category":"page"},{"location":"showcase/#Main.DocumenterShowcase.baz","page":"Showcase","title":"Main.DocumenterShowcase.baz","text":"baz(x, f, k)\n\nFunction with a more complex docstring. Headings that are part of docstrings are not rendered as headings but rather as bold text:\n\nArguments\n\nx::Integer: the first argument\nf: a function with multiple allowable arguments itself  \nPattern\nf(a::Integer)\nf(a::Real)\nf(a::Real, b::Real)\nk::Integer: the third argument\n\nSee also bar.\n\n\n\n\n\n","category":"function"},{"location":"showcase/#Docstrings","page":"Showcase","title":"Docstrings","text":"","category":"section"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"The key feature of Documenter, of course, is the ability to automatically include docstrings from your package in the manual. The following example docstrings come from the demo DocumenterShowcase module, the source of which can be found in docs/DocumenterShowcase.jl.","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"To include a docstrings into a manual page, you needs to use an @docs block","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"```@docs\nDocumenterShowcase\n```","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"This will include a single docstring and it will look like this","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"DocumenterShowcase","category":"page"},{"location":"showcase/#DocumenterShowcase","page":"Showcase","title":"DocumenterShowcase","text":"This is the DocumenterShowcase, which contains\n\nDocumenterShowcase.foo\nDocumenterShowcase.bar\n\ncompat: Documenter 0.24\nThis showcase page is included in Documenter version 0.24.0 and above.\n\nContents\n\nDocstrings can contain admonitions and other block-level nodes.\n\ninfo: Info\nThis admonition is in a docstring. It itself can contain block levels nodes such as code blocks:println(\"Hello World\")... or block quotes:Lorem ipsum.\n\nIn fact, while not recommended, you can actually have a matryoshka of admonitions:\n\ndanger: Danger\nwarning: Warning\ntip: Tip\nnote: Note\nStack overflow.\n\n\n\n\n\n","category":"module"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"You can include the docstrings corresponding to different function signatures one by one. E.g., the DocumenterShowcase.foo function has two signatures – (::Integer) and (::AbstractString).","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"```@docs\nDocumenterShowcase.foo(::Integer)\n```","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"yielding the following docstring","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"DocumenterShowcase.foo(::Integer)","category":"page"},{"location":"showcase/#Main.DocumenterShowcase.foo-Tuple{Integer}","page":"Showcase","title":"Main.DocumenterShowcase.foo","text":"foo(::Integer)\n\nDocstring for foo(::Integer).\n\n\n\n\n\n","category":"method"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"And now, by having DocumenterShowcase.foo(::AbstractString) in the @docs block will give the other docstring","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"DocumenterShowcase.foo(::AbstractString)","category":"page"},{"location":"showcase/#Main.DocumenterShowcase.foo-Tuple{AbstractString}","page":"Showcase","title":"Main.DocumenterShowcase.foo","text":"foo(::AbstractString)\n\nDocstring for foo(::AbstractString).\n\n\n\n\n\n","category":"method"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"However, if you want, you can also combine multiple docstrings into a single docstring block. The DocumenterShowcase.bar function has the same signatures as","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"If we just put DocumenterShowcase.bar in an @docs block, it will combine the docstrings as follows:","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"DocumenterShowcase.bar","category":"page"},{"location":"showcase/#Main.DocumenterShowcase.bar","page":"Showcase","title":"Main.DocumenterShowcase.bar","text":"bar(::Integer)\n\nDocstring for bar(::Integer).\n\n\n\n\n\nbar(::AbstractString)\n\nDocstring for bar(::AbstractString).\n\n\n\n\n\n","category":"function"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"If you have very many docstrings, you may also want to consider using the @autodocs block which can include a whole set of docstrings automatically based on certain filtering options","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"Both @docs and @autodocs support the canonical=false keyword argument. This can be used to include a docstring more than once","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"```@docs; canonical=false\nDocumenterShowcase.bar\n```","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"We then see the same docstring as above","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"DocumenterShowcase.bar","category":"page"},{"location":"showcase/#Main.DocumenterShowcase.bar-showcase","page":"Showcase","title":"Main.DocumenterShowcase.bar","text":"bar(::Integer)\n\nDocstring for bar(::Integer).\n\n\n\n\n\nbar(::AbstractString)\n\nDocstring for bar(::AbstractString).\n\n\n\n\n\n","category":"function"},{"location":"showcase/#An-index-of-docstrings","page":"Showcase","title":"An index of docstrings","text":"","category":"section"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"The @index block can be used to generate a list of all the docstrings on a page (or even across pages) and will look as follows","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"Pages = [\"showcase.md\"]","category":"page"},{"location":"showcase/#Multiple-uses-of-the-same-symbol","page":"Showcase","title":"Multiple uses of the same symbol","text":"","category":"section"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"Sometimes a symbol has multiple docstrings, for example a type definition, inner and outer constructors. The example below shows how to use specific ones in the documentation.","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"DocumenterShowcase.Foo\nDocumenterShowcase.Foo()\nDocumenterShowcase.Foo{T}()","category":"page"},{"location":"showcase/#Main.DocumenterShowcase.Foo","page":"Showcase","title":"Main.DocumenterShowcase.Foo","text":"The type definition.\n\n\n\n\n\n","category":"type"},{"location":"showcase/#Main.DocumenterShowcase.Foo-Tuple{}","page":"Showcase","title":"Main.DocumenterShowcase.Foo","text":"Constructor Foo() with no arguments.\n\n\n\n\n\n","category":"method"},{"location":"showcase/#Main.DocumenterShowcase.Foo-Union{Tuple{}, Tuple{T}} where T","page":"Showcase","title":"Main.DocumenterShowcase.Foo","text":"Constructor Foo{T}() with one parametric argument.\n\n\n\n\n\n","category":"method"},{"location":"showcase/#Doctesting-example","page":"Showcase","title":"Doctesting example","text":"","category":"section"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"Often you want to write code example such as this:","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"julia> f(x) = x^2\nf (generic function with 1 method)\n\njulia> f(3)\n9","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"If you write them as a ```jldoctest code block, Documenter can make sure that the doctest has not become outdated. See Doctests for more information.","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"Script-style doctests are supported too:","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"2 + 2\n# output\n4","category":"page"},{"location":"showcase/#Setup-code","page":"Showcase","title":"Setup code","text":"","category":"section"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"You can have setup code for doctests that gets executed before the actual doctest. For example, the following doctest needs to have the Documenter module to be present.","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"julia> Documenter.splitexpr(:(Foo.Bar.baz))\n(:(Foo.Bar), :(:baz))","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"This is achieved by the setup keyword to jldoctest.","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"```jldoctest; setup=:(using Documenter)","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"The alternative approach is to use the DocTestSetup keys in @meta-blocks, which will apply across multiple doctests.","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"```@meta\nDocTestSetup = quote\n  f(x) = x^2\nend\n```","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"DocTestSetup = quote\n  f(x) = x^2\nend","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"julia> f(2)\n4","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"The doctests and @meta blocks are evaluated sequentially on each page, so you can always unset the test code by setting it back to nothing.","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"```@meta\nDocTestSetup = nothing\n```","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"DocTestSetup = nothing","category":"page"},{"location":"showcase/#Running-interactive-code","page":"Showcase","title":"Running interactive code","text":"","category":"section"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"@example block run a code snippet and insert the output into the document. E.g. the following Markdown","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"```@example\n2 + 3\n```","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"becomes the following code-output block pair","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"2 + 3","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"If the last element can be rendered as an image or text/html etc. (the corresponding Base.show method for the particular MIME type has to be defined), it will be rendered appropriately. e.g.:","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"using Main: DocumenterShowcase\nDocumenterShowcase.SVGCircle(\"000\", \"aaa\")","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"This is handy when combined with the Markdown standard library","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"using Markdown\nMarkdown.parse(\"\"\"\n`Markdown.MD` objects can be constructed dynamically on the fly and still get rendered \"natively\".\n\"\"\")","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"If the last value in an @example block is a nothing, the standard output from the blocks' evaluation gets displayed instead","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"println(\"Hello World\")","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"However, do note that if the block prints to standard output, but also has a final non-nothing value, the standard output just gets discarded:","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"println(\"Hello World\")\n42","category":"page"},{"location":"showcase/#Color-output","page":"Showcase","title":"Color output","text":"","category":"section"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"Output from @repl blocks and @example blocks support colored output, transforming ANSI color codes to HTML.","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"compat: Julia 1.6\nColor output requires Julia 1.6 or higher. To enable color output pass ansicolor=true to Documenter.HTML.","category":"page"},{"location":"showcase/#Colored-@example-block-output","page":"Showcase","title":"Colored @example block output","text":"","category":"section"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"Input:","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"```@example\ncode_typed(sqrt, (Float64,))\n```","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"Output:","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"code_typed(sqrt, (Float64,))","category":"page"},{"location":"showcase/#Colored-@repl-block-output","page":"Showcase","title":"Colored @repl block output","text":"","category":"section"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"Input:","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"```@repl\nprintstyled(\"This should be in bold light cyan.\", color=:light_cyan, bold=true)\n```","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"Output:","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"printstyled(\"This should be in bold cyan.\", color=:cyan, bold=true)","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"Locally disabled color:","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"```@repl; ansicolor=false\nprintstyled(\"This should be in bold light cyan.\", color=:light_cyan, bold=true)\n```","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"printstyled(\"This should be in bold light cyan.\", color=:light_cyan, bold=true)","category":"page"},{"location":"showcase/#Raw-ANSI-code-output","page":"Showcase","title":"Raw ANSI code output","text":"","category":"section"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"Regardless of the color setting, when you print the ANSI escape codes directly, coloring is enabled.","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"for color in 0:15\n    print(\"\\e[38;5;$color;48;5;$(color)m  \")\n    print(\"\\e[49m\", lpad(color, 3), \" \")\n    color % 8 == 7 && println()\nend\nprint(\"\\e[m\")","category":"page"},{"location":"showcase/#REPL-type","page":"Showcase","title":"REPL-type","text":"","category":"section"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"@repl block can be used to simulate the REPL evaluation of code blocks. For example, the following block","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"```@repl\nusing Statistics\nxs = collect(1:10)\nmedian(xs)\nsum(xs)\n```","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"It gets expanded into something that looks like as if it was evaluated in the REPL, with the julia> prompt prepended etc.:","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"using Statistics\nxs = collect(1:10)\nmedian(xs)\nsum(xs)","category":"page"},{"location":"showcase/#Named-blocks","page":"Showcase","title":"Named blocks","text":"","category":"section"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"Generally, each blocks gets evaluate in a separate, clean context (i.e. no variables from previous blocks will be polluting the namespace etc). However, you can also re-use a namespace by giving the blocks a name.","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"```@example block-name\nx = 40\n```\nwill show up like this:","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"x = 40","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"```@example block-name\nx + 1\n```\nwill show up like this:","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"x + 1","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"When you need setup code that you do not wish to show in the generated documentation, you can use an @setup block:","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"```@setup block-name\nx = 42\n```","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"x = 42","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"The @setup block essentially acts as a hidden @example block. Any state it sets up, you can access in subsequent blocks with the same name. For example, the following @example block","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"```@example block-name\nx\n```","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"will show up like this:","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"x","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"You also have continued blocks which do not evaluate immediately.","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"```@example block-name; continued = true\ny = 99\n```","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"y = 99","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"The continued evaluation only applies to @example blocks and so if you put, for example, an @repl block in between, it will lead to an error, because the y = 99 line of code has not run yet.","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"```@repl block-name\nx\ny\n```","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"x\ny","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"Another @example block with the same name will, however, finish evaluating it. So a block like","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"```@example block-name\n(x, y)\n```","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"will lead to","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"(x, y)","category":"page"},{"location":"lib/internals/expanders/","page":"Expanders","title":"Expanders","text":"CollapsedDocStrings = true","category":"page"},{"location":"lib/internals/expanders/#Expanders","page":"Expanders","title":"Expanders","text":"","category":"section"},{"location":"lib/internals/expanders/","page":"Expanders","title":"Expanders","text":"Modules = [Documenter, Documenter.Expanders]\nPages = [\"expander_pipeline.jl\"]","category":"page"},{"location":"lib/internals/expanders/#Documenter.expand_recursively-Tuple{Any, Any, Any}","page":"Expanders","title":"Documenter.expand_recursively","text":"Similar to expand(), but recursively calls itself on all descendants of node and applies NestedExpanderPipeline instead of ExpanderPipeline.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/expanders/#Documenter.Expanders.AutoDocsBlocks","page":"Expanders","title":"Documenter.Expanders.AutoDocsBlocks","text":"Parses each code block where the language is @autodocs and replaces it with all the docstrings that match the provided key/value pairs Modules = ... and Order = ....\n\n```@autodocs\nModules = [Foo, Bar]\nOrder   = [:function, :type]\n```\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/expanders/#Documenter.Expanders.ContentsBlocks","page":"Expanders","title":"Documenter.Expanders.ContentsBlocks","text":"Parses each code block where the language is @contents and replaces it with a nested list of all Header nodes in the generated document. The pages and depth of the list can be set using Pages = [...] and Depth = N where N is and integer.\n\n```@contents\nPages = [\"foo.md\", \"bar.md\"]\nDepth = 1\n```\n\nThe default Depth value is 2.\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/expanders/#Documenter.Expanders.DocsBlocks","page":"Expanders","title":"Documenter.Expanders.DocsBlocks","text":"Parses each code block where the language is @docs and evaluates the expressions found within the block. Replaces the block with the docstrings associated with each expression.\n\n```@docs\nDocumenter\nmakedocs\ndeploydocs\n```\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/expanders/#Documenter.Expanders.EvalBlocks","page":"Expanders","title":"Documenter.Expanders.EvalBlocks","text":"Parses each code block where the language is @eval and evaluates it's content. Replaces the block with the value resulting from the evaluation. This can be useful for inserting generated content into a document such as plots.\n\n```@eval\nusing PyPlot\nx = linspace(-π, π)\ny = sin(x)\nplot(x, y, color = \"red\")\nsavefig(\"plot.svg\")\nMarkdown.parse(\"![Plot](plot.svg)\")\n```\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/expanders/#Documenter.Expanders.ExampleBlocks","page":"Expanders","title":"Documenter.Expanders.ExampleBlocks","text":"Parses each code block where the language is @example and evaluates the parsed Julia code found within. The resulting value is then inserted into the final document after the source code.\n\n```@example\na = 1\nb = 2\na + b\n```\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/expanders/#Documenter.Expanders.ExpanderPipeline","page":"Expanders","title":"Documenter.Expanders.ExpanderPipeline","text":"The default node expander \"pipeline\", which consists of the following expanders:\n\nTrackHeaders\nMetaBlocks\nDocsBlocks\nAutoDocsBlocks\nEvalBlocks\nIndexBlocks\nContentsBlocks\nExampleBlocks\nSetupBlocks\nREPLBlocks\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/expanders/#Documenter.Expanders.IndexBlocks","page":"Expanders","title":"Documenter.Expanders.IndexBlocks","text":"Parses each code block where the language is @index and replaces it with an index of all docstrings spliced into the document. The pages that are included can be set using a key/value pair Pages = [...] such as\n\n```@index\nPages = [\"foo.md\", \"bar.md\"]\n```\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/expanders/#Documenter.Expanders.MetaBlocks","page":"Expanders","title":"Documenter.Expanders.MetaBlocks","text":"Parses each code block where the language is @meta and evaluates the key/value pairs found within the block, i.e.\n\n```@meta\nCurrentModule = Documenter\nDocTestSetup  = quote\n    using Documenter\nend\n```\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/expanders/#Documenter.Expanders.NestedExpanderPipeline","page":"Expanders","title":"Documenter.Expanders.NestedExpanderPipeline","text":"The subset of node expanders which also apply in nested contexts.\n\nSee also expand_recursively.\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/expanders/#Documenter.Expanders.REPLBlocks","page":"Expanders","title":"Documenter.Expanders.REPLBlocks","text":"Similar to the ExampleBlocks expander, but inserts a Julia REPL prompt before each toplevel expression in the final document.\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/expanders/#Documenter.Expanders.SetupBlocks","page":"Expanders","title":"Documenter.Expanders.SetupBlocks","text":"Similar to the ExampleBlocks expander, but hides all output in the final document.\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/expanders/#Documenter.Expanders.TrackHeaders","page":"Expanders","title":"Documenter.Expanders.TrackHeaders","text":"Tracks all Markdown.Header nodes found in the parsed markdown files and stores an Anchor object for each one.\n\n\n\n\n\n","category":"type"},{"location":"man/doctests/#Doctests","page":"Doctests","title":"Doctests","text":"","category":"section"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"Documenter will, by default, run jldoctest code blocks that it finds and makes sure that the actual output matches what's in the doctest. This can help to avoid documentation examples from becoming outdated, incorrect, or misleading. It is recommended that as many of a package's examples as possible be runnable by Documenter's doctest. Doctest failures during makedocs are fatal by default, but can be turned into just warnings by passing warnonly=:doctest to makedocs.","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"This section of the manual outlines how to go about enabling doctests for code blocks in your package's documentation.","category":"page"},{"location":"man/doctests/#\"Script\"-Examples","page":"Doctests","title":"\"Script\" Examples","text":"","category":"section"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"The first, of two, types of doctests is the \"script\" code block. To make Documenter detect this kind of code block the following format must be used:","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"```jldoctest\na = 1\nb = 2\na + b\n\n# output\n\n3\n```","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"The code block's \"language\" must be jldoctest and must include a line containing exactly the text # output. The text before this line is the contents of the script that is run. The text that appears after # output is the textual representation that would be shown in the Julia REPL if the script had been included. In particular, semicolons ; at the end of a line have no effect.","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"The actual output produced by running the \"script\" is compared to the expected result and any difference will result in makedocs throwing an error and terminating.","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"Note that the amount of whitespace appearing above and below the # output line is not significant and can be increased or decreased if desired.","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"It is possible to suppress the output from the doctest by setting the output keyword argument to false, for example","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"```jldoctest; output = false\na = 1\nb = 2\na + b\n\n# output\n\n3\n```","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"Note that the output of the script will still be compared to the expected result, i.e. what is # output section, but the # output section will be suppressed in the rendered documentation.","category":"page"},{"location":"man/doctests/#REPL-Examples","page":"Doctests","title":"REPL Examples","text":"","category":"section"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"The other kind of doctest is a simulated Julia REPL session. The following format is detected by Documenter as a REPL doctest:","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"```jldoctest\njulia> a = 1\n1\n\njulia> b = 2;\n\njulia> c = 3;  # comment\n\njulia> a + b + c\n6\n```","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"As with script doctests, the code block must have it's language set to jldoctest. When a code block contains one or more julia> at the start of a line then it is assumed to be a REPL doctest. Semi-colons, ;, at the end of a line works in the same way as in the Julia REPL and will suppress the output, although the line is still evaluated.","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"Note that not all features of the REPL are supported such as shell and help modes.","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"note: Soft vs hard scope\nJulia 1.5 changed the REPL to use the soft scope when handling global variables in for loops etc. When using Documenter with Julia 1.5 or above, Documenter uses the soft scope in @repl-blocks and REPL-type doctests.","category":"page"},{"location":"man/doctests/#Exceptions","page":"Doctests","title":"Exceptions","text":"","category":"section"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"Doctests can also test for thrown exceptions and their stacktraces. Comparing of the actual and expected results is done by checking whether the expected result matches the start of the actual result. Hence, both of the following errors will match the actual result.","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"```jldoctest\njulia> div(1, 0)\nERROR: DivideError: integer division error\n in div(::Int64, ::Int64) at ./int.jl:115\n\njulia> div(1, 0)\nERROR: DivideError: integer division error\n```","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"If instead the first div(1, 0) error was written as","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"```jldoctest\njulia> div(1, 0)\nERROR: DivideError: integer division error\n in div(::Int64, ::Int64) at ./int.jl:114\n```","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"where line 115 is replaced with 114 then the doctest will fail.","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"In the second div(1, 0), where no stacktrace is shown, it may appear to the reader that it is expected that no stacktrace will actually be displayed when they attempt to try to recreate the error themselves. To indicate to readers that the output result is truncated and does not display the entire (or any of) the stacktrace you may write [...] at the line where checking should stop, i.e.","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"```jldoctest\njulia> div(1, 0)\nERROR: DivideError: integer division error\n[...]\n```","category":"page"},{"location":"man/doctests/#Preserving-Definitions-Between-Blocks","page":"Doctests","title":"Preserving Definitions Between Blocks","text":"","category":"section"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"Every doctest block is evaluated inside its own module. This means that definitions (types, variables, functions etc.) from a block can not be used in the next block. For example:","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"```jldoctest\njulia> foo = 42\n42\n```","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"The variable foo will not be defined in the next block:","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"```jldoctest\njulia> println(foo)\nERROR: UndefVarError: foo not defined\n```","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"To preserve definitions it is possible to label blocks in order to collect several blocks into the same module. All blocks with the same label (in the same file) will be evaluated in the same module, and hence share scope. This can be useful if the same definitions are used in more than one block, with for example text, or other doctest blocks, in between. Example:","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"```jldoctest mylabel\njulia> foo = 42\n42\n```","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"Now, since the block below has the same label as the block above, the variable foo can be used:","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"```jldoctest mylabel\njulia> println(foo)\n42\n```","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"note: Note\nLabeled doctest blocks do not need to be consecutive (as in the example above) to be included in the same module. They can be interspaced with unlabeled blocks or blocks with another label.","category":"page"},{"location":"man/doctests/#Setup-Code","page":"Doctests","title":"Setup Code","text":"","category":"section"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"Doctests may require some setup code that must be evaluated prior to that of the actual example, but that should not be displayed in the final documentation. There are three ways to specify the setup code, each appropriate in a different situation.","category":"page"},{"location":"man/doctests/#DocTestSetup-in-@meta-blocks","page":"Doctests","title":"DocTestSetup in @meta blocks","text":"","category":"section"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"For doctests in the Markdown source files, an @meta block containing a DocTestSetup = ... value can be used. In the example below, the function foo is defined inside a @meta block. This block will be evaluated at the start of the following doctest blocks:","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"```@meta\nDocTestSetup = quote\n    function foo(x)\n        return x^2\n    end\nend\n```\n\n```jldoctest\njulia> foo(2)\n4\n```\n\n```@meta\nDocTestSetup = nothing\n```","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"The DocTestSetup = nothing is not strictly necessary, but good practice nonetheless to help avoid unintentional definitions in following doctest blocks.","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"While technically the @meta blocks also work within docstrings, their use there is discouraged since the @meta blocks will show up when querying docstrings in the REPL.","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"note: Historic note\nIt used to be that DocTestSetups in @meta blocks in Markdown files that included docstrings also affected the doctests in the docstrings. Since Documenter 0.23 that is no longer the case. You should use Module-level metadata or Block-level setup code instead.","category":"page"},{"location":"man/doctests/#Module-level-metadata","page":"Doctests","title":"Module-level metadata","text":"","category":"section"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"For doctests that are in docstrings, the exported DocMeta module provides an API to attach metadata that applies to all the docstrings in a particular module. Setting up the DocTestSetup metadata should be done before the makedocs or doctest call:","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"using MyPackage, Documenter\nDocMeta.setdocmeta!(MyPackage, :DocTestSetup, :(using MyPackage); recursive=true)\nmakedocs(modules=[MyPackage], ...)","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"note: Note\nMake sure to include all (top-level) modules that contain docstrings with doctests in the modules argument to makedocs. Otherwise these doctests will not be run.","category":"page"},{"location":"man/doctests/#Block-level-setup-code","page":"Doctests","title":"Block-level setup code","text":"","category":"section"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"Yet another option is to use the setup keyword argument to the jldoctest block, which is convenient for short definitions, and for setups needed in inline docstrings.","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"```jldoctest; setup = :(foo(x) = x^2)\njulia> foo(2)\n4\n```","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"note: Note\nThe DocTestSetup and the setup values are re-evaluated at the start of each doctest block and no state is shared between any code blocks. To preserve definitions see Preserving Definitions Between Blocks.","category":"page"},{"location":"man/doctests/#Filtering-Doctests","page":"Doctests","title":"Filtering Doctests","text":"","category":"section"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"A part of the output of a doctest might be non-deterministic, e.g. pointer addresses and timings. It is possible to use regular expressions to filter out or transform parts of the doctest outputs so that the deterministic part can still be tested.","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"A doctest filter is a regular expression and substitution string pair. In a doctest, each match in the expected output and the actual output is replaced according to the filter before the two outputs are compared. For example, in the following, the filter matches floating point numbers and only retains the first 4 digits after the decimal point, replacing the rest with ***:","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"```jldoctest; filter = r\"(\\d*)\\.(\\d{4})\\d+\" => s\"\\1.\\2***\"\njulia> sqrt(2)\n1.4142135623730951\n```","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"The actual string that gets compared when determining whether the doctest is up to date is actually","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"1.4142***","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"The filter can also be just a regular expression in which case the whole matching substring is removed (i.e. the substitution is just \"\"). For more information on the regular expression and substitution string syntax, see the Julia manual.","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"The doctest filters can be applied globally, on a per-file basis or to each doctest separately. To apply them globally, i.e. to all doctests in the documentation, a list of filters can be passed to makedocs with the keyword doctestfilters.","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"For more fine grained control it is possible to define filters in @meta blocks by assigning them to the DocTestFilters variable, either as a single regular expression (DocTestFilters = [r\"foo\"]) or as a vector of several regexes (DocTestFilters = [r\"foo\", r\"bar\"]). As an example, to filter out some of the non-deterministic output from @time, the following filtering could be applied:","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"```@meta\nDocTestFilters = r\"[0-9\\.]+ seconds \\(.*\\)\"\n```\n\n```jldoctest\njulia> @time [1,2,3,4]\n  0.000003 seconds (5 allocations: 272 bytes)\n4-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n```\n\n```@meta\nDocTestFilters = nothing\n```","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"DocTestFilters = nothing is not strictly necessary, but good practice nonetheless to help avoid unintentional filtering in following doctest blocks.","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"info: Info\nThe filter match is replaced with an empty string in both the expected and actual output using replace, e.g. replace(str, filter => substitution). Note that this means that the same filter can match multiple times, and if you need the same filter to match multiple lines your regex need to account for that.","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"Another option is to use the filter keyword argument. This defines a doctest-local filter which is only active for the specific doctest. Note that such filters are not shared between named doctests either. It is possible to define a filter by a single regex (filter = r\"foo\") or as a list of regex (filter = [r\"foo-[0-9]+\", r\"bar-([0-9]+)\" => s\"\\1\"]). Example:","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"```jldoctest; filter = r\"[0-9\\.]+ seconds \\(.*\\)\"\njulia> @time [1,2,3,4]\n  0.000003 seconds (5 allocations: 272 bytes)\n4-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n```","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"note: Note\nThe global filters, filters defined in @meta blocks, and filters defined with the filter keyword argument are all applied to each doctest.","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"note: Testing and debugging\nDocumenter outputs debug-level logs for each doctest it runs, showing the outputs both before and after filtering. This can be useful when developing doctests to see if the filters are being applied as you expect (e.g. to make sure that they are not too broad or to understand why a filter is not working).To enable the debug output, you can set the JULIA_DEBUG environment variable to Documenter, e.g. by doing the following in the make.jl script:ENV[\"JULIA_DEBUG\"] = \"Documenter\"","category":"page"},{"location":"man/doctests/#Doctesting-as-Part-of-Testing","page":"Doctests","title":"Doctesting as Part of Testing","text":"","category":"section"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"Documenter provides the doctest function which can be used to verify all doctests independently of manual builds. It behaves like a @testset, so it will return a testset if all the tests pass or throw a TestSetException if it does not.","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"For example, it can be used to verify doctests as part of the normal test suite by having e.g. the following in runtests.jl:","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"using Test, Documenter, MyPackage\ndoctest(MyPackage)","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"By default, it will also attempt to verify all the doctests on manual .md files, which it assumes are located under docs/src. This can be configured or disabled with the manual keyword (see doctest for more information).","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"It can also be included in another testset, in which case it gets incorporated into the parent testset. So, as another example, to test a package that does have separate manual pages, just docstrings, and also collects all the tests into a single testset, the runtests.jl might look as follows:","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"using Test, Documenter, MyPackage\n@testset \"MyPackage\" begin\n    ... # other tests & testsets\n    doctest(MyPackage; manual = false)\n    ... # other tests & testsets\nend","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"Note that you still need to make sure that all the necessary Module-level metadata for the doctests is set up before doctest is called. Also, you need to add Documenter and all the other packages you are loading in the doctests as test dependencies.","category":"page"},{"location":"man/doctests/#Fixing-Outdated-Doctests","page":"Doctests","title":"Fixing Outdated Doctests","text":"","category":"section"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"To fix outdated doctests, the doctest function can be called with fix = true. This will run the doctests, and overwrite the old results with the new output. This can be done just in the REPL:","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"julia> using Documenter, MyPackage\njulia> doctest(MyPackage, fix=true)","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"Alternatively, you can also pass the doctest = :fix keyword to makedocs.","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"note: Note\nThe :fix option currently only works for LF line endings ('\\n')\nIt is recommended to git commit any code changes before running the doctest fixing. That way it is simple to restore to the previous state if the fixing goes wrong.\nThere are some corner cases where the fixing algorithm may replace the wrong code snippet. It is therefore recommended to manually inspect the result of the fixing before committing.","category":"page"},{"location":"man/doctests/#Skipping-Doctests","page":"Doctests","title":"Skipping Doctests","text":"","category":"section"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"Doctesting can be disabled by setting the makedocs keyword doctest = false. This should only be done when initially laying out the structure of a package's documentation, after which it's encouraged to always run doctests when building docs.","category":"page"},{"location":"lib/internals/docmeta/","page":"DocMeta","title":"DocMeta","text":"CollapsedDocStrings = true","category":"page"},{"location":"lib/internals/docmeta/#DocMeta","page":"DocMeta","title":"DocMeta","text":"","category":"section"},{"location":"lib/internals/docmeta/","page":"DocMeta","title":"DocMeta","text":"DocMeta.initdocmeta!\nDocMeta.META\nDocMeta.METAMODULES\nDocMeta.METATYPE\nDocMeta.VALIDMETA","category":"page"},{"location":"lib/internals/docmeta/#Documenter.DocMeta.initdocmeta!","page":"DocMeta","title":"Documenter.DocMeta.initdocmeta!","text":"\n\n\n\n","category":"function"},{"location":"lib/internals/docmeta/#Documenter.DocMeta.META","page":"DocMeta","title":"Documenter.DocMeta.META","text":"The unique Symbol that is used to store the metadata dictionary in each module.\n\n\n\n\n\n","category":"constant"},{"location":"lib/internals/docmeta/#Documenter.DocMeta.METAMODULES","page":"DocMeta","title":"Documenter.DocMeta.METAMODULES","text":"List of modules that have the metadata dictionary added.\n\n\n\n\n\n","category":"constant"},{"location":"lib/internals/docmeta/#Documenter.DocMeta.METATYPE","page":"DocMeta","title":"Documenter.DocMeta.METATYPE","text":"Type of the metadata dictionary.\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/docmeta/#Documenter.DocMeta.VALIDMETA","page":"DocMeta","title":"Documenter.DocMeta.VALIDMETA","text":"Dictionary of all valid metadata keys and their types.\n\n\n\n\n\n","category":"constant"},{"location":"lib/internals/crossref/","page":"Crossrefs","title":"Crossrefs","text":"CollapsedDocStrings = true","category":"page"},{"location":"lib/internals/crossref/#Crossrefs","page":"Crossrefs","title":"Crossrefs","text":"","category":"section"},{"location":"lib/internals/crossref/","page":"Crossrefs","title":"Crossrefs","text":"Modules = [Documenter, Documenter.XRefResolvers]\nPages = [\"cross_references.jl\"]","category":"page"},{"location":"lib/internals/crossref/#Documenter.XREF_REGEX","page":"Crossrefs","title":"Documenter.XREF_REGEX","text":"Regular expression for an @ref link url.\n\nThis is used by the XRefResolvers.XRefResolverPipeline, respectively xref_unresolved: as long as the url of the link node still matches XREF_REGEX, the reference remains unresolved and needs further processing in subsequent steps of the pipeline.\n\n\n\n\n\n","category":"constant"},{"location":"lib/internals/crossref/#Documenter.crossref-Tuple{Documenter.Document}","page":"Crossrefs","title":"Documenter.crossref","text":"crossref(doc)\n\n\nTraverses a Documenter.Document and process internal links and references.\n\nLinks containing @ref URLs are replaced with their real URLs. This delegates to xref, which in turn delegates to the XRefResolvers.XRefResolverPipeline.\nLinks to local (.md) documents are rewritten to link to the corresponding path in the output build.\nFor links to local files or images, check that the linked files exist.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/crossref/#Documenter.find_object-Tuple{Documenter.Document, Any, Any}","page":"Crossrefs","title":"Documenter.find_object","text":"find_object(doc, binding, typesig)\n\n\nFind the included Object in the doc matching binding and typesig. The matching heuristic isn't too picky about what matches and will only fail when no Bindings matching binding have been included.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/crossref/#Documenter.xref-Tuple{MarkdownAST.Node, Any, Any, Any}","page":"Crossrefs","title":"Documenter.xref","text":"xref(node, meta, page, doc)\n\n\nResolve a MarkdownAST.Link node with an @ref URL.\n\nThis delegates to XRefResolvers.XRefResolverPipeline. In addition to forwarding the node, meta, page, and doc arguments, it also passes a slug to the pipeline that any pipeline step can use to easily resolve the link target. This slug is obtained as follows:\n\nFor, e.g, [`Documenter.makedocs`](@ref) or [text](@ref Documenter.makedocs), the slug is \"Documenter.makedocs\"\nFor, e.g, [Hosting Documentation](@ref) or [text](@ref \"Hosting Documentation\"), the slug is sluggified version of the given section title, \"Hosting-Documentation\" in this case.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/crossref/#Documenter.xref_unresolved-Tuple{Any}","page":"Crossrefs","title":"Documenter.xref_unresolved","text":"xref_unresolved(node)\n\n\nchecks whether node is a link with an @ref URL. Any step in the XRefResolvers.XRefResolverPipeline should use this to determine whether the node still needs to be resolved.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/crossref/#Documenter.xrefname-Tuple{AbstractString}","page":"Crossrefs","title":"Documenter.xrefname","text":"Parse the link.url field of an @ref link. Returns nothing if it's not an @ref, an empty string the reference link has no label, or a whitespace-stripped version the label.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/crossref/#Documenter.XRefResolvers.Docs","page":"Crossrefs","title":"Documenter.XRefResolvers.Docs","text":"Resolve @ref links for docstrings.\n\nThis runs unconditionally (if no previous step was able to resolve the link), and tries to find a code binding for the given slug, linking to its docstring.\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/crossref/#Documenter.XRefResolvers.Header","page":"Crossrefs","title":"Documenter.XRefResolvers.Header","text":"Resolve @ref links for headers.\n\nThis runs if the slug corresponds to a known local section title, and resolves the node to link to that section.\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/crossref/#Documenter.XRefResolvers.Issue","page":"Crossrefs","title":"Documenter.XRefResolvers.Issue","text":"Resolve @ref links for issues.\n\nThis runs if the slug is \"#\" followed by one or more digits and tries to link to an issue number using Remotes.issueurl.\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/crossref/#Documenter.XRefResolvers.XRefResolverPipeline","page":"Crossrefs","title":"Documenter.XRefResolvers.XRefResolverPipeline","text":"The default pipeline for resolving @ref links.\n\nThe steps for trying to resolve links are:\n\nXRefResolvers.Header for links like [Section Header](@ref)\nXRefResolvers.Issue for links like [#11](@ref)\nXRefResolvers.Docs for links like [`Documenter.makedocs`](@ref)\n\nEach step may or may not be able to resolve the link. Processing continues until the link is resolved or the end of the pipeline is reached. If the link is still unresolved after the last step, Documenter.xref issues an error that includes any accumulated error messages from the steps. Failure to resolve an @ref link will fail Documenter.makedocs if it is not called with warnonly=true.\n\nThe default pipeline could be extended by plugins using the general Selectors machinery.\n\nEach pipeline step receives the following arguments:\n\nnode: the MarkdownAST.Node representing the link. To resolve the @ref URL, any pipeline step can modify the node.\nslug: the \"slug\" for the link, see Documenter.xref\nmeta: a dictionary of metadata, see @meta block\npage: the Documenter.Page object containing the node\ndoc: the Documenter.Document instance representing the full site\nerrors: a list of strings of error messages accumulated in the XRefResolverPipeline. If a pipeline step indicates that it might be able to resolve a @ref link (Selectors.matcher is true), but then encounters an error in Selectors.runner that prevents resolution, it should push an error message to the list of errors to explain the failure. These accumulated errors will be shown if (and only if) the entire pipeline fails to resolve the link.\n\nThe Selectors.matcher of any custom pipeline step should use Documenter.xref_unresolved to check whether the link was already resolved in an earlier pipeline step.\n\n\n\n\n\n","category":"type"},{"location":"lib/remote-links/#Remote-repository-links","page":"Remote repository links","title":"Remote repository links","text":"","category":"section"},{"location":"lib/remote-links/","page":"Remote repository links","title":"Remote repository links","text":"Documenter, if set up appropriately, can automatically generate links to publicly hosted Git repositories (such as source and edit links to e.g. repositories hosted on GitHub). Usually this is for linking back to the main package repository or the project source code.","category":"page"},{"location":"lib/remote-links/","page":"Remote repository links","title":"Remote repository links","text":"The Remotes API is used to specify remote repositories and generate the URLs. It is also designed to be extended, to support additional Git repository hosting services.","category":"page"},{"location":"lib/remote-links/#Remote-link-types","page":"Remote repository links","title":"Remote link types","text":"","category":"section"},{"location":"lib/remote-links/","page":"Remote repository links","title":"Remote repository links","text":"There are two categories of remote repositories that (may) need to be configured for Documenter to be able to determine remote URLs:","category":"page"},{"location":"lib/remote-links/","page":"Remote repository links","title":"Remote repository links","text":"Project repository remote, specified with the repo keyword to makedocs. This refers to the project as a whole (rather than specific files), and is used for the repository landing page link, issue references etc.\nFile link remotes, specified by the remotes keyword to makedocs. These are used to link a file system file to the corresponding file in the remote repository. In particular, these are used to generate the edit links for manual pages, and Julia source file links for docstrings.","category":"page"},{"location":"lib/remote-links/","page":"Remote repository links","title":"Remote repository links","text":"For the most common case – a repository of a simple Julia package – there is usually only one remote repository that one links to, and the distinction between file links and repository links is not relevant. However, in more complex setups it may be necessary to distinguish between the two cases. The defaults to the two keywords try to cater for the most common use case, and as is explained below, this means that there has to be some interaction between these two arguments.","category":"page"},{"location":"lib/remote-links/#remotes-for-files","page":"Remote repository links","title":"Remotes for files","text":"","category":"section"},{"location":"lib/remote-links/","page":"Remote repository links","title":"Remote repository links","text":"When Documenter has to determine the URL of a file in the hosted repository, it gets a local filesystem absolute path as an input.[1] In the case of Markdown files, those local paths are determined by makedocs when it reads them. The links to Julia files are determined from the docsystem, and point to where the code was loaded from (e.g. for a development dependency of the environment, they come from the Pkg.developed path; but for normal Pkg.add dependencies the source files are usually in ~/.julia/packages).","category":"page"},{"location":"lib/remote-links/","page":"Remote repository links","title":"Remote repository links","text":"In most cases, for both Markdown and Julia files, the files Documenter is concerned about are located in the currently checked out Git repository that contains the Documenter make.jl script (e.g. the locally checked out package repository). However, sometimes they may also be in a different repository (either in a subdirectory of or outside of the primary repository), or even in a non-Git directory outside of the primary repository (e.g. if you're trying to build the documentation of a release tarball).","category":"page"},{"location":"lib/remote-links/","page":"Remote repository links","title":"Remote repository links","text":"To handle those cases, the remotes keyword to makedocs can be used to set up a local directory => remote repository mapping for local file system paths. The local directory is assumed to correspond to the root of the Git repository, and any subpath within that directory is then resolved to the corresponding path in the remote repository. If there are nested remotes configured, Documenter will use the one that matches first as it walks up the directory tree from the original path.","category":"page"},{"location":"lib/remote-links/","page":"Remote repository links","title":"Remote repository links","text":"As the common cases are a locally checked out Git repository (added with Pkg.develop to the docs environment), or a released package which is hosted on GitHub (Pkg.added to the environment), Documenter will also try to determine such remotes automatically.","category":"page"},{"location":"lib/remote-links/","page":"Remote repository links","title":"Remote repository links","text":"When Documenter walks up the directory tree, it checks whether the directory is a root of a Git repository (by looking for the presence of a .git directory or file). Once it finds a valid local repository root, it tries to read its origin remote URL.\nIf that matches a GitHub repository[2], Documenter automatically sets up a mapping from that directory, and then uses that to determine the remote URLs.\nIf Documenter is unable to determine the remote from the repository's origin (e.g. origin is not set up, or it is hosted somewhere else), it will error, as it will not be able to determine the remote URLs. In this case, the remote should be configured explicitly with remotes.","category":"page"},{"location":"lib/remote-links/","page":"Remote repository links","title":"Remote repository links","text":"You can think of it as Documenter automatically populating remotes with any cloned GitHub repositories it finds.[3]","category":"page"},{"location":"lib/remote-links/","page":"Remote repository links","title":"Remote repository links","text":"For released packages (those added using Pkg.add(...) rather than Pkg.develop(...)), the version and repository can be determined from the package metadata, but a commit hash is not readily available. In this case, Documenter will guess that a tag v$VERSION exists in the repository on GitHub. Note that these tags are created automatically by the widely used JuliaRegistries/TagBot action. Since this is sometimes not the case, and could cause dead or incorrect links, setting the linkcheck keyword to true to makedocs will check these guessed links have an existing target and that the existing target matches the published package. (Note this will also all other external links from your documentation.) Note that enabling this option can cause documentation builds to fail due to network errors or intermittent downtime of external services.","category":"page"},{"location":"lib/remote-links/","page":"Remote repository links","title":"Remote repository links","text":"note: Note\nThe Remotes API can be used to implement the methods to compute the remote URLs (for now, Documenter only supports GitHub and GitLab natively).","category":"page"},{"location":"lib/remote-links/","page":"Remote repository links","title":"Remote repository links","text":"[1]: There is an exception to this: links to Julia Base module source files.   But Documenter already known how to handle those correctly, and they are really only relevant to the Julia main manual build.","category":"page"},{"location":"lib/remote-links/","page":"Remote repository links","title":"Remote repository links","text":"[2]: GitHub is the most common case, but this could be extended to cover other Git hosting services in the future (as long as the remote can reliably determined from the origin URL).","category":"page"},{"location":"lib/remote-links/","page":"Remote repository links","title":"Remote repository links","text":"[3]: One thing to be aware here is that Documenter builds up a cache of the Git repositories it finds on every makedocs call.   This is for performance reasons, to reduce the number of file system accesses and, in particular, git calls, which are relatively slow.","category":"page"},{"location":"lib/remote-links/#repo-remote-interaction","page":"Remote repository links","title":"repo & remotes interaction","text":"","category":"section"},{"location":"lib/remote-links/","page":"Remote repository links","title":"Remote repository links","text":"Since Documenter is primarily used to generate documentation for Julia packages, there is some interaction between the repo and remotes keyword arguments, to automagically determine their defaults. This means that usually it is not necessary to specify either explicitly in the make.jl script.","category":"page"},{"location":"lib/remote-links/","page":"Remote repository links","title":"Remote repository links","text":"The rules are as follows:","category":"page"},{"location":"lib/remote-links/","page":"Remote repository links","title":"Remote repository links","text":"If repo is not specified, it is essentially determined like any other remote link, by trying to figure out the repository that contains the root path argument of makedocs (defaulting to the directory of the make.jl script; usually the docs/ directory). The Remote object will one of the remotes, which in turn may have been determined automatically via the origin URL of the containing Git repository.\nIf repo is specified, but the remotes for the repository root is not, repo will function as a remotes entry for the repository root. This is so that it would not be necessary to specify the same argument twice (i.e. once for general repository links, once for file links).\nIf both repo and a remotes for the repository root are configured, Documenter will throw an error, as it does not really make sense for them to point to two different remotes.[4]","category":"page"},{"location":"lib/remote-links/","page":"Remote repository links","title":"Remote repository links","text":"[4]: If there is a use case for this, this limitation could be relaxed in the future.","category":"page"},{"location":"lib/remote-links/#remotes-api","page":"Remote repository links","title":"Remotes API","text":"","category":"section"},{"location":"lib/remote-links/","page":"Remote repository links","title":"Remote repository links","text":"Documenter.Remotes\nDocumenter.Remotes.GitHub\nDocumenter.Remotes.GitLab","category":"page"},{"location":"lib/remote-links/#Documenter.Remotes","page":"Remote repository links","title":"Documenter.Remotes","text":"Types and functions for handling repository remotes.\n\n\n\n\n\n","category":"module"},{"location":"lib/remote-links/#Documenter.Remotes.GitHub","page":"Remote repository links","title":"Documenter.Remotes.GitHub","text":"GitHub(user :: AbstractString, repo :: AbstractString)\nGitHub(remote :: AbstractString)\n\nRepresents a remote Git repository hosted on GitHub. The repository is identified by the names of the user (or organization) and the repository: GitHub(user, repository). E.g.:\n\nmakedocs(\n    repo = GitHub(\"JuliaDocs\", \"Documenter.jl\")\n)\n\nThe single-argument constructor assumes that the user and repository parts are separated by a slash (e.g. JuliaDocs/Documenter.jl).\n\n\n\n\n\n","category":"type"},{"location":"lib/remote-links/#Documenter.Remotes.GitLab","page":"Remote repository links","title":"Documenter.Remotes.GitLab","text":"GitLab(host, user, repo)\nGitLab(user, repo)\nGitLab(remote)\n\nRepresents a remote Git repository hosted on GitLab. The repository is identified by the host, name of the user (or organization), and the repository. For example:\n\nmakedocs(\n    repo = GitLab(\"JuliaDocs\", \"Documenter.jl\")\n)\n\nThe single argument constructor assumes that the end user and repository parts are separated by a slash (e.g., JuliaDocs/Documenter.jl).\n\n\n\n\n\n","category":"type"},{"location":"lib/remote-links/","page":"Remote repository links","title":"Remote repository links","text":"The following types and functions and relevant when creating custom Remote types:","category":"page"},{"location":"lib/remote-links/","page":"Remote repository links","title":"Remote repository links","text":"Documenter.Remotes.Remote\nDocumenter.Remotes.repourl\nDocumenter.Remotes.fileurl\nDocumenter.Remotes.issueurl","category":"page"},{"location":"lib/remote-links/#Documenter.Remotes.Remote","page":"Remote repository links","title":"Documenter.Remotes.Remote","text":"abstract type Remote\n\nAbstract supertype for implementing additional remote repositories that Documenter can use when generating links to files hosted on Git hosting service (such as GitHub, GitLab etc). For custom or less common Git hosting services, the user can create their own Remote subtype and pass that as the repo argument to makedocs.\n\nWhen implementing a new type T <: Remote, the following functions must be extended for that type:\n\nRemotes.repourl\nRemotes.fileurl\n\nAdditionally, it may also extend the following functions:\n\nRemotes.issueurl\n\n\n\n\n\n","category":"type"},{"location":"lib/remote-links/#Documenter.Remotes.repourl","page":"Remote repository links","title":"Documenter.Remotes.repourl","text":"Remotes.repourl(remote::T) -> String\n\nAn internal Documenter function that must be extended when implementing a user-defined Remote. It should return a string pointing to the landing page of the remote repository. E.g. for GitHub it returns \"https://github.com/USER/REPO/\".\n\n\n\n\n\n","category":"function"},{"location":"lib/remote-links/#Documenter.Remotes.fileurl","page":"Remote repository links","title":"Documenter.Remotes.fileurl","text":"Remotes.fileurl(remote::T, ref, filename, linerange) -> String\n\nAn internal Documenter function that must be extended when implementing a user-defined Remote. Should return the full remote URL to the source file filename, optionally including the line numbers.\n\nref is string containing the Git reference, such as a commit SHA, branch name or a tag name.\nfilename is a string containing the full path of the file in the repository without any leading / characters.\nlinerange either specifies a range of integers or is nothing. In the former case it either specifies a line number (if first(linerange) == last(linerange)) or a range of lines (first(linerange) < last(linerange)). The line information should be accessed only with the first and last functions (no other interface guarantees are made).\nIf linerange is nothing, the line numbers should be omitted and the returned URL should refer to the full file.\nIt is also acceptable for an implementation to completely ignore the value of the linerange argument, e.g. when the remote repository does not support direct links to particular line numbers.\n\nE.g. for GitHub, depending on the input arguments, it would return the following strings:\n\nref filename linerange returned string\n\"master\" \"foo/bar.jl\" nothing \"https://github.com/USER/REPO/blob/master/foo/bar.jl\"\n\"v1.2.3\" \"foo/bar.jl\" 12:12 \"https://github.com/USER/REPO/blob/v1.2.3/foo/bar.jl#L12\"\n\"xyz/foo\" \"README.md\" 10:15 \"https://github.com/USER/REPO/blob/xyz/foo/README.md#L10-L15\"\n\n\n\n\n\n","category":"function"},{"location":"lib/remote-links/#Documenter.Remotes.issueurl","page":"Remote repository links","title":"Documenter.Remotes.issueurl","text":"Remotes.issueurl(remote::T, issuenumber)\n\nAn internal Documenter function that can be extended when implementing a user-defined Remote. It should return a string with the full URL to an issue referenced by issuenumber, or nothing if it is not possible to determine such a URL.\n\nissuenumber is a string containing the issue number.\n\nIt is not mandatory to define this method for a custom Remote. In this case it just falls back to always returning nothing.\n\nE.g. for GitHub when issuenumber = \"123\", it would return \"https://github.com/USER/REPO/issues/123\".\n\n\n\n\n\n","category":"function"},{"location":"man/hosting/#Hosting-Documentation","page":"Hosting Documentation","title":"Hosting Documentation","text":"","category":"section"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"After going through the Package Guide and Doctests page you will need to host the generated documentation somewhere for potential users to read. This guide will describe how to set up automatic updates for your package docs using either the Travis CI build service or GitHub Actions together with GitHub Pages for hosting the generated HTML files. This is the same approach used by this package to host its own docs – the docs you're currently reading.","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"note: Note\nFollowing this guide should be the final step you take after you are comfortable with the syntax and build process used by Documenter.jl. It is recommended that you only proceed with the steps outlined here once you have successfully managed to build your documentation locally with Documenter.This guide assumes that you already have GitHub and Travis accounts setup. If not then go set those up first and then return here.It is possible to deploy from other systems than Travis CI or GitHub Actions, see the section on Deployment systems.","category":"page"},{"location":"man/hosting/#Overview","page":"Hosting Documentation","title":"Overview","text":"","category":"section"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"Once set up correctly, the following will happen each time you push new updates to your package repository:","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"Buildbots will start up and run your package tests in a \"Test\" stage.\nAfter the Test stage completes, a single bot will run a new \"Documentation\" stage, which will build the documentation.\nIf the documentation is built successfully, the bot will attempt to push the generated HTML pages back to GitHub.","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"Note that the hosted documentation does not update when you (or other contributors) make pull requests; you see updates only when you merge to the trunk branch (typically, master or main) or push new tags.","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"In the upcoming sections we describe how to configure the build service to run the documentation build stage. In general it is easiest to choose the same service as the one testing your package. If you don't explicitly select the service with the deploy_config keyword argument to deploydocs Documenter will try to automatically detect which system is running and use that.","category":"page"},{"location":"man/hosting/#Travis-CI","page":"Hosting Documentation","title":"Travis CI","text":"","category":"section"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"To tell Travis that we want a new build stage, we can add the following to an existing .travis.yml file. Note that the snippet below will not work by itself and must be accompanied by a complete Travis file.","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"jobs:\n  include:\n    - stage: \"Documentation\"\n      julia: 1\n      os: linux\n      script:\n        - julia --project=docs/ -e 'using Pkg; Pkg.develop(PackageSpec(path=pwd()));\n                                               Pkg.instantiate()'\n        - julia --project=docs/ docs/make.jl\n      after_success: skip","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"where the julia: and os: entries decide the worker from which the docs are built and deployed. In the example above we will thus build and deploy the documentation from a linux worker running Julia 1 (the latest stable version). For more information on how to setup a build stage, see the Travis manual for Build Stages.","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"The three lines in the script: section do the following:","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"Instantiate the doc-building environment (i.e. docs/Project.toml, see below).\nInstall your package in the doc-build environment.\nRun the docs/make.jl script, which builds and deploys the documentation.","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"note: Note\nIf your package has a build script you should call Pkg.build(\"PackageName\") after the call to Pkg.develop to make sure the package is built properly.","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"note: matrix: section in .travis.yml\nTravis CI used to use matrix: as the section to configure to build matrix in the config file. This now appears to be a deprecated alias for jobs:. If you use both matrix: and jobs: in your configuration, matrix: overrides the settings under jobs:.If your .travis.yml file still uses matrix:, it should be replaced with a a single jobs: section.","category":"page"},{"location":"man/hosting/#travis-ssh","page":"Hosting Documentation","title":"Authentication: SSH Deploy Keys","text":"","category":"section"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"In order to push the generated documentation from Travis you need to add deploy keys. Deploy keys provide push access to a single repository, to allow secure deployment of generated documentation from the builder to GitHub. The SSH keys can be generated with DocumenterTools.genkeys from the DocumenterTools package.","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"note: Note\nYou will need several command line programs (which, git and ssh-keygen) to be installed for the following steps to work. If DocumenterTools fails, please see the the SSH Deploy Keys Walkthrough section for instruction on how to generate the keys manually (including in Windows).","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"Install and load DocumenterTools with","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"pkg> add DocumenterTools","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"julia> using DocumenterTools","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"Then call the DocumenterTools.genkeys function as follows:","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"julia> using DocumenterTools\njulia> DocumenterTools.genkeys(user=\"MyUser\", repo=\"MyPackage.jl\")","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"where MyPackage is the name of the package you would like to create deploy keys for and MyUser is your GitHub username. Note that the keyword arguments are optional and can be omitted.","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"If the package is checked out in development mode with ] dev MyPackage, you can also use DocumenterTools.genkeys as follows:","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"julia> using MyPackage\njulia> DocumenterTools.genkeys(MyPackage)","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"where MyPackage is the package you would like to create deploy keys for. The output will look similar to the text below:","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"[ Info: add the public key below to https://github.com/USER/REPO/settings/keys\n      with read/write access:\n\n[SSH PUBLIC KEY HERE]\n\n[ Info: add a secure environment variable named 'DOCUMENTER_KEY' to\n  https://travis-ci.com/USER/REPO/settings with value:\n\n[LONG BASE64 ENCODED PRIVATE KEY]","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"Follow the instructions that are printed out, namely:","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"Add the public ssh key to your settings page for the GitHub repository that you are setting up by following the .../settings/keys link provided. Click on Add deploy key, enter the name documenter as the title, and copy the public key into the Key field. Check Allow write access to allow Documenter to commit the generated documentation to the repo.\nNext add the long private key to the Travis settings page using the provided link. Again note that you should include no whitespace when copying the key. In the Environment Variables section add a key with the name DOCUMENTER_KEY and the value that was printed out. Do not set the variable to be displayed in the build log. Then click Add.\nwarning: Security warning\nTo reiterate: make sure that this key is hidden. In particular, in the Travis CI settings the \"Display value in build log\" option should be OFF for the variable, so that it does not get printed when the tests run. This base64-encoded string contains the unencrypted private key that gives full write access to your repository, so it must be kept safe.  Also, make sure that you never expose this variable in your tests, nor merge any code that does. You can read more about Travis environment variables in Travis User Documentation.","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"note: Note\nThere are more explicit instructions for adding the keys to Travis in the SSH Deploy Keys Walkthrough section of the manual.","category":"page"},{"location":"man/hosting/#GitHub-Actions","page":"Hosting Documentation","title":"GitHub Actions","text":"","category":"section"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"To run the documentation build from GitHub Actions, create a new workflow configuration file called .github/workflows/documentation.yml with the following contents:","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"name: Documentation\n\non:\n  push:\n    branches:\n      - master # update to match your development branch (master, main, dev, trunk, ...)\n    tags: '*'\n  pull_request:\n\njobs:\n  build:\n    # These permissions are needed to:\n    # - Deploy the documentation: https://documenter.juliadocs.org/stable/man/hosting/#Permissions\n    # - Delete old caches: https://github.com/julia-actions/cache#usage\n    permissions:\n      actions: write\n      contents: write\n      pull-requests: read\n      statuses: write\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: julia-actions/setup-julia@v2\n        with:\n          version: '1'\n      - uses: julia-actions/cache@v2\n      - name: Install dependencies\n        shell: julia --color=yes --project=docs {0}\n        run: |\n          using Pkg\n          Pkg.develop(PackageSpec(path=pwd()))\n          Pkg.instantiate()\n      - name: Build and deploy\n        run: julia --color=yes --project=docs docs/make.jl\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # If authenticating with GitHub Actions token\n          DOCUMENTER_KEY: ${{ secrets.DOCUMENTER_KEY }} # If authenticating with SSH deploy key","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"This will install Julia, checkout the correct commit of your repository, and run the build of the documentation. The julia-version:, julia-arch: and os: entries decide the environment from which the docs are built and deployed. The example above builds and deploys the documentation from an Ubuntu worker running Julia 1.","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"tip: Tip\nThe example above is a basic workflow that should suit most projects. For more information on how to further customize your action, check out the GitHub Actions manual.","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"The commands in the lines in the run: section do the same as for Travis, see the previous section.","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"warning: TagBot & tagged versions\nIn order to deploy documentation for tagged versions, the GitHub Actions workflow needs to be triggered by the tag. However, by default, when the Julia TagBot uses just the GITHUB_TOKEN for authentication, it does not have the permission to trigger any further workflows jobs, and so the documentation CI job never runs for the tag.To work around that, TagBot should be configured to use DOCUMENTER_KEY for authentication, by adding ssh: ${{ secrets.DOCUMENTER_KEY }} to the with section. A complete TagBot workflow file could look as follows:name: TagBot\non:\n  issue_comment:\n    types:\n      - created\n  workflow_dispatch:\njobs:\n  TagBot:\n    if: github.event_name == 'workflow_dispatch' || github.actor == 'JuliaTagBot'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: JuliaRegistries/TagBot@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          ssh: ${{ secrets.DOCUMENTER_KEY }}","category":"page"},{"location":"man/hosting/#Authentication:-GITHUB_TOKEN","page":"Hosting Documentation","title":"Authentication: GITHUB_TOKEN","text":"","category":"section"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"When running from GitHub Actions it is possible to authenticate using the GitHub Actions authentication token (GITHUB_TOKEN). This is done by adding","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"to the configuration file, as showed in the previous section.","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"note: Note\nYou can only use GITHUB_TOKEN for authentication if the target repository of the deployment is the same as the current repository. In order to push elsewhere you should instead use a SSH deploy key.","category":"page"},{"location":"man/hosting/#Authentication:-SSH-Deploy-Keys","page":"Hosting Documentation","title":"Authentication: SSH Deploy Keys","text":"","category":"section"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"It is also possible to authenticate using a SSH deploy key, just as described in the SSH Deploy Keys section for Travis CI. You can generate the key in the same way, and then set the encoded key as a secret environment variable in your repository settings. You also need to make the key available for the doc building workflow by adding","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"DOCUMENTER_KEY: ${{ secrets.DOCUMENTER_KEY }}","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"to the configuration file, as showed in the previous section. See GitHub's manual for Encrypted secrets for more information.","category":"page"},{"location":"man/hosting/#Permissions","page":"Hosting Documentation","title":"Permissions","text":"","category":"section"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"The following GitHub Actions job or workflow permissions are required to successfully use deploydocs:","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"permissions:\n  contents: write  # Required when authenticating with `GITHUB_TOKEN`, not needed when authenticating with SSH deploy keys\n  pull-requests: read  # Required when using `push_preview=true`\n  statuses: write  # Optional, used to report documentation build statuses","category":"page"},{"location":"man/hosting/#Add-code-coverage-from-documentation-builds","page":"Hosting Documentation","title":"Add code coverage from documentation builds","text":"","category":"section"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"If you want code run during the documentation deployment to be covered by Codecov, you can edit the end of the docs part of your workflow configuration file so that docs/make.jl is run with the --code-coverage=user flag and the coverage reports are uploaded to Codecov:","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"      - run: julia --project=docs --code-coverage=user docs/make.jl\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          DOCUMENTER_KEY: ${{ secrets.DOCUMENTER_KEY }}\n      - uses: julia-actions/julia-processcoverage@v1\n      - uses: codecov/codecov-action@v5","category":"page"},{"location":"man/hosting/#docs/Project.toml","page":"Hosting Documentation","title":"docs/Project.toml","text":"","category":"section"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"The doc-build environment docs/Project.toml includes Documenter and other doc-build dependencies your package might have. If Documenter is the only dependency, then the Project.toml should include the following:","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"import Documenter, Markdown\nv = Documenter.DOCUMENTER_VERSION\nMarkdown.parse(\"\"\"\n```toml\n[deps]\nDocumenter = \"e30172f5-a6a5-5a46-863b-614d45cd2de4\"\n\n[compat]\nDocumenter = \"$(v.major).$(v.minor)\"\n```\n\"\"\")","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"Note that it is recommended that you have a [compat] section, like the one above, in your Project.toml file, which would restrict Documenter's version that gets installed when the build runs. This is to make sure that your builds do not start failing suddenly due to a new major release of Documenter, which may include breaking changes. However, it also means that you will not get updates to Documenter automatically, and hence need to upgrade Documenter's major version yourself.","category":"page"},{"location":"man/hosting/#The-deploydocs-Function","page":"Hosting Documentation","title":"The deploydocs Function","text":"","category":"section"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"At the moment your docs/make.jl file probably only contains","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"using Documenter, PACKAGE_NAME\n\nmakedocs()","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"We'll need to add an additional function call to this file after makedocs which would perform the deployment of the docs to the gh-pages branch. Add the following at the end of the file:","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"deploydocs(\n    repo = \"github.com/USER_NAME/PACKAGE_NAME.jl.git\",\n)","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"where USER_NAME and PACKAGE_NAME must be set to the appropriate names. Note that repo should not specify any protocol, i.e. it should not begin with https:// or git@.","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"See the deploydocs function documentation for more details.","category":"page"},{"location":"man/hosting/#.gitignore","page":"Hosting Documentation","title":".gitignore","text":"","category":"section"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"Add the following to your package's .gitignore file","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"docs/build/","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"These are needed to avoid committing generated content to your repository.","category":"page"},{"location":"man/hosting/#gh-pages-Branch","page":"Hosting Documentation","title":"gh-pages Branch","text":"","category":"section"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"By default, Documenter pushes documentation to the gh-pages branch. If the branch does not exist it will be created automatically by deploydocs. If it does exist then Documenter simply adds an additional commit with the built documentation. You should be aware that Documenter may overwrite existing content without warning.","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"If you wish to create the gh-pages branch manually, that can be done creating an \"orphan\" branch, with the git checkout --orphan option.","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"You also need to make sure that you have gh-pages branch and / (root) selected as the source of the GitHub Pages site in your GitHub repository settings, so that GitHub would actually serve the contents as a website.","category":"page"},{"location":"man/hosting/#Cleaning-up-gh-pages","page":"Hosting Documentation","title":"Cleaning up gh-pages","text":"","category":"section"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"The gh-pages branch can become very large, especially when push_preview is enabled to build documentation for each pull request. To clean up the branch and remove stale documentation previews, a GitHub Actions workflow like the following can be used.","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"name: Doc Preview Cleanup\n\non:\n  pull_request:\n    types: [closed]\n\n# Ensure that only one \"Doc Preview Cleanup\" workflow is force pushing at a time\nconcurrency:\n  group: doc-preview-cleanup\n  cancel-in-progress: false\n\njobs:\n  doc-preview-cleanup:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n    steps:\n      - name: Checkout gh-pages branch\n        uses: actions/checkout@v4\n        with:\n          ref: gh-pages\n      - name: Delete preview and history + push changes\n        run: |\n          if [ -d \"${preview_dir}\" ]; then\n              git config user.name \"Documenter.jl\"\n              git config user.email \"documenter@juliadocs.github.io\"\n              git rm -rf \"${preview_dir}\"\n              git commit -m \"delete preview\"\n              git branch gh-pages-new \"$(echo \"delete history\" | git commit-tree \"HEAD^{tree}\")\"\n              git push --force origin gh-pages-new:gh-pages\n          fi\n        env:\n          preview_dir: previews/PR${{ github.event.number }}","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"This workflow was based on CliMA/ClimaTimeSteppers.jl (Apache License 2.0).","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"The permissions: line above is described in the GitHub Docs; an alternative is to give GitHub workflows write permissions under the repo settings, e.g., https://github.com/<USER>/<REPO>.jl/settings/actions.","category":"page"},{"location":"man/hosting/#Woodpecker-CI","page":"Hosting Documentation","title":"Woodpecker CI","text":"","category":"section"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"To run a documentation build from Woodpecker CI, one should create an access token from their forge of choice: GitHub, GitLab, or Codeberg (or any Gitea instance). This access token should be added to Woodpecker CI as a secret named as project_access_token. The case does not matter since this will be passed as uppercase environment variables to your pipeline. Next, create a new pipeline configuration file called .woodpecker.yml with the following contents:","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"Woodpecker 0.15.x and pre-1.0.0\npipeline:\n    docs:\n    when:\n        branch: main  # update to match your development branch\n    image: julia\n    commands:\n        - julia --project=docs/ -e 'using Pkg; Pkg.develop(PackageSpec(path=pwd())); Pkg.instantiate()'\n        - julia --project=docs/ docs/make.jl\n    secrets: [ project_access_token ]  # access token is a secret\n\nWoodpecker 1.0.x and onwards\nsteps:\n    docs:\n    when:\n        branch: main  # update to match your development branch\n    image: julia\n    commands:\n        - julia --project=docs/ -e 'using Pkg; Pkg.develop(PackageSpec(path=pwd())); Pkg.instantiate()'\n        - julia --project=docs/ docs/make.jl\n    secrets: [ project_access_token ]  # access token is a secret\n","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"This will pull an image of julia from docker and run the following commands from commands: which instantiates the project for development and then runs the make.jl file and builds and deploys the documentation to a branch which defaults to pages which you can modify to something else e.g. GitHub → gh-pages, Codeberg → pages.","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"tip: Tip\nThe example above is a basic pipeline that suits most projects. Further information on how to customize your pipelines can be found in the official woodpecker documentation: Woodpecker CI.","category":"page"},{"location":"man/hosting/#Documentation-Versions","page":"Hosting Documentation","title":"Documentation Versions","text":"","category":"section"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"note: Note\nThis section describes the default mode of deployment, which is by version. See the following section on Deploying without the versioning scheme if you want to deploy directly to the \"root\".","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"By default the documentation is deployed as follows:","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"Documentation built for a tag <tag_prefix>vX.Y.Z will be stored in a folder vX.Y.Z, determined by the tag_prefix keyword to deploydocs (\"\" by default).\nDocumentation built from the devbranch branch (master by default) is stored in a folder determined by the devurl keyword to deploydocs (dev by default).","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"Which versions will show up in the version selector is determined by the versions argument to deploydocs. For examples of non-default tag_prefix usage, see Deploying from a monorepo.","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"Unless a custom domain is being used, the pages are found at:","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"https://USER_NAME.github.io/PACKAGE_NAME.jl/vX.Y.Z\nhttps://USER_NAME.github.io/PACKAGE_NAME.jl/dev","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"tip: Tip\nIf you need Documenter to maintain a CNAME file for you can use the cname argument of deploydocs to specify the domain.","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"By default Documenter will create a link called stable that points to the latest release","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"https://USER_NAME.github.io/PACKAGE_NAME.jl/stable","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"It is recommended to use this link, rather than the versioned links, since it will be updated with new releases.","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"Once your documentation has been pushed to the gh-pages branch you should add links to your README.md pointing to the stable (and perhaps dev) documentation URLs. It is common practice to make use of \"badges\" similar to those used for Travis and AppVeyor build statuses or code coverage. Adding the following to your package README.md should be all that is necessary:","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"[![](https://img.shields.io/badge/docs-stable-blue.svg)](https://USER_NAME.github.io/PACKAGE_NAME.jl/stable)\n[![](https://img.shields.io/badge/docs-dev-blue.svg)](https://USER_NAME.github.io/PACKAGE_NAME.jl/dev)","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"PACKAGE_NAME and USER_NAME should be replaced with their appropriate values. The colour and text of the image can be changed by altering docs-stable-blue as described on shields.io, though it is recommended that package authors follow this standard to make it easier for potential users to find documentation links across multiple package README files.","category":"page"},{"location":"man/hosting/#Fixing-broken-release-deployments","page":"Hosting Documentation","title":"Fixing broken release deployments","text":"","category":"section"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"It can happen that, for one reason or another, the documentation for a tagged version of your package fails to deploy and a fix would require changes to the source code (e.g. a misconfigured make.jl). However, as registered tags should not be changed, you can not simply update the original tag (e.g. v1.2.3) with the fix.","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"In this situation, you can manually create and push a tag for the commit with the fix that has the same version number, but also some build metadata (e.g. v1.2.3+doc1). For Git, this is a completely different tag, so it won't interfere with anything. But when Documenter runs on this tag, it will ignore the build metadata and deploy the docs as if they were for version v1.2.3.","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"Note that, as with normal tag builds, you need to make sure that your CI that runs Documenter is configured to run on such tags (e.g. that the regex constraining the branches the CI runs on is broad enough etc).","category":"page"},{"location":"man/hosting/#Deploying-without-the-versioning-scheme","page":"Hosting Documentation","title":"Deploying without the versioning scheme","text":"","category":"section"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"Documenter supports deployment directly to the website root ignoring any version subfolders as described in the previous section. This can be useful if you use Documenter for something that is not a versioned project, for example. To do this, pass versions = nothing to the deploydocs function. Now the pages should be found directly at","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"https://USER_NAME.github.io/PACKAGE_NAME.jl/","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"Preview builds are still deployed to the previews subfolder.","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"note: Note\nThe landing page for the JuliaDocs GitHub organization (source repository) is one example where this functionality is used.","category":"page"},{"location":"man/hosting/#Out-of-repo-deployment","page":"Hosting Documentation","title":"Out-of-repo deployment","text":"","category":"section"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"Sometimes the gh-pages branch can become really large, either just due to a large number of commits over time, or due figures and other large artifacts. In those cases, it can be useful to deploy the docs in the gh-pages of a separate repository. The following steps can be used to deploy the documentation of a \"source\" repository on a \"target\" repo:","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"Run DocumenterTools.genkeys() to generate a pair of keys\nAdd the deploy key to the \"target\" repository\nAdd the DOCUMENTER_KEY secret to the \"source\" repository (that runs the documentation workflow)\nAdapt docs/make.jl to deploy on \"target\" repository:","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"# url of target repo\nrepo = \"github.com/TargetRepoOrg/TargetRepo.git\"\n\n# You have to override the corresponding environment variable that\n# deplodocs uses to determine if it is deploying to the correct repository.\n# For GitHub, it's the GITHUB_REPOSITORY variable:\nwithenv(\"GITHUB_REPOSITORY\" => repo) do\n  deploydocs(repo=repo)\nend","category":"page"},{"location":"man/hosting/#Deploying-from-a-monorepo","page":"Hosting Documentation","title":"Deploying from a monorepo","text":"","category":"section"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"Documenter.jl supports building documentation for a package that lives in a monorepo, e.g., in a repository that contains multiple packages (including one potentially top level)","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"Here's one example of setting up documentation for a repository that has the following structure: one top level package and two subpackages PackageA.jl and PackageB.jl:","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":".\n├── README.md\n├── docs\n|   ├── make.jl\n│   └── Project.toml\n├── src/...\n├── PackageA.jl\n│   ├── docs\n|   │   ├── make.jl\n|   │   └── Project.toml\n│   └── src/...\n└── PackageB.jl\n    ├── docs\n    │   ├── make.jl\n    │   └── Project.toml\n    └── src/...","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"The three respective make.jl scripts should contain deploydocs settings that look something like","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"# In ./docs/make.jl\ndeploydocs(; repo = \"github.com/USER_NAME/PACKAGE_NAME.jl.git\",\n            # ...any additional kwargs\n            )\n\n# In ./PackageA.jl/docs/make.jl\ndeploydocs(; repo = \"github.com/USER_NAME/PACKAGE_NAME.jl.git\",\n             dirname=\"PackageA\",\n             tag_prefix=\"PackageA-\",\n             # ...any additional kwargs\n             )\n\n# In ./PackageB.jl/docs/make.jl\ndeploydocs(; repo = \"github.com/USER_NAME/PACKAGE_NAME.jl.git\",\n             dirname=\"PackageB\",\n             tag_prefix=\"PackageB-\",\n             # ...any additional kwargs\n             )","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"To build separate docs for each package, create three separate buildbot configurations, one for each package. Depending on the service used, the section that calls each make.jl script will need to be configured appropriately, e.g.,","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"# In the configuration file that builds docs for the top level package\nrun: julia --project=docs/ docs/make.jl\n\n# In the configuration file that builds docs for PackageA.jl\nrun: julia --project=PackageA.jl/docs/ PackageA.jl/docs/make.jl\n\n# In the configuration file that builds docs for PackageB.jl\nrun: julia --project=PackageB.jl/docs/ PackageB.jl/docs/make.jl","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"Releases of each subpackage should be tagged with that same prefix, namely v0.3.2 (for the top-level package), PackageA-v0.1.2, and PackageB-v3.2+extra_build_tags. which will then trigger versioned documentation deployments. Similarly to Documentation Versions, unless a custom domain is used these three separate sets of pages will be found at:","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"https://USER_NAME.github.io/PACKAGE_NAME.jl/vX.Y.Z\nhttps://USER_NAME.github.io/PACKAGE_NAME.jl/dev\nhttps://USER_NAME.github.io/PACKAGE_NAME.jl/stable  # Links to most recent top level version\n\nhttps://USER_NAME.github.io/PACKAGE_NAME.jl/PackageA/vX.Y.Z\nhttps://USER_NAME.github.io/PACKAGE_NAME.jl/PackageA/dev\nhttps://USER_NAME.github.io/PACKAGE_NAME.jl/PackageA/stable  # Links to most recent PackageA version\n\nhttps://USER_NAME.github.io/PACKAGE_NAME.jl/PackageB/vX.Y.Z\nhttps://USER_NAME.github.io/PACKAGE_NAME.jl/PackageB/dev\nhttps://USER_NAME.github.io/PACKAGE_NAME.jl/PackageB/stable  # Links to most recent PackageB version","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"While they won't automatically reference one another, such referencing can be added manually (e.g. by linking to https://USER_NAME.github.io/PACKAGE_NAME.jl/PackageA/stable from the docs built for PackageB).","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"warning: Warning\nWhen building multiple subpackages in the same repo, unique dirnames must be specified in each package's deploydocs; otherwise, only the most recently built package for a given version over the entire monorepo will be present at https://USER_NAME.github.io/PACKAGE_NAME.jl/PackageB/vX.Y.Z, and the rest of the subpackages' documentation will be unavailable.","category":"page"},{"location":"man/hosting/#Deployment-systems","page":"Hosting Documentation","title":"Deployment systems","text":"","category":"section"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"It is possible to customize Documenter to use other systems then the ones described in the sections above. This is done by passing a configuration (a DeployConfig) to deploydocs by the deploy_config keyword argument. Documenter supports Travis, GitHubActions, GitLab, and Buildkite natively, but it is easy to define your own by following the simple interface described below.","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"Documenter.DeployConfig\nDocumenter.deploy_folder\nDocumenter.DeployDecision\nDocumenter.authentication_method\nDocumenter.authenticated_repo_url\nDocumenter.documenter_key\nDocumenter.documenter_key_previews\nDocumenter.Travis\nDocumenter.GitHubActions\nDocumenter.GitLab\nDocumenter.Buildkite\nDocumenter.Woodpecker","category":"page"},{"location":"man/hosting/#Documenter.DeployConfig","page":"Hosting Documentation","title":"Documenter.DeployConfig","text":"DeployConfig\n\nAbstract type which new deployment configs should be subtypes of.\n\n\n\n\n\n","category":"type"},{"location":"man/hosting/#Documenter.deploy_folder","page":"Hosting Documentation","title":"Documenter.deploy_folder","text":"Documenter.deploy_folder(cfg::DeployConfig; repo, devbranch, push_preview, devurl,\n                         tag_prefix, kwargs...)\n\nReturn a DeployDecision. This function is called with the repo, devbranch, push_preview, tag_prefix, and devurl arguments from deploydocs.\n\nnote: Note\nImplementations of this functions should accept trailing kwargs... for compatibility with future Documenter releases which may pass additional keyword arguments.\n\n\n\n\n\n","category":"function"},{"location":"man/hosting/#Documenter.DeployDecision","page":"Hosting Documentation","title":"Documenter.DeployDecision","text":"DeployDecision(; kwargs...)\n\nStruct containing information about the decision to deploy or not deploy.\n\nArguments\n\nall_ok::Bool - Should documentation be deployed?\nbranch::String - The branch to which documentation should be pushed\nis_preview::Bool - Is this documentation build a pull request?\nrepo::String - The repo to which documentation should be pushed\nsubfolder::String - The subfolder to which documentation should be pushed\n\n\n\n\n\n","category":"type"},{"location":"man/hosting/#Documenter.authentication_method","page":"Hosting Documentation","title":"Documenter.authentication_method","text":"Documenter.authentication_method(::DeployConfig)\n\nReturn enum instance SSH or HTTPS depending on push method to be used.\n\nConfigs returning SSH should support Documenter.documenter_key. Configs returning HTTPS should support Documenter.authenticated_repo_url.\n\n\n\n\n\n","category":"function"},{"location":"man/hosting/#Documenter.authenticated_repo_url","page":"Hosting Documentation","title":"Documenter.authenticated_repo_url","text":"Documenter.authenticated_repo_url(cfg::DeployConfig)\n\nReturn an authenticated URL to the upstream repository.\n\nThis method must be supported by configs that push with HTTPS, see Documenter.authentication_method.\n\n\n\n\n\n","category":"function"},{"location":"man/hosting/#Documenter.documenter_key","page":"Hosting Documentation","title":"Documenter.documenter_key","text":"Documenter.documenter_key(cfg::DeployConfig)\n\nReturn the Base64-encoded SSH private key for the repository. Defaults to reading the DOCUMENTER_KEY environment variable.\n\nThis method must be supported by configs that push with SSH, see Documenter.authentication_method.\n\n\n\n\n\n","category":"function"},{"location":"man/hosting/#Documenter.documenter_key_previews","page":"Hosting Documentation","title":"Documenter.documenter_key_previews","text":"Documenter.documenter_key_previews(cfg::DeployConfig)\n\nReturn the Base64-encoded SSH private key for the repository. Uses the DOCUMENTER_KEY_PREVIEWS environment variable if it is defined, otherwise uses the DOCUMENTER_KEY environment variable.\n\nThis method must be supported by configs that push with SSH, see Documenter.authentication_method.\n\n\n\n\n\n","category":"function"},{"location":"man/hosting/#Documenter.Travis","page":"Hosting Documentation","title":"Documenter.Travis","text":"Travis <: DeployConfig\n\nDefault implementation of DeployConfig.\n\nThe following environment variables influences the build when using the Travis configuration:\n\nDOCUMENTER_KEY: must contain the Base64-encoded SSH private key for the repository. This variable should be set in the Travis settings for the repository. Make sure this variable is marked NOT to be displayed in the build log.\nTRAVIS_PULL_REQUEST: must be set to false. This avoids deployment on pull request builds.\nTRAVIS_REPO_SLUG: must match the value of the repo keyword to deploydocs.\nTRAVIS_EVENT_TYPE: may not be set to cron. This avoids re-deployment of existing docs on builds that were triggered by a Travis cron job.\nTRAVIS_BRANCH: unless TRAVIS_TAG is non-empty, this must have the same value as the devbranch keyword to deploydocs. This makes sure that only the development branch (commonly, the master branch) will deploy the \"dev\" documentation (deployed into a directory specified by the devurl keyword to deploydocs).\nTRAVIS_TAG: if set, a tagged version deployment is performed instead; the value must be a valid version number (i.e. match Base.VERSION_REGEX). The documentation for a package version tag gets deployed to a directory named after the version number in TRAVIS_TAG instead.\n\nThe TRAVIS_* variables are set automatically on Travis. More information on how Travis sets the TRAVIS_* variables can be found in the Travis documentation.\n\n\n\n\n\n","category":"type"},{"location":"man/hosting/#Documenter.GitHubActions","page":"Hosting Documentation","title":"Documenter.GitHubActions","text":"GitHubActions <: DeployConfig\n\nImplementation of DeployConfig for deploying from GitHub Actions.\n\nThe following environment variables influences the build when using the GitHubActions configuration:\n\nGITHUB_EVENT_NAME: must be set to push, workflow_dispatch, or schedule. This avoids deployment on pull request builds.\nGITHUB_REPOSITORY: must match the value of the repo keyword to deploydocs.\nGITHUB_REF: must match the devbranch keyword to deploydocs, alternatively correspond to a git tag.\nGITHUB_TOKEN or DOCUMENTER_KEY: used for authentication with GitHub, see the manual section for GitHub Actions for more information.\n\nThe GITHUB_* variables are set automatically on GitHub Actions, see the documentation.\n\n\n\n\n\n","category":"type"},{"location":"man/hosting/#Documenter.GitLab","page":"Hosting Documentation","title":"Documenter.GitLab","text":"GitLab <: DeployConfig\n\nGitLab implementation of DeployConfig.\n\nThe following environment variables influence the build when using the GitLab configuration:\n\nDOCUMENTER_KEY: must contain the Base64-encoded SSH private key for the repository. This variable should be set in the GitLab settings. Make sure this variable is marked NOT to be displayed in the build log.\nCI_COMMIT_BRANCH: the name of the commit branch.\nCI_EXTERNAL_PULL_REQUEST_IID: Pull Request ID from GitHub if the pipelines are for external pull requests.\nCI_PROJECT_PATH_SLUG: The namespace with project name. All letters lowercased and non-alphanumeric characters replaced with -.\nCI_COMMIT_TAG: The commit tag name. Present only when building tags.\nCI_PIPELINE_SOURCE: Indicates how the pipeline was triggered.\n\nThe CI_* variables are set automatically on GitLab. More information on how GitLab sets the CI_* variables can be found in the GitLab documentation.\n\n\n\n\n\n","category":"type"},{"location":"man/hosting/#Documenter.Buildkite","page":"Hosting Documentation","title":"Documenter.Buildkite","text":"Buildkite <: DeployConfig\n\nBuildkite implementation of DeployConfig.\n\nThe following environment variables influence the build when using the Buildkite configuration:\n\nDOCUMENTER_KEY: must contain the Base64-encoded SSH private key for the repository. This variable should be somehow set in the CI environment, e.g., provisioned by an agent environment plugin.\nBUILDKITE_BRANCH: the name of the commit branch.\nBUILDKITE_PULL_REQUEST: Pull Request ID from GitHub if the pipelines are for external pull requests.\nBUILDKITE_TAG: The commit tag name. Present only when building tags.\n\nThe BUILDKITE_* variables are set automatically on GitLab. More information on how Buildkite sets the BUILDKITE_* variables can be found in the Buildkite documentation.\n\n\n\n\n\n","category":"type"},{"location":"man/hosting/#Documenter.Woodpecker","page":"Hosting Documentation","title":"Documenter.Woodpecker","text":"Woodpecker <: DeployConfig\n\nImplementation of DeployConfig for deploying from Woodpecker CI.\n\nWoodpecker 1.0.0 and onwards\n\nThe following environmental variables are built-in from the Woodpecker pipeline influences how Documenter works.\n\nCI_REPO: must match the full name of the repository <owner>/<name> e.g. JuliaDocs/Documenter.jl\nCI_PIPELINE_EVENT: must be set to push, tag, pull_request, and deployment\nCI_COMMIT_REF: must match the devbranch keyword to deploydocs, alternatively correspond to a git tag.\nCI_COMMIT_TAG: must match to a tag.\nCI_COMMIT_PULL_REQUEST: must return the PR number.\nCI_FORGE_URL: env var to build the url to be used for authentication.\n\nWoodpecker 0.15.x and pre-1.0.0\n\nThe following environmental variables are built-in from the Woodpecker pipeline influences how Documenter works:\n\nCI_REPO: must match the full name of the repository <owner>/<name> e.g. JuliaDocs/Documenter.jl\nCI_REPO_LINK: must match the full link to the project repo\nCI_BUILD_EVENT: must be set to push, tag, pull_request, and deployment\nCI_COMMIT_REF: must match the devbranch keyword to deploydocs, alternatively correspond to a git tag.\nCI_COMMIT_TAG: must match to a tag.\nCI_COMMIT_PULL_REQUEST: must return the PR number.\n\nDocumenter Specific Environmental Variables\n\nDOCUMENTER_KEY: must contain the Base64-encoded SSH private key for the repository. This variable should be somehow set in the CI environment, e.g., provisioned by an agent environment plugin.\n\nLastly, another environment-variable used for authentication is the PROJECT_ACCESS_TOKEN which is an access token you defined by the forge you use e.g. GitHub, GitLab, Codeberg, and other gitea instances. Check their documentation on how to create an access token. This access token should be then added as a secret as documented in https://woodpecker-ci.org/docs/usage/secrets.\n\nExample Pipeline Syntax\n\n1.0.0 and onwards\n\nlabels:\n  platform: linux/amd64\n\nsteps:\n  docs:\n    when:\n      branch:\n        - main\n    image: opensuse/tumbleweed\n    commands:\n      - zypper --non-interactive install openssh juliaup git\n      - /usr/bin/julia --project=docs/ --startup-file=no --history-file=no -e \"import Pkg; Pkg.instantiate()\"\n      - /usr/bin/julia --project=docs/ --startup-file=no --history-file=no -e docs/make.jl\n    secrets: [ documenter_key, project_access_token ]\n\n0.15.x and pre-1.0.0\n\nplatforms: linux/amd64\n\npipeline:\n  docs:\n    when:\n      branch:\n        - main\n    image: opensuse/tumbleweed\n    commands:\n      - zypper --non-interactive install openssh juliaup git\n      - /usr/bin/julia --project=docs/ --startup-file=no --history-file=no -e \"import Pkg; Pkg.instantiate()\"\n      - /usr/bin/julia --project=docs/ --startup-file=no --history-file=no -e docs/make.jl\n    secrets: [ documenter_key, project_access_token ]\n\nMore about pipeline syntax is documented here:\n\n0.15.x: https://woodpecker-ci.org/docs/0.15/usage/pipeline-syntax (hosted at archive.org; the documentation is no longer available on the Woodpecker website)\n1.0.0 and onwards: https://woodpecker-ci.org/docs/1.0/usage/pipeline-syntax (hosted at archive.org; the documentation is no longer available on the Woodpecker website)\n2.0.0 and onwards: https://woodpecker-ci.org/docs/usage/workflow-syntax\n\n\n\n\n\n","category":"type"},{"location":"checklists/#Checklists","page":"Checklists","title":"Checklists","text":"","category":"section"},{"location":"checklists/","page":"Checklists","title":"Checklists","text":"The purpose of this page is to collate a series of checklists for commonly performed changes to the source code of Documenter.","category":"page"},{"location":"checklists/","page":"Checklists","title":"Checklists","text":"In each case, copy the checklist into the description of the pull request.","category":"page"},{"location":"checklists/#Making-a-release","page":"Checklists","title":"Making a release","text":"","category":"section"},{"location":"checklists/","page":"Checklists","title":"Checklists","text":"In preparation for a release, use the following checklist. These steps should be performed on a branch with an open pull request, either for a topic branch, or for a new branch release-1.y.z (\"Release version 1.y.z\") if multiple changes have accumulated on the master branch since the last release.","category":"page"},{"location":"checklists/","page":"Checklists","title":"Checklists","text":"## Pre-release\n\n - [ ] Change the version number in `Project.toml`\n   * If the release is breaking, increment MAJOR\n   * If the release adds a new user-visible feature, increment MINOR\n   * Otherwise (bug-fixes, documentation improvements), increment PATCH\n - [ ] Update `CHANGELOG.md`, following the existing style (in particular, make sure that the change log for this version has the correct version number and date).\n - [ ] Run `make changelog`, to make sure that all the issue references in `CHANGELOG.md` are up to date.\n - [ ] Check that the commit messages in this PR do not contain `[ci skip]`\n - [ ] Run [regression-tests workflow](https://github.com/JuliaDocs/Documenter.jl/actions/workflows/regression-tests.yml) using a `workflow_dispatch` trigger to check for any changes that broke extensions: <link-to-workflow-run-here>\n\n## The release\n\n - [ ] After merging the pull request, tag the release. There are two options for this:\n\n   1. [Comment `[at]JuliaRegistrator register` on the GitHub commit.](https://github.com/JuliaRegistries/Registrator.jl#via-the-github-app)\n   2. Use [JuliaHub's package registration feature](https://help.juliahub.com/juliahub/stable/contribute/#registrator) to trigger the registration.\n\n   Either of those should automatically publish a new version to the Julia registry.\n - Once registered, the `TagBot.yml` workflow should create a tag, and rebuild the documentation for this tag.\n - These steps can take quite a bit of time (1 hour or more), so don't be surprised if the new documentation takes a while to appear.","category":"page"},{"location":"lib/internals/docsystem/","page":"DocSystem","title":"DocSystem","text":"CollapsedDocStrings = true","category":"page"},{"location":"lib/internals/docsystem/#DocSystem","page":"DocSystem","title":"DocSystem","text":"","category":"section"},{"location":"lib/internals/docsystem/","page":"DocSystem","title":"DocSystem","text":"Modules = [Documenter.DocSystem]","category":"page"},{"location":"lib/internals/docsystem/#Documenter.DocSystem","page":"DocSystem","title":"Documenter.DocSystem","text":"Provides a consistent interface to retrieving DocStr objects from the Julia docsystem in both 0.4 and 0.5.\n\n\n\n\n\n","category":"module"},{"location":"lib/internals/docsystem/#Documenter.DocSystem.binding-Tuple{Any}","page":"DocSystem","title":"Documenter.DocSystem.binding","text":"Converts an object to a Base.Docs.Binding object.\n\nbinding(any)\n\n\nSupported inputs are:\n\nBinding\nDataType\nFunction\nModule\nSymbol\n\nNote that unsupported objects will throw an ArgumentError.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/docsystem/#Documenter.DocSystem.convertmeta-Tuple{IdDict{Any, Any}}","page":"DocSystem","title":"Documenter.DocSystem.convertmeta","text":"convertmeta(meta)\n\n\nConverts a 0.4-style docstring cache into a 0.5 one.\n\nThe original docstring cache is not modified.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/docsystem/#Documenter.DocSystem.docstr-Tuple{Markdown.MD}","page":"DocSystem","title":"Documenter.DocSystem.docstr","text":"docstr(md; kws...)\n\n\nConstruct a DocStr object from a Markdown.MD object.\n\nThe optional keyword arguments are used to add new data to the DocStr's .data dictionary.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/docsystem/#Documenter.DocSystem.getdocs","page":"DocSystem","title":"Documenter.DocSystem.getdocs","text":"getdocs(object; ...)\ngetdocs(object, typesig; kws...)\n\n\nAccepts objects of any type and tries to convert them to Bindings before searching for the Binding in the docsystem.\n\nNote that when conversion fails this method returns an empty Vector{DocStr}.\n\n\n\n\n\n","category":"function"},{"location":"lib/internals/docsystem/#Documenter.DocSystem.getdocs-2","page":"DocSystem","title":"Documenter.DocSystem.getdocs","text":"getdocs(binding; ...)\ngetdocs(binding, typesig; compare, modules, aliases)\n\n\nFind all DocStr objects that somehow match the provided arguments. That is, if getspecificdocs fails, get docs for aliases of binding (unless aliases is set to false). For compare being == also try getting docs for <:.\n\n\n\n\n\n","category":"function"},{"location":"lib/internals/docsystem/#Documenter.DocSystem.getspecificdocs","page":"DocSystem","title":"Documenter.DocSystem.getspecificdocs","text":"getspecificdocs(binding)\ngetspecificdocs(binding, typesig)\ngetspecificdocs(binding, typesig, compare)\ngetspecificdocs(binding, typesig, compare, modules)\n\n\nFind all DocStr objects that match the provided arguments exactly.\n\nbinding: the name of the object.\ntypesig: the signature of the object. Default: Union{}.\ncompare: how to compare signatures? (== (default), <: or >:)\nmodules: which modules to search through. Default: all modules.\n\nReturn a Vector{DocStr} ordered by definition order.\n\n\n\n\n\n","category":"function"},{"location":"lib/internals/docsystem/#Documenter.DocSystem.multidoc","page":"DocSystem","title":"Documenter.DocSystem.multidoc","text":"Construct a MultiDoc object from the provided argument.\n\nValid inputs are:\n\nMarkdown.MD\nDocs.FuncDoc\nDocs.TypeDoc\n\n\n\n\n\n","category":"function"},{"location":"lib/internals/docsystem/#Documenter.DocSystem.parsedoc-Tuple{Base.Docs.DocStr}","page":"DocSystem","title":"Documenter.DocSystem.parsedoc","text":"DocSystem.parsedoc(docstr::DocStr) -> Markdown.MD\n\nThin internal wrapper around Base.Docs.parsedoc which prints additional debug information in case Base.Docs.parsedoc fails with an exception.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/docsystem/#Documenter.DocSystem.public_unexported_msg-Tuple{Documenter.DocSystem.APIStatus}","page":"DocSystem","title":"Documenter.DocSystem.public_unexported_msg","text":"This error message is reused in duplicate docstring warnings when we detect the case when a duplicate docstring in a non-explored public name.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/textdiff/","page":"TextDiff","title":"TextDiff","text":"CollapsedDocStrings = true","category":"page"},{"location":"lib/internals/textdiff/#TextDiff","page":"TextDiff","title":"TextDiff","text":"","category":"section"},{"location":"lib/internals/textdiff/","page":"TextDiff","title":"TextDiff","text":"Modules = [Documenter.TextDiff]","category":"page"},{"location":"lib/internals/textdiff/#Documenter.TextDiff.splitby-Tuple{Regex, AbstractString}","page":"TextDiff","title":"Documenter.TextDiff.splitby","text":"splitby(reg, text)\n\n\nSplits text at regex matches, returning an array of substrings. The parts of the string that match the regular expression are also included at the ends of the returned strings.\n\n\n\n\n\n","category":"method"},{"location":"man/syntax/#Syntax","page":"Syntax","title":"Syntax","text":"","category":"section"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"This section of the manual describes the syntax used by Documenter to build documentation. For supported Markdown syntax, see the documentation for the Markdown standard library in the Julia manual.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"Pages = [\"syntax.md\"]\nDepth = 2:2","category":"page"},{"location":"man/syntax/#@docs-block","page":"Syntax","title":"@docs block","text":"","category":"section"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"Splice one or more docstrings into a document in place of the code block, i.e.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"```@docs\nDocumenter\nmakedocs\ndeploydocs\n```","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"This block type is evaluated within the CurrentModule module if defined, otherwise within Main, and so each object listed in the block should be visible from that module. Undefined objects will raise warnings during documentation generation and cause the code block to be rendered in the final document unchanged.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"Objects may not be listed more than once within the document. When duplicate objects are detected an error will be raised and the build process will be terminated.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"To ensure that all docstrings from a module are included in the final document the modules keyword for makedocs can be set to the desired module or modules, i.e.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"makedocs(\n    modules = [Documenter],\n)","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"which will cause any unlisted docstrings to raise warnings when makedocs is called. If modules is not defined then no warnings are printed, even if a document has missing docstrings.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"Notice also that you can use @docs to display the documentation strings of only specific methods, by stating the dispatch types. For example","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"```@docs\nf(::Type1, ::Type2)\n```","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"will only display the documentation string of f that is related to these types. This can be useful when your module extends a function and adds a documentation string to that new method.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"Note that when specifying signatures, it should match the method definition exactly. Documenter will not match methods based on dispatch rules. For example, assuming you have a docstring attached to foo(::Integer) = ..., then neither foo(::Number) nor foo(::Int64) will match it in an at-docs block (even though Int64 <: Integer <: Number). The only way you can splice that docstring is by listing exactly foo(::Integer) in the at-docs block.","category":"page"},{"location":"man/syntax/#noncanonical-block","page":"Syntax","title":"@docs; canonical=false block","text":"","category":"section"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"You can pass the canonical keyword argument as false to @docs to indicate that the @docs should be be considered as non-canonical like so:","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"```@docs; canonical=false\nmakedocs\n```","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"This is useful when you want to include a docstring inline somewhere, e.g. in a tutorial, but the canonical version of the docstring is already in the API reference. References will all point to the canonical @docs block. For a particular docstring, you can include it as many times as you like with @docs ; canonical=false, but only once without. Non-canonical @docs blocks are ignored when checking for missing docstrings.","category":"page"},{"location":"man/syntax/#@autodocs-block","page":"Syntax","title":"@autodocs block","text":"","category":"section"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"Automatically splices all docstrings from the provided modules in place of the code block. This is equivalent to manually adding all the docstrings in a @docs block.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"```@autodocs\nModules = [Foo, Bar, Bar.Baz]\nOrder   = [:function, :type]\n```","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"The above @autodocs block adds all the docstrings found in modules Foo, Bar, and Bar.Baz that refer to functions or types to the document. Note that a submodule must be listed explicitly in order to include the docstrings within it.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"Each module is added in order and so all docs from Foo will appear before those of Bar. Possible values for the Order vector are","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":":module\n:constant\n:type\n:function\n:macro","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"If no Order is provided then the order listed above is used.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"When a potential docstring is found in one of the listed modules, but does not match any value from Order then it will be omitted from the document. Hence Order acts as a basic filter as well as sorter.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"In addition to Order, a Pages vector may be included in @autodocs to filter docstrings based on the source file in which they are defined:","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"```@autodocs\nModules = [Foo]\nPages   = [\"a.jl\", \"b.jl\"]\n```","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"In the above example docstrings from module Foo found in source files whose file path ends with a.jland b.jl are included. The page order provided by Pages is also used to sort the docstrings. Note that page matching is done using the end of the provided strings and so a.jl will be matched by any source file whose file path ends with a.jl, i.e. src/a.jl, src/foo/a.jl or src/bar_a.jl.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"To filter out certain docstrings by your own criteria, you can provide a function with the Filter keyword:","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"```@autodocs\nModules = [Foo]\nFilter = t -> typeof(t) === DataType && t <: Foo.C\n```","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"In the given example, only the docstrings of the subtypes of Foo.C are shown. Instead of an anonymous function you can give the name of a function you defined beforehand, too:","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"```@autodocs\nModules = [Foo]\nFilter =  myCustomFilterFunction\n```","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"To include only the public names from the modules listed in Modules use Private = false. In a similar way Public = false can be used to only show the private names. By default both of these are set to true so that all names will be shown.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"info: Info\nIn Julia versions up to and including v1.10, \"public\" = \"exported\". Starting with Julia v1.11, \"public\" = \"exported or marked with the public keyword\".","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"Functions exported from `Foo`:\n\n```@autodocs\nModules = [Foo]\nPrivate = false\nOrder = [:function]\n```\n\nPrivate types in module `Foo`:\n\n```@autodocs\nModules = [Foo]\nPublic = false\nOrder = [:type]\n```","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"note: Note\nWhen more complex sorting is needed then use @docs to define it explicitly.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"As with @docs, you can use @autodocs; canonical=false to indicate that the @autodocs block in non-canonical. See @docs; canonical=false block.","category":"page"},{"location":"man/syntax/#at-ref-at-id-links","page":"Syntax","title":"@ref and @id links","text":"","category":"section"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"Used in markdown links as the URL to tell Documenter to generate a cross-reference automatically. The text part of the link can be a code object (between backticks), header name, or GitHub PR/Issue number (# followed by a number).","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"# Syntax\n\n... [`makedocs`](@ref) ...\n\n# Functions\n\n```@docs\nmakedocs\n```\n\n... [Syntax](@ref) ...\n\n... [#42](@ref) ...","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"Plain text in the \"text\" part of a link will either cross-reference a header, or, when it is a number preceded by a #, a GitHub issue/pull request. Text wrapped in backticks will cross-reference a docstring from a @docs or @autodocs block.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"The code enclosed in the backticks for such a reference will be evaluated in the CurrentModule  given in the @meta block of the current page (Main by default). For @ref links inside a docstring, the CurrentModule is automatically set to the module containing the docstring.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"A reference that is a fully qualified name (e.g. [`Example.domath`](@ref) or [domath](@ref Example.domath)) will also be resolved in Main. That is, loading a package in docs/make.jl ensures that fully qualified @ref links work from anywhere.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"The @ref links may refer to docstrings or headers on different pages as well as the current page using the same syntax.","category":"page"},{"location":"man/syntax/#Named-@refs","page":"Syntax","title":"Named @refs","text":"","category":"section"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"It is also possible to override the destination of an @ref-link by adding the appropriate label to the link, such as a docstring reference or a page heading.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"Both of the following references point to `g` found in module `Main.Other`:\n\n* [`Main.Other.g`](@ref)\n* [the `g` function](@ref Main.Other.g)\n\nBoth of the following point to the heading \"On Something\":\n\n* [On Something](@ref)\n* [The section about something.](@ref \"On Something\")","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"This can be useful to avoid having to write fully qualified names for references that are not imported into the current module, or when the text displayed in the link is used to add additional meaning to the surrounding text, such as","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"Use [`for i = 1:10 ...`](@ref for) to loop over all the numbers from 1 to 10.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"note: Note\nNamed doc @refs should be used sparingly since writing unqualified names may, in some cases, make it difficult to tell which function is being referred to in a particular docstring if there happen to be several modules that provide definitions with the same name.","category":"page"},{"location":"man/syntax/#Duplicate-Headers","page":"Syntax","title":"Duplicate Headers","text":"","category":"section"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"In some cases a document may contain multiple headers with the same name, but on different pages or of different levels. To allow @ref to cross-reference a duplicate header it must be given a name as in the following example","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"# [Header](@id my_custom_header_name)\n\n...\n\n## Header\n\n... [Custom Header](@ref my_custom_header_name) ...","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"The link that wraps the named header is removed in the final document. The text for a named @ref ... does not need to match the header that it references. Named @ref ...s may refer to headers on different pages in the same way as unnamed ones do.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"Duplicate docstring references do not occur since splicing the same docstring into a document more than once is disallowed.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"note: Label precedence\nBoth user-defined and internally generated header reference labels take precedence over docstring references, in case there is a conflict.","category":"page"},{"location":"man/syntax/#@extref-link","page":"Syntax","title":"@extref link","text":"","category":"section"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"Using the DocumenterInterLinks plugin, it is possible to cross-reference the documentation of other projects whose documentation is generated by Documenter or Sphinx, using @extref links similar to the built-in @ref links for internal references.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"See External Cross-References and the documentation of the DocumenterInterLinks package for more details.","category":"page"},{"location":"man/syntax/#@meta-block","page":"Syntax","title":"@meta block","text":"","category":"section"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"This block type is used to define metadata key/value pairs that can be used elsewhere in the page. Currently recognised keys:","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"CurrentModule: module where Documenter evaluates, for example, @docs-block and @ref-links.\nDocTestSetup: code to be evaluated before a doctest, see the Setup Code section under Doctests.\nDocTestFilters: filters to deal with, for example, unpredictable output from doctests, see the Filtering Doctests section under Doctests.\nEditURL: link to where the page can be edited. This defaults to the .md page itself, but if the source is something else (for example if the .md page is generated as part of the doc build) this can be set, either as a local link, or an absolute url.\nDescription: a page-specific description that gets displayed in search engines and link previews. Overrides the site-wide description in makedocs.\nDraft: boolean for overriding the global draft mode for the page.\nCollapsedDocStrings: for output formats that support this (i.e. only HTML currently), if set to true, render all docstrings as collapsed by default.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"Example:","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"```@meta\nCurrentModule = FooBar\nDocTestSetup  = quote\n    using MyPackage\nend\nDocTestFilters = [r\"Stacktrace:[\\s\\S]+\"]\nEditURL = \"link/to/source/file\"\n```","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"Note that @meta blocks are always evaluated in Main.","category":"page"},{"location":"man/syntax/#@index-block","page":"Syntax","title":"@index block","text":"","category":"section"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"Generates a list of links to docstrings that have been spliced into a document. Valid settings are Pages, Modules, and Order. For example:","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"```@index\nPages   = [\"foo.md\"]\nModules = [Foo, Bar]\nOrder   = [:function, :type]\n```","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"When Pages or Modules are not provided then all pages or modules are included. Order defaults to","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"[:module, :constant, :type, :function, :macro]","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"if not specified. Order and Modules behave the same way as in @autodocs blocks and filter out docstrings that do not match one of the modules or categories specified.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"Note that the values assigned to Pages, Modules, and Order may be any valid Julia code and thus can be something more complex than an array literal if required, i.e.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"```@index\nPages = map(file -> joinpath(\"man\", file), readdir(\"man\"))\n```","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"It should be noted though that in this case Pages may not be sorted in the order that is expected by the user. Try to stick to array literals as much as possible.","category":"page"},{"location":"man/syntax/#@contents-block","page":"Syntax","title":"@contents block","text":"","category":"section"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"Generates a nested list of links to document sections. Valid settings are Pages and Depth.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"```@contents\nPages = [\"foo.md\"]\nDepth = 5\n```","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"As with @index if Pages is not provided then all pages are included. The default Depth value is 2, i.e. header levels 1 and 2 are included. Depth also accepts UnitRanges, to make it possible to configure also the minimum header level to be shown. Depth = 2:3 can be used to include only headers with levels 2-3, for example.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"tip: Replicating sidebar\nIn some cases it might be desirable to replicate some subsection of the sidebar in an @contents block. A possible pattern to achieve this without duplicating code is to define the pages keyword entry through a global variable in make.jl, e.g.SUBSECTION_PAGES = [\"subsection/a.md\", \"subsection/b.md\"]\nmakedocs(\n    pages = [\n        \"index.md\",\n        \"Subsection\" => SUBSECTION_PAGES,\n    ...That variable will exist in the Main module and can be reused in the @contents and other blocks, e.g.```@contents\nPages = Main.SUBSECTION_PAGES\n```Documenter will then list the contents of the \"Subsection\" pages, and they will always appear in the same order as they are in the sidebar.","category":"page"},{"location":"man/syntax/#reference-at-example","page":"Syntax","title":"@example block","text":"","category":"section"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"Evaluates the code block and inserts the result of the last expression into the final document along with the original source code. If the last expression returns nothing, the stdout and stderr streams of the whole block are inserted instead. A semicolon ; at the end of the last line has no effect.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"```@example\na = 1\nb = 2\na + b\n```","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"The above @example block will splice the following into the final document","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"```julia\na = 1\nb = 2\na + b\n```\n\n```\n3\n```","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"Leading and trailing newlines are removed from the rendered code blocks. Trailing whitespace on each line is also removed.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"note: Note\nThe working directory, pwd, is set to the directory in build where the file will be written to, and the paths in include calls are interpreted to be relative to pwd. This can be customized with the workdir keyword of makedocs.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"Hiding Source Code","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"Code blocks may have some content that does not need to be displayed in the final document. # hide comments can be appended to lines that should not be rendered, i.e.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"```@example\nimport Random # hide\nRandom.seed!(1) # hide\nA = rand(3, 3)\nb = [1, 2, 3]\nA \\ b\n```","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"Note that appending # hide to every line in an @example block will result in the block being hidden in the rendered document. The results block will still be rendered though. @setup blocks are a convenient shorthand for hiding an entire block, including the output.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"Empty Outputs","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"When an @example block returns nothing, the results block will show instead the stdout and stderr streams produced by the whole block. If these are empty, the results block is not displayed at all; only the source code block will be shown in the rendered document.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"Named @example Blocks","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"By default @example blocks are run in their own anonymous Modules to avoid side-effects between blocks. To share the same module between different blocks on a page the @example can be named with the following syntax","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"```@example 1\na = 1\n```\n\n```@example 1\nprintln(a)\n```","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"The name can be any text, not just integers as in the example above, i.e. @example foo.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"Named @example blocks can be useful when generating documentation that requires intermediate explanation or multimedia such as plots as illustrated in the following example","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"First we define some functions\n\n```@example 1\nusing PyPlot # hide\nf(x) = sin(2x) + 1\ng(x) = cos(x) - x\n```\n\nand then we plot `f` over the interval from ``-π`` to ``π``\n\n```@example 1\nx = range(-π, π; length=50)\nplot(x, f.(x), color = \"red\")\nsavefig(\"f-plot.svg\"); nothing # hide\n```\n\n![](f-plot.svg)\n\nand then we do the same with `g`\n\n```@example 1\nplot(x, g.(x), color = \"blue\")\nsavefig(\"g-plot.svg\"); nothing # hide\n```\n\n![](g-plot.svg)","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"Note that @example blocks are evaluated within the directory of build where the file will be rendered . This means that in the above example savefig will output the .svg files into that directory. This allows the images to be easily referenced without needing to worry about relative paths.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"info: Info\nIf you use Plots.jl with the default backend GR.jl, you will likely see warnings likeqt.qpa.xcb: could not connect to display\nqt.qpa.plugin: Could not load the Qt platform plugin \"xcb\" in \"\" even though it was found.To fix these, you need to set the environment variable GKSwstype to 100. For example, if you use GitHub actions to build your documentation, you can modify the default script to- name: Build and deploy\n  env:\n    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # For authentication with GitHub Actions token\n    DOCUMENTER_KEY: ${{ secrets.DOCUMENTER_KEY }} # For authentication with SSH deploy key\n    GKSwstype: \"100\" # https://discourse.julialang.org/t/generation-of-documentation-fails-qt-qpa-xcb-could-not-connect-to-display/60988\n  run: julia --project=docs --color=yes docs/make.jlAlternatively, you can set this environment variable directly in Julia usingENV[\"GKSwstype\"] = \"100\"","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"@example blocks automatically define ans which, as in the Julia REPL, is bound to the value of the last evaluated expression. This can be useful in situations such as the following one where binding the object returned by plot to a named variable would look out of place in the final rendered documentation:","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"```@example\nusing Gadfly # hide\nplot([sin, x -> 2sin(x) + x], -2π, 2π)\ndraw(SVG(\"plot.svg\", 6inch, 4inch), ans); nothing # hide\n```\n\n![](plot.svg)","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"Color output","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"@example blocks support colored text output by mapping ANSI escape codes to HTML. For example, this block:","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"```@example\nprintstyled(\"Here are some colors:\\n\"; color=:red, bold=true)\nfor color in 0:15\n    print(\"\\e[38;5;$(color);48;5;$(color)m  \")\n    print(\"\\e[49m\", lpad(color, 3), \" \")\n    color % 8 == 7 && println()\nend\nprint(\"\\e[m\")\n```","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"results in the following input and output blocks:","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"printstyled(\"Here are some colors:\\n\"; color=:red, bold=true)\nfor color in 0:15\n    print(\"\\e[38;5;$(color);48;5;$(color)m  \")\n    print(\"\\e[49m\", lpad(color, 3), \" \")\n    color % 8 == 7 && println()\nend\nprint(\"\\e[m\")","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"note: Disable color output\nTo disable color output globally, pass ansicolor=false to Documenter.HTML, and to disable locally for the block, use ansicolor=false, like so:```@example; ansicolor=false\nprintstyled(\"hello, world\"; color=:red, bold=true)\n```","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"Delayed Execution of @example Blocks","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"@example blocks accept a keyword argument continued which can be set to true or false (defaults to false). When continued = true the execution of the code is delayed until the next continued = false @example-block. This is needed for example when the expression in a block is not complete. Example:","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"```@example half-loop; continued = true\nfor i in 1:3\n    j = i^2\n```\nSome text explaining what we should do with `j`\n```@example half-loop\n    println(j)\nend\n```","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"Here the first block is not complete – the loop is missing the end. Thus, by setting continued = true here we delay the evaluation of the first block, until we reach the second block. A block with continued = true does not have any output.","category":"page"},{"location":"man/syntax/#@repl-block","page":"Syntax","title":"@repl block","text":"","category":"section"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"These are similar to @example blocks, but add a julia> prompt before each toplevel expression and do not fail upon encountering an error. The # hide syntax may be used in @repl blocks in the same way as in @example blocks. Furthermore, a semicolon ; at the end of a line will suppress the output as in the Julia REPL.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"```@repl\na = 1\nb = 2\na + b\n```","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"will generate","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"```julia\njulia> a = 1\n1\n\njulia> b = 2\n2\n\njulia> a + b\n3\n```","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"And likewise","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"```@repl\nsqrt(-1)\n```","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"will generate","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"```julia\njulia> sqrt(-1)\nERROR: DomainError with -1.0:\nsqrt will only return a complex result if called with a complex argument. Try sqrt(Complex(x)).\n```","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"@repl blocks support colored output, just like @example blocks. The following block","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"```@repl\nprintstyled(\"hello, world\"; color=:red, bold=true)\n```","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"gives","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"printstyled(\"hello, world\"; color=:red, bold=true)","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"note: Disable color output\nTo disable color output globally, pass ansicolor=false to Documenter.HTML, and to disable locally for the block, use ansicolor=false, like so:```@repl; ansicolor=false\nprintstyled(\"hello, world\"; color=:red, bold=true)\n```","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"Named @repl <name> blocks behave in the same way as named @example <name> blocks.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"note: Note\nThe working directory, pwd, is set to the directory in build where the file will be written to, and the paths in include calls are interpreted to be relative to pwd.  This can be customized with the workdir keyword of makedocs.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"note: Soft vs hard scope\nJulia 1.5 changed the REPL to use the soft scope when handling global variables in for loops etc. When using Documenter with Julia 1.5 or above, Documenter uses the soft scope in @repl-blocks and REPL-type doctests.","category":"page"},{"location":"man/syntax/#reference-at-setup","page":"Syntax","title":"@setup <name> block","text":"","category":"section"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"These are similar to @example blocks, but both the input and output are hidden from the final document. This can be convenient if there are several lines of setup code that need to be hidden.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"note: Note\nUnlike @example and @repl blocks, @setup requires a <name> attribute to associate it with downstream @example <name> and @repl <name> blocks.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"```@setup abc\nusing RDatasets\nusing DataFrames\niris = dataset(\"datasets\", \"iris\")\n```\n\n```@example abc\nprintln(iris)\n```","category":"page"},{"location":"man/syntax/#@eval-block","page":"Syntax","title":"@eval block","text":"","category":"section"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"Evaluates the contents of the block and inserts the resulting value into the final document, unless the last expression evaluates to nothing.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"In the following example we use the PyPlot package to generate a plot and display it in the final document.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"```@eval\nusing PyPlot\n\nx = range(-π, π; length=50)\ny = sin.(x)\n\nplot(x, y, color = \"red\")\nsavefig(\"plot.svg\")\n\nnothing\n```\n\n![](plot.svg)","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"Instead of returning nothing in the example above we could have returned a new Markdown.MD object through Markdown.parse. This can be more appropriate when the filename is not known until evaluation of the block itself.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"Another example is to generate markdown tables from machine readable data formats such as CSV or JSON.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"```@eval\nusing CSV\nusing Latexify\ndf = CSV.read(\"table.csv\")\nmdtable(df, latex=false)\n```","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"which will generate a markdown version of the CSV file table.csv and render it in the output format.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"The final expression in an @eval block must be either nothing or a valid Markdown.MD object. Other objects will generate a warning and will be rendered in text form as a code block, but this behavior can change and should not be relied upon.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"Note that each @eval block evaluates its contents within a separate module. When evaluating each block the present working directory, pwd, is set to the directory in build where the file will be written to, and the paths in include calls are interpreted to be relative to pwd.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"note: Note\nIn most cases @example is preferred over @eval. Just like in normal Julia code where eval should only be considered as a last resort, @eval should be treated in the same way.","category":"page"},{"location":"man/syntax/#@raw-format-block","page":"Syntax","title":"@raw <format> block","text":"","category":"section"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"Allows code to be inserted into the final document verbatim. E.g. to insert custom HTML or LaTeX code into the output.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"The format argument is mandatory and Documenter uses it to determine whether a particular block should be copied over to the output or not. Currently supported formats are html and latex, used by the respective writers. A @raw block whose format is not recognized is usually ignored, so it is possible to have a raw block for each output format without the blocks being duplicated in the output.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"The following example shows how SVG code with custom styling can be included into documents using the @raw block.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"```@raw html\n<svg style=\"display: block; margin: 0 auto;\" width=\"5em\" height=\"5em\">\n\t<circle cx=\"2.5em\" cy=\"2.5em\" r=\"2em\" stroke=\"black\" stroke-width=\".1em\" fill=\"red\" />\n</svg>\n```","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"It will show up as follows, with code having been copied over verbatim to the HTML file.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"<svg style=\"display: block; margin: 0 auto;\" width=\"5em\" height=\"5em\">\n\t<circle cx=\"2.5em\" cy=\"2.5em\" r=\"2em\" stroke=\"black\" stroke-width=\".1em\" fill=\"red\" />\n    (SVG)\n</svg>","category":"page"},{"location":"#Documenter.jl","page":"Home","title":"Documenter.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A documentation generator for Julia.","category":"page"},{"location":"","page":"Home","title":"Home","text":"A package for building documentation from docstrings and markdown files.","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Note\nPlease read through the Documentation section of the main Julia manual if this is your first time using Julia's documentation system. Once you've read through how to write documentation for your code then come back here.","category":"page"},{"location":"#Package-Features","page":"Home","title":"Package Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Write all your documentation in Markdown.\nMinimal configuration.\nDoctests Julia code blocks.\nCross references for docs and section headers.\nLaTeX syntax support.\nChecks for missing docstrings and incorrect cross references.\nGenerates tables of contents and docstring indexes.\nAutomatically builds and deploys docs from GitHub Actions to GitHub Pages, and also supports several other CI providers.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The Package Guide provides a tutorial explaining how to get started using Documenter.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Some examples of packages using Documenter can be found on the Examples page.","category":"page"},{"location":"","page":"Home","title":"Home","text":"See the Index for the complete list of documented functions and types.","category":"page"},{"location":"#Manual-Outline","page":"Home","title":"Manual Outline","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"man/guide.md\",\n    \"man/examples.md\",\n    \"man/syntax.md\",\n    \"man/doctests.md\",\n    \"man/hosting.md\",\n    \"man/latex.md\",\n    \"man/contributing.md\",\n]\nDepth = 1","category":"page"},{"location":"#Library-Outline","page":"Home","title":"Library Outline","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"lib/public.md\", \"lib/internals.md\"]","category":"page"},{"location":"#main-index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"lib/public.md\"]","category":"page"},{"location":"lib/internals/anchors/","page":"Anchors","title":"Anchors","text":"CollapsedDocStrings = true","category":"page"},{"location":"lib/internals/anchors/#Anchors","page":"Anchors","title":"Anchors","text":"","category":"section"},{"location":"lib/internals/anchors/","page":"Anchors","title":"Anchors","text":"Modules = [Documenter]\nPages = [\"anchors.jl\"]","category":"page"},{"location":"lib/internals/anchors/#Documenter.Anchor","page":"Anchors","title":"Documenter.Anchor","text":"Stores an arbitrary object called .object and it's location within a document.\n\nFields\n\nobject – the stored object.\norder  – ordering of object within the entire document.\nfile   – the destination file, in build, where the object will be written to.\nid     – the generated \"slug\" identifying the object.\nnth    – integer that unique-ifies anchors with the same id.\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/anchors/#Documenter.AnchorMap","page":"Anchors","title":"Documenter.AnchorMap","text":"Tree structure representing anchors in a document and their relationships with each other.\n\nObject Hierarchy\n\nid -> file -> anchors\n\nEach id maps to a file which in turn maps to a vector of Anchor objects.\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/anchors/#Documenter.anchor-Tuple{Documenter.AnchorMap, Any}","page":"Anchors","title":"Documenter.anchor","text":"anchor(m, id)\n\n\nReturns the Anchor object matching id. file and n may also be provided. An Anchor is returned, or nothing in case of no match.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/anchors/#Documenter.anchor_add!-Tuple{Documenter.AnchorMap, Documenter.Anchor, Any, Any}","page":"Anchors","title":"Documenter.anchor_add!","text":"anchor_add!(m, anchor, id, file)\n\n\nAdds a new Anchor to the AnchorMap for a given id and file.\n\nEither an actual Anchor object may be provided or any other object which is automatically wrapped in an Anchor before being added to the AnchorMap.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/anchors/#Documenter.anchor_exists-Tuple{Documenter.AnchorMap, Any, Any, Any}","page":"Anchors","title":"Documenter.anchor_exists","text":"anchor_exists(m, id, file, n)\n\n\nDoes the given id exist within the AnchorMap? A file and integer n may also be provided to narrow the search for existence.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/anchors/#Documenter.anchor_fragment-Tuple{Documenter.Anchor}","page":"Anchors","title":"Documenter.anchor_fragment","text":"Create an HTML fragment from an anchor.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/anchors/#Documenter.anchor_isunique-Tuple{Documenter.AnchorMap, Any}","page":"Anchors","title":"Documenter.anchor_isunique","text":"anchor_isunique(m, id)\n\n\nIs the id unique within the given AnchorMap? May also specify the file.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/anchors/#Documenter.anchor_label-Tuple{Documenter.Anchor}","page":"Anchors","title":"Documenter.anchor_label","text":"Create a label from an anchor.\n\n\n\n\n\n","category":"method"}]
}
